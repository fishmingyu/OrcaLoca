{"traceEvents": [{"ph": "M", "pid": 11306, "tid": 11306, "name": "process_name", "args": {"name": "MainProcess"}}, {"ph": "M", "pid": 11306, "tid": 11306, "name": "thread_name", "args": {"name": "MainThread"}}, {"pid": 11306, "tid": 11306, "ts": 37013128174.964, "ph": "X", "cat": "fee", "dur": 8.327, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128183.761, "ph": "X", "cat": "fee", "dur": 1.628, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128173.435, "ph": "X", "cat": "fee", "dur": 12.088, "name": "_default_inputs_outputs (/astropy__astropy/astropy/modeling/core.py:726)"}, {"pid": 11306, "tid": 11306, "ts": 37013128185.784, "ph": "X", "cat": "fee", "dur": 0.989, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128265.446, "ph": "X", "cat": "fee", "dur": 1.111, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013128267.016, "ph": "X", "cat": "fee", "dur": 0.214, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013128264.193, "ph": "X", "cat": "fee", "dur": 3.296, "name": "model (/astropy__astropy/astropy/modeling/parameters.py:607)"}, {"pid": 11306, "tid": 11306, "ts": 37013128317.892, "ph": "X", "cat": "fee", "dur": 0.276, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013128318.399, "ph": "X", "cat": "fee", "dur": 0.142, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013128317.468, "ph": "X", "cat": "fee", "dur": 1.289, "name": "model (/astropy__astropy/astropy/modeling/parameters.py:607)"}, {"pid": 11306, "tid": 11306, "ts": 37013128326.535, "ph": "X", "cat": "fee", "dur": 3.582, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128324.059, "ph": "X", "cat": "fee", "dur": 7.691, "name": "_initialize_constraints (/astropy__astropy/astropy/modeling/core.py:2365)"}, {"pid": 11306, "tid": 11306, "ts": 37013128332.573, "ph": "X", "cat": "fee", "dur": 0.63, "name": "_initialize_setters (/astropy__astropy/astropy/modeling/core.py:744)"}, {"pid": 11306, "tid": 11306, "ts": 37013128335.913, "ph": "X", "cat": "fee", "dur": 1.087, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128338.481, "ph": "X", "cat": "fee", "dur": 1.051, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128341.939, "ph": "X", "cat": "fee", "dur": 13.73, "name": "quantity_asanyarray (/astropy__astropy/astropy/units/utils.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013128358.719, "ph": "X", "cat": "fee", "dur": 0.396, "name": "unit (/astropy__astropy/astropy/modeling/parameters.py:346)"}, {"pid": 11306, "tid": 11306, "ts": 37013128359.893, "ph": "X", "cat": "fee", "dur": 0.519, "name": "internal_unit (/astropy__astropy/astropy/modeling/parameters.py:380)"}, {"pid": 11306, "tid": 11306, "ts": 37013128356.923, "ph": "X", "cat": "fee", "dur": 6.374, "name": "_initialize_parameter_value (/astropy__astropy/astropy/modeling/core.py:2525)"}, {"pid": 11306, "tid": 11306, "ts": 37013128364.327, "ph": "X", "cat": "fee", "dur": 2.809, "name": "quantity_asanyarray (/astropy__astropy/astropy/units/utils.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013128368.132, "ph": "X", "cat": "fee", "dur": 0.137, "name": "unit (/astropy__astropy/astropy/modeling/parameters.py:346)"}, {"pid": 11306, "tid": 11306, "ts": 37013128368.554, "ph": "X", "cat": "fee", "dur": 0.122, "name": "internal_unit (/astropy__astropy/astropy/modeling/parameters.py:380)"}, {"pid": 11306, "tid": 11306, "ts": 37013128367.47, "ph": "X", "cat": "fee", "dur": 1.811, "name": "_initialize_parameter_value (/astropy__astropy/astropy/modeling/core.py:2525)"}, {"pid": 11306, "tid": 11306, "ts": 37013128371.984, "ph": "X", "cat": "fee", "dur": 2.238, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128380.481, "ph": "X", "cat": "fee", "dur": 0.332, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128385.534, "ph": "X", "cat": "fee", "dur": 0.754, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013128386.38, "ph": "X", "cat": "fee", "dur": 0.224, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013128386.698, "ph": "X", "cat": "fee", "dur": 0.09, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013128383.361, "ph": "X", "cat": "fee", "dur": 5.872, "name": "check_broadcast (/astropy__astropy/astropy/utils/shapes.py:308)"}, {"pid": 11306, "tid": 11306, "ts": 37013128370.726, "ph": "X", "cat": "fee", "dur": 18.764, "name": "_check_param_broadcast (/astropy__astropy/astropy/modeling/core.py:2608)"}, {"pid": 11306, "tid": 11306, "ts": 37013128390.183, "ph": "X", "cat": "fee", "dur": 1.963, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128334.07, "ph": "X", "cat": "fee", "dur": 59.047, "name": "_initialize_parameters (/astropy__astropy/astropy/modeling/core.py:2382)"}, {"pid": 11306, "tid": 11306, "ts": 37013128395.003, "ph": "X", "cat": "fee", "dur": 0.397, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128401.58, "ph": "X", "cat": "fee", "dur": 0.302, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128407.453, "ph": "X", "cat": "fee", "dur": 1.261, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128394.262, "ph": "X", "cat": "fee", "dur": 14.561, "name": "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:2568)"}, {"pid": 11306, "tid": 11306, "ts": 37013128411.572, "ph": "X", "cat": "fee", "dur": 0.304, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013128412.201, "ph": "X", "cat": "fee", "dur": 0.513, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)"}, {"pid": 11306, "tid": 11306, "ts": 37013128412.998, "ph": "X", "cat": "fee", "dur": 1.596, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128415.519, "ph": "X", "cat": "fee", "dur": 0.089, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013128415.758, "ph": "X", "cat": "fee", "dur": 0.178, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)"}, {"pid": 11306, "tid": 11306, "ts": 37013128416.115, "ph": "X", "cat": "fee", "dur": 0.852, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128409.842, "ph": "X", "cat": "fee", "dur": 7.208, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013128171.333, "ph": "X", "cat": "fee", "dur": 245.891, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:701)"}, {"pid": 11306, "tid": 11306, "ts": 37013128168.208, "ph": "X", "cat": "fee", "dur": 249.945, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:430)"}, {"pid": 11306, "tid": 11306, "ts": 37013128166.376, "ph": "X", "cat": "fee", "dur": 252.527, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:432)"}, {"pid": 11306, "tid": 11306, "ts": 37013128425.033, "ph": "X", "cat": "fee", "dur": 1.099, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128430.329, "ph": "X", "cat": "fee", "dur": 0.814, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128424.466, "ph": "X", "cat": "fee", "dur": 6.775, "name": "_default_inputs_outputs (/astropy__astropy/astropy/modeling/core.py:726)"}, {"pid": 11306, "tid": 11306, "ts": 37013128431.484, "ph": "X", "cat": "fee", "dur": 0.695, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128487.831, "ph": "X", "cat": "fee", "dur": 0.482, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013128488.64, "ph": "X", "cat": "fee", "dur": 0.185, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013128487.265, "ph": "X", "cat": "fee", "dur": 1.729, "name": "model (/astropy__astropy/astropy/modeling/parameters.py:607)"}, {"pid": 11306, "tid": 11306, "ts": 37013128529.773, "ph": "X", "cat": "fee", "dur": 0.222, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013128530.218, "ph": "X", "cat": "fee", "dur": 0.148, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013128529.408, "ph": "X", "cat": "fee", "dur": 1.123, "name": "model (/astropy__astropy/astropy/modeling/parameters.py:607)"}, {"pid": 11306, "tid": 11306, "ts": 37013128536.755, "ph": "X", "cat": "fee", "dur": 1.564, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128534.956, "ph": "X", "cat": "fee", "dur": 4.39, "name": "_initialize_constraints (/astropy__astropy/astropy/modeling/core.py:2365)"}, {"pid": 11306, "tid": 11306, "ts": 37013128539.987, "ph": "X", "cat": "fee", "dur": 0.553, "name": "_initialize_setters (/astropy__astropy/astropy/modeling/core.py:744)"}, {"pid": 11306, "tid": 11306, "ts": 37013128542.357, "ph": "X", "cat": "fee", "dur": 0.886, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128544.342, "ph": "X", "cat": "fee", "dur": 0.795, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128546.888, "ph": "X", "cat": "fee", "dur": 7.196, "name": "quantity_asanyarray (/astropy__astropy/astropy/units/utils.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013128556.036, "ph": "X", "cat": "fee", "dur": 0.195, "name": "unit (/astropy__astropy/astropy/modeling/parameters.py:346)"}, {"pid": 11306, "tid": 11306, "ts": 37013128556.606, "ph": "X", "cat": "fee", "dur": 0.222, "name": "internal_unit (/astropy__astropy/astropy/modeling/parameters.py:380)"}, {"pid": 11306, "tid": 11306, "ts": 37013128554.912, "ph": "X", "cat": "fee", "dur": 3.531, "name": "_initialize_parameter_value (/astropy__astropy/astropy/modeling/core.py:2525)"}, {"pid": 11306, "tid": 11306, "ts": 37013128559.303, "ph": "X", "cat": "fee", "dur": 2.653, "name": "quantity_asanyarray (/astropy__astropy/astropy/units/utils.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013128562.734, "ph": "X", "cat": "fee", "dur": 0.103, "name": "unit (/astropy__astropy/astropy/modeling/parameters.py:346)"}, {"pid": 11306, "tid": 11306, "ts": 37013128563.054, "ph": "X", "cat": "fee", "dur": 0.095, "name": "internal_unit (/astropy__astropy/astropy/modeling/parameters.py:380)"}, {"pid": 11306, "tid": 11306, "ts": 37013128562.242, "ph": "X", "cat": "fee", "dur": 1.365, "name": "_initialize_parameter_value (/astropy__astropy/astropy/modeling/core.py:2525)"}, {"pid": 11306, "tid": 11306, "ts": 37013128565.319, "ph": "X", "cat": "fee", "dur": 0.694, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128568.435, "ph": "X", "cat": "fee", "dur": 0.281, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128571.911, "ph": "X", "cat": "fee", "dur": 0.431, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013128572.446, "ph": "X", "cat": "fee", "dur": 0.211, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013128572.73, "ph": "X", "cat": "fee", "dur": 0.091, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013128570.327, "ph": "X", "cat": "fee", "dur": 4.092, "name": "check_broadcast (/astropy__astropy/astropy/utils/shapes.py:308)"}, {"pid": 11306, "tid": 11306, "ts": 37013128564.678, "ph": "X", "cat": "fee", "dur": 9.957, "name": "_check_param_broadcast (/astropy__astropy/astropy/modeling/core.py:2608)"}, {"pid": 11306, "tid": 11306, "ts": 37013128574.984, "ph": "X", "cat": "fee", "dur": 1.561, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128540.879, "ph": "X", "cat": "fee", "dur": 36.329, "name": "_initialize_parameters (/astropy__astropy/astropy/modeling/core.py:2382)"}, {"pid": 11306, "tid": 11306, "ts": 37013128578.154, "ph": "X", "cat": "fee", "dur": 0.288, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128582.002, "ph": "X", "cat": "fee", "dur": 0.285, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128586.517, "ph": "X", "cat": "fee", "dur": 1.087, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128577.73, "ph": "X", "cat": "fee", "dur": 9.96, "name": "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:2568)"}, {"pid": 11306, "tid": 11306, "ts": 37013128589.153, "ph": "X", "cat": "fee", "dur": 0.214, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013128589.556, "ph": "X", "cat": "fee", "dur": 0.371, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)"}, {"pid": 11306, "tid": 11306, "ts": 37013128590.212, "ph": "X", "cat": "fee", "dur": 0.863, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128591.538, "ph": "X", "cat": "fee", "dur": 0.095, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013128591.758, "ph": "X", "cat": "fee", "dur": 0.302, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)"}, {"pid": 11306, "tid": 11306, "ts": 37013128592.211, "ph": "X", "cat": "fee", "dur": 0.777, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128588.167, "ph": "X", "cat": "fee", "dur": 5.019, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013128423.633, "ph": "X", "cat": "fee", "dur": 169.686, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:701)"}, {"pid": 11306, "tid": 11306, "ts": 37013128421.89, "ph": "X", "cat": "fee", "dur": 171.862, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:430)"}, {"pid": 11306, "tid": 11306, "ts": 37013128420.748, "ph": "X", "cat": "fee", "dur": 173.39, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:432)"}, {"pid": 11306, "tid": 11306, "ts": 37013128600.579, "ph": "X", "cat": "fee", "dur": 0.304, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128599.793, "ph": "X", "cat": "fee", "dur": 1.902, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128604.353, "ph": "X", "cat": "fee", "dur": 0.08, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128604.026, "ph": "X", "cat": "fee", "dur": 1.235, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128605.758, "ph": "X", "cat": "fee", "dur": 0.073, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128605.524, "ph": "X", "cat": "fee", "dur": 0.764, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128606.676, "ph": "X", "cat": "fee", "dur": 0.065, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128606.445, "ph": "X", "cat": "fee", "dur": 0.804, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128607.704, "ph": "X", "cat": "fee", "dur": 0.063, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128607.506, "ph": "X", "cat": "fee", "dur": 1.11, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128608.959, "ph": "X", "cat": "fee", "dur": 0.065, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128608.773, "ph": "X", "cat": "fee", "dur": 0.793, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128610.143, "ph": "X", "cat": "fee", "dur": 0.082, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128609.824, "ph": "X", "cat": "fee", "dur": 1.112, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128611.388, "ph": "X", "cat": "fee", "dur": 0.074, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128611.195, "ph": "X", "cat": "fee", "dur": 0.866, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128612.445, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128612.218, "ph": "X", "cat": "fee", "dur": 0.847, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128613.394, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128613.2, "ph": "X", "cat": "fee", "dur": 1.052, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128614.64, "ph": "X", "cat": "fee", "dur": 0.089, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128614.417, "ph": "X", "cat": "fee", "dur": 0.723, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128616.094, "ph": "X", "cat": "fee", "dur": 0.462, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013128616.807, "ph": "X", "cat": "fee", "dur": 0.093, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013128617.142, "ph": "X", "cat": "fee", "dur": 0.1, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013128617.649, "ph": "X", "cat": "fee", "dur": 0.068, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128617.412, "ph": "X", "cat": "fee", "dur": 0.875, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128619.061, "ph": "X", "cat": "fee", "dur": 0.311, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013128619.548, "ph": "X", "cat": "fee", "dur": 0.081, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013128619.855, "ph": "X", "cat": "fee", "dur": 0.059, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013128620.062, "ph": "X", "cat": "fee", "dur": 0.063, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013128620.521, "ph": "X", "cat": "fee", "dur": 0.094, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128620.271, "ph": "X", "cat": "fee", "dur": 0.823, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128625.472, "ph": "X", "cat": "fee", "dur": 0.062, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128627.231, "ph": "X", "cat": "fee", "dur": 0.069, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128626.913, "ph": "X", "cat": "fee", "dur": 0.879, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128626.332, "ph": "X", "cat": "fee", "dur": 1.556, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3376)"}, {"pid": 11306, "tid": 11306, "ts": 37013128625.242, "ph": "X", "cat": "fee", "dur": 2.766, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128628.635, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128629.92, "ph": "X", "cat": "fee", "dur": 0.065, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128629.732, "ph": "X", "cat": "fee", "dur": 0.689, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128629.185, "ph": "X", "cat": "fee", "dur": 1.322, "name": "n_outputs (/astropy__astropy/astropy/modeling/core.py:3385)"}, {"pid": 11306, "tid": 11306, "ts": 37013128628.445, "ph": "X", "cat": "fee", "dur": 2.154, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128631.054, "ph": "X", "cat": "fee", "dur": 0.097, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013128631.294, "ph": "X", "cat": "fee", "dur": 0.122, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013128635.594, "ph": "X", "cat": "fee", "dur": 0.554, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013128636.235, "ph": "X", "cat": "fee", "dur": 0.074, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013128637.102, "ph": "X", "cat": "fee", "dur": 0.091, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:257)"}, {"pid": 11306, "tid": 11306, "ts": 37013128638.193, "ph": "X", "cat": "fee", "dur": 0.052, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:257)"}, {"pid": 11306, "tid": 11306, "ts": 37013128632.05, "ph": "X", "cat": "fee", "dur": 6.635, "name": "combine_labels (/astropy__astropy/astropy/modeling/utils.py:245)"}, {"pid": 11306, "tid": 11306, "ts": 37013128639.125, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128640.517, "ph": "X", "cat": "fee", "dur": 0.08, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3371)"}, {"pid": 11306, "tid": 11306, "ts": 37013128641.364, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128641.143, "ph": "X", "cat": "fee", "dur": 0.909, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128643.089, "ph": "X", "cat": "fee", "dur": 0.094, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013128643.356, "ph": "X", "cat": "fee", "dur": 0.442, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)"}, {"pid": 11306, "tid": 11306, "ts": 37013128644.133, "ph": "X", "cat": "fee", "dur": 0.07, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128643.953, "ph": "X", "cat": "fee", "dur": 0.639, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128644.982, "ph": "X", "cat": "fee", "dur": 0.072, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013128645.172, "ph": "X", "cat": "fee", "dur": 0.276, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)"}, {"pid": 11306, "tid": 11306, "ts": 37013128645.779, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128645.594, "ph": "X", "cat": "fee", "dur": 0.606, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128642.568, "ph": "X", "cat": "fee", "dur": 3.702, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013128639.948, "ph": "X", "cat": "fee", "dur": 6.526, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:761)"}, {"pid": 11306, "tid": 11306, "ts": 37013128638.908, "ph": "X", "cat": "fee", "dur": 7.709, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128647.19, "ph": "X", "cat": "fee", "dur": 0.279, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:768)"}, {"pid": 11306, "tid": 11306, "ts": 37013128647.608, "ph": "X", "cat": "fee", "dur": 0.059, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:768)"}, {"pid": 11306, "tid": 11306, "ts": 37013128649.055, "ph": "X", "cat": "fee", "dur": 0.167, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013128649.314, "ph": "X", "cat": "fee", "dur": 0.059, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013128649.888, "ph": "X", "cat": "fee", "dur": 0.075, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:257)"}, {"pid": 11306, "tid": 11306, "ts": 37013128650.035, "ph": "X", "cat": "fee", "dur": 0.047, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:257)"}, {"pid": 11306, "tid": 11306, "ts": 37013128647.857, "ph": "X", "cat": "fee", "dur": 2.417, "name": "combine_labels (/astropy__astropy/astropy/modeling/utils.py:245)"}, {"pid": 11306, "tid": 11306, "ts": 37013128650.651, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128651.515, "ph": "X", "cat": "fee", "dur": 0.137, "name": "n_outputs (/astropy__astropy/astropy/modeling/core.py:3380)"}, {"pid": 11306, "tid": 11306, "ts": 37013128652.26, "ph": "X", "cat": "fee", "dur": 0.083, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128652.058, "ph": "X", "cat": "fee", "dur": 0.757, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128651.256, "ph": "X", "cat": "fee", "dur": 1.728, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:772)"}, {"pid": 11306, "tid": 11306, "ts": 37013128650.435, "ph": "X", "cat": "fee", "dur": 2.647, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128653.571, "ph": "X", "cat": "fee", "dur": 0.065, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128655.419, "ph": "X", "cat": "fee", "dur": 0.065, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128655.214, "ph": "X", "cat": "fee", "dur": 0.841, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128654.12, "ph": "X", "cat": "fee", "dur": 2.125, "name": "name (/astropy__astropy/astropy/modeling/core.py:1148)"}, {"pid": 11306, "tid": 11306, "ts": 37013128653.377, "ph": "X", "cat": "fee", "dur": 2.964, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128656.918, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128656.722, "ph": "X", "cat": "fee", "dur": 1.966, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128659.122, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128658.939, "ph": "X", "cat": "fee", "dur": 0.773, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128660.021, "ph": "X", "cat": "fee", "dur": 0.06, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128659.851, "ph": "X", "cat": "fee", "dur": 0.958, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128661.339, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128661.147, "ph": "X", "cat": "fee", "dur": 0.726, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128662.275, "ph": "X", "cat": "fee", "dur": 0.062, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128663.541, "ph": "X", "cat": "fee", "dur": 0.066, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128663.346, "ph": "X", "cat": "fee", "dur": 0.915, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128662.934, "ph": "X", "cat": "fee", "dur": 1.399, "name": "eqcons (/astropy__astropy/astropy/modeling/core.py:3393)"}, {"pid": 11306, "tid": 11306, "ts": 37013128662.103, "ph": "X", "cat": "fee", "dur": 3.312, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128665.873, "ph": "X", "cat": "fee", "dur": 0.072, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128666.92, "ph": "X", "cat": "fee", "dur": 0.063, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128666.704, "ph": "X", "cat": "fee", "dur": 0.742, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128666.52, "ph": "X", "cat": "fee", "dur": 0.99, "name": "ineqcons (/astropy__astropy/astropy/modeling/core.py:3401)"}, {"pid": 11306, "tid": 11306, "ts": 37013128665.652, "ph": "X", "cat": "fee", "dur": 1.945, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128670.144, "ph": "X", "cat": "fee", "dur": 0.942, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128683.199, "ph": "X", "cat": "fee", "dur": 0.397, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128669.302, "ph": "X", "cat": "fee", "dur": 16.66, "name": "_parameters_to_array (/astropy__astropy/astropy/modeling/core.py:2585)"}, {"pid": 11306, "tid": 11306, "ts": 37013128668.294, "ph": "X", "cat": "fee", "dur": 20.051, "name": "parameters (/astropy__astropy/astropy/modeling/core.py:1179)"}, {"pid": 11306, "tid": 11306, "ts": 37013128689.332, "ph": "X", "cat": "fee", "dur": 0.15, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128688.951, "ph": "X", "cat": "fee", "dur": 1.051, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128693.78, "ph": "X", "cat": "fee", "dur": 0.229, "name": "isleaf (/astropy__astropy/astropy/modeling/core.py:3475)"}, {"pid": 11306, "tid": 11306, "ts": 37013128694.609, "ph": "X", "cat": "fee", "dur": 0.609, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013128695.595, "ph": "X", "cat": "fee", "dur": 0.263, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013128692.803, "ph": "X", "cat": "fee", "dur": 3.72, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013128697.056, "ph": "X", "cat": "fee", "dur": 0.075, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128696.746, "ph": "X", "cat": "fee", "dur": 0.797, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128697.956, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128697.759, "ph": "X", "cat": "fee", "dur": 0.697, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128691.609, "ph": "X", "cat": "fee", "dur": 6.926, "name": "_make_leaflist (/astropy__astropy/astropy/modeling/core.py:3291)"}, {"pid": 11306, "tid": 11306, "ts": 37013128699.007, "ph": "X", "cat": "fee", "dur": 0.06, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128698.809, "ph": "X", "cat": "fee", "dur": 0.727, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128699.887, "ph": "X", "cat": "fee", "dur": 0.061, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128699.699, "ph": "X", "cat": "fee", "dur": 0.564, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128706.235, "ph": "X", "cat": "fee", "dur": 0.07, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128706.539, "ph": "X", "cat": "fee", "dur": 0.09, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128705.892, "ph": "X", "cat": "fee", "dur": 1.339, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128707.733, "ph": "X", "cat": "fee", "dur": 0.065, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128707.937, "ph": "X", "cat": "fee", "dur": 0.097, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128707.513, "ph": "X", "cat": "fee", "dur": 1.071, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128710.178, "ph": "X", "cat": "fee", "dur": 0.294, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013128710.794, "ph": "X", "cat": "fee", "dur": 0.098, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013128711.06, "ph": "X", "cat": "fee", "dur": 0.097, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013128711.3, "ph": "X", "cat": "fee", "dur": 0.089, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013128711.53, "ph": "X", "cat": "fee", "dur": 0.113, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013128712.452, "ph": "X", "cat": "fee", "dur": 0.07, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128712.693, "ph": "X", "cat": "fee", "dur": 0.075, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128712.212, "ph": "X", "cat": "fee", "dur": 1.036, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128714.03, "ph": "X", "cat": "fee", "dur": 0.08, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128714.731, "ph": "X", "cat": "fee", "dur": 0.365, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128719.142, "ph": "X", "cat": "fee", "dur": 0.283, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128721.48, "ph": "X", "cat": "fee", "dur": 0.372, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128723.912, "ph": "X", "cat": "fee", "dur": 0.324, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013128727.769, "ph": "X", "cat": "fee", "dur": 0.065, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128728.008, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128727.457, "ph": "X", "cat": "fee", "dur": 2.652, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128713.741, "ph": "X", "cat": "fee", "dur": 16.474, "name": "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:3550)"}, {"pid": 11306, "tid": 11306, "ts": 37013128730.999, "ph": "X", "cat": "fee", "dur": 0.073, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128731.212, "ph": "X", "cat": "fee", "dur": 0.064, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013128730.775, "ph": "X", "cat": "fee", "dur": 0.898, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013128690.695, "ph": "X", "cat": "fee", "dur": 41.133, "name": "_map_parameters (/astropy__astropy/astropy/modeling/core.py:3505)"}, {"pid": 11306, "tid": 11306, "ts": 37013128597.73, "ph": "X", "cat": "fee", "dur": 134.229, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:2902)"}, {"pid": 11306, "tid": 11306, "ts": 37013128596.269, "ph": "X", "cat": "fee", "dur": 136.639, "name": "<lambda> (/astropy__astropy/astropy/modeling/core.py:57)"}, {"pid": 11306, "tid": 11306, "ts": 37013128734.796, "ph": "X", "cat": "fee", "dur": 0.132, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3371)"}, {"pid": 11306, "tid": 11306, "ts": 37013128736.137, "ph": "X", "cat": "fee", "dur": 0.236, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013128737.404, "ph": "X", "cat": "fee", "dur": 0.091, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013128747.147, "ph": "X", "cat": "fee", "dur": 0.484, "name": "separable (/astropy__astropy/astropy/modeling/core.py:1531)"}, {"pid": 11306, "tid": 11306, "ts": 37013128739.933, "ph": "X", "cat": "fee", "dur": 11.454, "name": "_coord_matrix (/astropy__astropy/astropy/modeling/separable.py:171)"}, {"pid": 11306, "tid": 11306, "ts": 37013128736.998, "ph": "X", "cat": "fee", "dur": 14.572, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013128752.095, "ph": "X", "cat": "fee", "dur": 0.1, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013128754.277, "ph": "X", "cat": "fee", "dur": 0.242, "name": "separable (/astropy__astropy/astropy/modeling/core.py:1531)"}, {"pid": 11306, "tid": 11306, "ts": 37013128753.618, "ph": "X", "cat": "fee", "dur": 1.742, "name": "_coord_matrix (/astropy__astropy/astropy/modeling/separable.py:171)"}, {"pid": 11306, "tid": 11306, "ts": 37013128751.871, "ph": "X", "cat": "fee", "dur": 3.572, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013128756.561, "ph": "X", "cat": "fee", "dur": 280.305, "name": "_compute_n_outputs (/astropy__astropy/astropy/modeling/separable.py:105)"}, {"pid": 11306, "tid": 11306, "ts": 37013128756.067, "ph": "X", "cat": "fee", "dur": 311.812, "name": "_cstack (/astropy__astropy/astropy/modeling/separable.py:219)"}, {"pid": 11306, "tid": 11306, "ts": 37013128735.352, "ph": "X", "cat": "fee", "dur": 332.901, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013128734.346, "ph": "X", "cat": "fee", "dur": 364.847, "name": "separability_matrix (/astropy__astropy/astropy/modeling/separable.py:66)"}, {"pid": 11306, "tid": 11306, "ts": 37013129172.745, "ph": "X", "cat": "fee", "dur": 0.615, "name": "name (/astropy__astropy/astropy/modeling/core.py:179)"}, {"pid": 11306, "tid": 11306, "ts": 37013129171.991, "ph": "X", "cat": "fee", "dur": 5.655, "name": "__new__ (/astropy__astropy/astropy/modeling/projections.py:163)"}, {"pid": 11306, "tid": 11306, "ts": 37013129184.597, "ph": "X", "cat": "fee", "dur": 1.106, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:735)"}, {"pid": 11306, "tid": 11306, "ts": 37013129185.839, "ph": "X", "cat": "fee", "dur": 0.518, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:735)"}, {"pid": 11306, "tid": 11306, "ts": 37013129186.468, "ph": "X", "cat": "fee", "dur": 0.132, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:735)"}, {"pid": 11306, "tid": 11306, "ts": 37013129187.729, "ph": "X", "cat": "fee", "dur": 4.429, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129193.299, "ph": "X", "cat": "fee", "dur": 0.289, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:736)"}, {"pid": 11306, "tid": 11306, "ts": 37013129193.724, "ph": "X", "cat": "fee", "dur": 0.34, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:736)"}, {"pid": 11306, "tid": 11306, "ts": 37013129194.164, "ph": "X", "cat": "fee", "dur": 0.079, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:736)"}, {"pid": 11306, "tid": 11306, "ts": 37013129194.538, "ph": "X", "cat": "fee", "dur": 1.76, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129182.267, "ph": "X", "cat": "fee", "dur": 14.163, "name": "_default_inputs_outputs (/astropy__astropy/astropy/modeling/core.py:726)"}, {"pid": 11306, "tid": 11306, "ts": 37013129196.756, "ph": "X", "cat": "fee", "dur": 1.288, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129206.443, "ph": "X", "cat": "fee", "dur": 1.292, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129204.586, "ph": "X", "cat": "fee", "dur": 4.326, "name": "_initialize_constraints (/astropy__astropy/astropy/modeling/core.py:2365)"}, {"pid": 11306, "tid": 11306, "ts": 37013129209.678, "ph": "X", "cat": "fee", "dur": 0.621, "name": "_initialize_setters (/astropy__astropy/astropy/modeling/core.py:744)"}, {"pid": 11306, "tid": 11306, "ts": 37013129212.662, "ph": "X", "cat": "fee", "dur": 1.033, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129214.599, "ph": "X", "cat": "fee", "dur": 1.37, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129218.433, "ph": "X", "cat": "fee", "dur": 0.465, "name": "check_broadcast (/astropy__astropy/astropy/utils/shapes.py:308)"}, {"pid": 11306, "tid": 11306, "ts": 37013129217.286, "ph": "X", "cat": "fee", "dur": 1.771, "name": "_check_param_broadcast (/astropy__astropy/astropy/modeling/core.py:2608)"}, {"pid": 11306, "tid": 11306, "ts": 37013129219.389, "ph": "X", "cat": "fee", "dur": 1.184, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129210.838, "ph": "X", "cat": "fee", "dur": 9.99, "name": "_initialize_parameters (/astropy__astropy/astropy/modeling/core.py:2382)"}, {"pid": 11306, "tid": 11306, "ts": 37013129223.881, "ph": "X", "cat": "fee", "dur": 1.121, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129221.552, "ph": "X", "cat": "fee", "dur": 3.549, "name": "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:2568)"}, {"pid": 11306, "tid": 11306, "ts": 37013129226.849, "ph": "X", "cat": "fee", "dur": 0.141, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013129227.281, "ph": "X", "cat": "fee", "dur": 0.566, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)"}, {"pid": 11306, "tid": 11306, "ts": 37013129230.828, "ph": "X", "cat": "fee", "dur": 1.186, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129232.766, "ph": "X", "cat": "fee", "dur": 0.103, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013129233.052, "ph": "X", "cat": "fee", "dur": 0.34, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)"}, {"pid": 11306, "tid": 11306, "ts": 37013129233.596, "ph": "X", "cat": "fee", "dur": 0.834, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129225.63, "ph": "X", "cat": "fee", "dur": 8.882, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013129180.991, "ph": "X", "cat": "fee", "dur": 53.75, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:701)"}, {"pid": 11306, "tid": 11306, "ts": 37013129257.786, "ph": "X", "cat": "fee", "dur": 2.0, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129179.748, "ph": "X", "cat": "fee", "dur": 80.215, "name": "__init__ (/astropy__astropy/astropy/modeling/projections.py:105)"}, {"pid": 11306, "tid": 11306, "ts": 37013129263.959, "ph": "X", "cat": "fee", "dur": 0.445, "name": "_update_prj (/astropy__astropy/astropy/modeling/projections.py:122)"}, {"pid": 11306, "tid": 11306, "ts": 37013129809.992, "ph": "X", "cat": "fee", "dur": 2.215, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129813.164, "ph": "X", "cat": "fee", "dur": 1.694, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013129808.49, "ph": "X", "cat": "fee", "dur": 6.729, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:761)"}, {"pid": 11306, "tid": 11306, "ts": 37013129799.877, "ph": "X", "cat": "fee", "dur": 15.702, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129832.553, "ph": "X", "cat": "fee", "dur": 2.876, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129831.164, "ph": "X", "cat": "fee", "dur": 4.561, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:772)"}, {"pid": 11306, "tid": 11306, "ts": 37013129816.035, "ph": "X", "cat": "fee", "dur": 19.992, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129178.295, "ph": "X", "cat": "fee", "dur": 657.906, "name": "__init__ (/astropy__astropy/astropy/modeling/projections.py:168)"}, {"pid": 11306, "tid": 11306, "ts": 37013129846.36, "ph": "X", "cat": "fee", "dur": 2.498, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129849.161, "ph": "X", "cat": "fee", "dur": 1.548, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129845.624, "ph": "X", "cat": "fee", "dur": 5.254, "name": "_default_inputs_outputs (/astropy__astropy/astropy/modeling/core.py:726)"}, {"pid": 11306, "tid": 11306, "ts": 37013129851.198, "ph": "X", "cat": "fee", "dur": 1.097, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129924.793, "ph": "X", "cat": "fee", "dur": 1.237, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013129926.346, "ph": "X", "cat": "fee", "dur": 0.21, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013129924.048, "ph": "X", "cat": "fee", "dur": 2.763, "name": "model (/astropy__astropy/astropy/modeling/parameters.py:607)"}, {"pid": 11306, "tid": 11306, "ts": 37013129971.275, "ph": "X", "cat": "fee", "dur": 0.254, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013129971.749, "ph": "X", "cat": "fee", "dur": 0.153, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013129971.031, "ph": "X", "cat": "fee", "dur": 1.04, "name": "model (/astropy__astropy/astropy/modeling/parameters.py:607)"}, {"pid": 11306, "tid": 11306, "ts": 37013129978.4, "ph": "X", "cat": "fee", "dur": 1.373, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129976.584, "ph": "X", "cat": "fee", "dur": 4.294, "name": "_initialize_constraints (/astropy__astropy/astropy/modeling/core.py:2365)"}, {"pid": 11306, "tid": 11306, "ts": 37013129982.429, "ph": "X", "cat": "fee", "dur": 0.348, "name": "_initialize_setters (/astropy__astropy/astropy/modeling/core.py:744)"}, {"pid": 11306, "tid": 11306, "ts": 37013129984.915, "ph": "X", "cat": "fee", "dur": 0.771, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129986.672, "ph": "X", "cat": "fee", "dur": 0.699, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129989.449, "ph": "X", "cat": "fee", "dur": 46.278, "name": "quantity_asanyarray (/astropy__astropy/astropy/units/utils.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130039.205, "ph": "X", "cat": "fee", "dur": 0.268, "name": "unit (/astropy__astropy/astropy/modeling/parameters.py:346)"}, {"pid": 11306, "tid": 11306, "ts": 37013130040.333, "ph": "X", "cat": "fee", "dur": 0.279, "name": "internal_unit (/astropy__astropy/astropy/modeling/parameters.py:380)"}, {"pid": 11306, "tid": 11306, "ts": 37013130037.125, "ph": "X", "cat": "fee", "dur": 6.243, "name": "_initialize_parameter_value (/astropy__astropy/astropy/modeling/core.py:2525)"}, {"pid": 11306, "tid": 11306, "ts": 37013130044.942, "ph": "X", "cat": "fee", "dur": 24.438, "name": "quantity_asanyarray (/astropy__astropy/astropy/units/utils.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130072.475, "ph": "X", "cat": "fee", "dur": 0.269, "name": "unit (/astropy__astropy/astropy/modeling/parameters.py:346)"}, {"pid": 11306, "tid": 11306, "ts": 37013130073.34, "ph": "X", "cat": "fee", "dur": 0.236, "name": "internal_unit (/astropy__astropy/astropy/modeling/parameters.py:380)"}, {"pid": 11306, "tid": 11306, "ts": 37013130071.043, "ph": "X", "cat": "fee", "dur": 4.804, "name": "_initialize_parameter_value (/astropy__astropy/astropy/modeling/core.py:2525)"}, {"pid": 11306, "tid": 11306, "ts": 37013130078.05, "ph": "X", "cat": "fee", "dur": 1.413, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130083.293, "ph": "X", "cat": "fee", "dur": 0.228, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130086.55, "ph": "X", "cat": "fee", "dur": 0.784, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013130087.412, "ph": "X", "cat": "fee", "dur": 0.142, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013130087.624, "ph": "X", "cat": "fee", "dur": 0.098, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013130085.088, "ph": "X", "cat": "fee", "dur": 4.529, "name": "check_broadcast (/astropy__astropy/astropy/utils/shapes.py:308)"}, {"pid": 11306, "tid": 11306, "ts": 37013130077.221, "ph": "X", "cat": "fee", "dur": 15.866, "name": "_check_param_broadcast (/astropy__astropy/astropy/modeling/core.py:2608)"}, {"pid": 11306, "tid": 11306, "ts": 37013130093.681, "ph": "X", "cat": "fee", "dur": 3.147, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013129983.24, "ph": "X", "cat": "fee", "dur": 114.281, "name": "_initialize_parameters (/astropy__astropy/astropy/modeling/core.py:2382)"}, {"pid": 11306, "tid": 11306, "ts": 37013130098.638, "ph": "X", "cat": "fee", "dur": 0.304, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130103.503, "ph": "X", "cat": "fee", "dur": 0.219, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130106.984, "ph": "X", "cat": "fee", "dur": 1.036, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130098.209, "ph": "X", "cat": "fee", "dur": 9.921, "name": "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:2568)"}, {"pid": 11306, "tid": 11306, "ts": 37013130109.319, "ph": "X", "cat": "fee", "dur": 0.143, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130109.695, "ph": "X", "cat": "fee", "dur": 0.299, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)"}, {"pid": 11306, "tid": 11306, "ts": 37013130110.218, "ph": "X", "cat": "fee", "dur": 0.661, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130111.249, "ph": "X", "cat": "fee", "dur": 0.06, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130111.421, "ph": "X", "cat": "fee", "dur": 0.184, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)"}, {"pid": 11306, "tid": 11306, "ts": 37013130111.727, "ph": "X", "cat": "fee", "dur": 0.569, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130108.535, "ph": "X", "cat": "fee", "dur": 3.826, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013129844.224, "ph": "X", "cat": "fee", "dur": 268.263, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:701)"}, {"pid": 11306, "tid": 11306, "ts": 37013129841.245, "ph": "X", "cat": "fee", "dur": 271.769, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:430)"}, {"pid": 11306, "tid": 11306, "ts": 37013129839.078, "ph": "X", "cat": "fee", "dur": 274.281, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:432)"}, {"pid": 11306, "tid": 11306, "ts": 37013130117.351, "ph": "X", "cat": "fee", "dur": 0.188, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130116.779, "ph": "X", "cat": "fee", "dur": 1.538, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130118.722, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130118.467, "ph": "X", "cat": "fee", "dur": 0.688, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130119.473, "ph": "X", "cat": "fee", "dur": 0.05, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130119.323, "ph": "X", "cat": "fee", "dur": 0.496, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130120.058, "ph": "X", "cat": "fee", "dur": 0.051, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130119.921, "ph": "X", "cat": "fee", "dur": 0.432, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130120.718, "ph": "X", "cat": "fee", "dur": 0.051, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130120.546, "ph": "X", "cat": "fee", "dur": 0.502, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130121.302, "ph": "X", "cat": "fee", "dur": 0.051, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130121.162, "ph": "X", "cat": "fee", "dur": 0.525, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130121.935, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130121.801, "ph": "X", "cat": "fee", "dur": 0.647, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130122.758, "ph": "X", "cat": "fee", "dur": 0.051, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130122.622, "ph": "X", "cat": "fee", "dur": 0.529, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130123.399, "ph": "X", "cat": "fee", "dur": 0.051, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130123.257, "ph": "X", "cat": "fee", "dur": 0.475, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130123.971, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130123.835, "ph": "X", "cat": "fee", "dur": 0.447, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130124.522, "ph": "X", "cat": "fee", "dur": 0.05, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130124.386, "ph": "X", "cat": "fee", "dur": 0.448, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130125.521, "ph": "X", "cat": "fee", "dur": 0.321, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013130126.119, "ph": "X", "cat": "fee", "dur": 0.065, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013130126.364, "ph": "X", "cat": "fee", "dur": 0.06, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013130126.724, "ph": "X", "cat": "fee", "dur": 0.061, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130126.546, "ph": "X", "cat": "fee", "dur": 0.623, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130127.71, "ph": "X", "cat": "fee", "dur": 0.234, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130128.053, "ph": "X", "cat": "fee", "dur": 0.072, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130128.285, "ph": "X", "cat": "fee", "dur": 0.047, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130129.237, "ph": "X", "cat": "fee", "dur": 0.053, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130129.575, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130129.403, "ph": "X", "cat": "fee", "dur": 0.588, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130132.992, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130134.381, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130134.225, "ph": "X", "cat": "fee", "dur": 0.509, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130133.794, "ph": "X", "cat": "fee", "dur": 1.02, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3376)"}, {"pid": 11306, "tid": 11306, "ts": 37013130132.83, "ph": "X", "cat": "fee", "dur": 2.093, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130135.347, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130136.389, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130136.242, "ph": "X", "cat": "fee", "dur": 0.46, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130135.974, "ph": "X", "cat": "fee", "dur": 0.796, "name": "n_outputs (/astropy__astropy/astropy/modeling/core.py:3385)"}, {"pid": 11306, "tid": 11306, "ts": 37013130135.193, "ph": "X", "cat": "fee", "dur": 1.658, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130137.168, "ph": "X", "cat": "fee", "dur": 0.163, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130137.422, "ph": "X", "cat": "fee", "dur": 0.059, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130140.606, "ph": "X", "cat": "fee", "dur": 0.293, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013130140.967, "ph": "X", "cat": "fee", "dur": 0.127, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013130141.147, "ph": "X", "cat": "fee", "dur": 0.065, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013130141.727, "ph": "X", "cat": "fee", "dur": 0.133, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:257)"}, {"pid": 11306, "tid": 11306, "ts": 37013130141.913, "ph": "X", "cat": "fee", "dur": 0.044, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:257)"}, {"pid": 11306, "tid": 11306, "ts": 37013130138.416, "ph": "X", "cat": "fee", "dur": 3.889, "name": "combine_labels (/astropy__astropy/astropy/modeling/utils.py:245)"}, {"pid": 11306, "tid": 11306, "ts": 37013130142.672, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130143.674, "ph": "X", "cat": "fee", "dur": 0.066, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3371)"}, {"pid": 11306, "tid": 11306, "ts": 37013130144.094, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130143.94, "ph": "X", "cat": "fee", "dur": 0.52, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130145.242, "ph": "X", "cat": "fee", "dur": 0.071, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130145.417, "ph": "X", "cat": "fee", "dur": 0.514, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)"}, {"pid": 11306, "tid": 11306, "ts": 37013130146.255, "ph": "X", "cat": "fee", "dur": 0.068, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130146.062, "ph": "X", "cat": "fee", "dur": 0.568, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130146.986, "ph": "X", "cat": "fee", "dur": 0.069, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130147.137, "ph": "X", "cat": "fee", "dur": 0.283, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)"}, {"pid": 11306, "tid": 11306, "ts": 37013130147.686, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130147.547, "ph": "X", "cat": "fee", "dur": 0.458, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130144.759, "ph": "X", "cat": "fee", "dur": 3.323, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013130143.23, "ph": "X", "cat": "fee", "dur": 4.987, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:761)"}, {"pid": 11306, "tid": 11306, "ts": 37013130142.489, "ph": "X", "cat": "fee", "dur": 5.838, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130148.665, "ph": "X", "cat": "fee", "dur": 0.194, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:768)"}, {"pid": 11306, "tid": 11306, "ts": 37013130149.094, "ph": "X", "cat": "fee", "dur": 0.057, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:768)"}, {"pid": 11306, "tid": 11306, "ts": 37013130149.287, "ph": "X", "cat": "fee", "dur": 0.94, "name": "combine_labels (/astropy__astropy/astropy/modeling/utils.py:245)"}, {"pid": 11306, "tid": 11306, "ts": 37013130150.513, "ph": "X", "cat": "fee", "dur": 0.055, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130151.211, "ph": "X", "cat": "fee", "dur": 0.059, "name": "n_outputs (/astropy__astropy/astropy/modeling/core.py:3380)"}, {"pid": 11306, "tid": 11306, "ts": 37013130151.529, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130151.39, "ph": "X", "cat": "fee", "dur": 0.478, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130151.035, "ph": "X", "cat": "fee", "dur": 0.911, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:772)"}, {"pid": 11306, "tid": 11306, "ts": 37013130150.352, "ph": "X", "cat": "fee", "dur": 1.676, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130152.427, "ph": "X", "cat": "fee", "dur": 0.056, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130154.027, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130153.889, "ph": "X", "cat": "fee", "dur": 0.502, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130153.757, "ph": "X", "cat": "fee", "dur": 0.789, "name": "name (/astropy__astropy/astropy/modeling/core.py:1148)"}, {"pid": 11306, "tid": 11306, "ts": 37013130152.279, "ph": "X", "cat": "fee", "dur": 2.348, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130154.966, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130154.814, "ph": "X", "cat": "fee", "dur": 0.559, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130155.677, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130155.545, "ph": "X", "cat": "fee", "dur": 0.431, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130156.215, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130156.076, "ph": "X", "cat": "fee", "dur": 0.488, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130157.006, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130156.859, "ph": "X", "cat": "fee", "dur": 0.589, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130157.759, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130158.862, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130158.726, "ph": "X", "cat": "fee", "dur": 0.436, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130158.451, "ph": "X", "cat": "fee", "dur": 0.783, "name": "eqcons (/astropy__astropy/astropy/modeling/core.py:3393)"}, {"pid": 11306, "tid": 11306, "ts": 37013130157.603, "ph": "X", "cat": "fee", "dur": 1.709, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130159.597, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130160.649, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130160.512, "ph": "X", "cat": "fee", "dur": 0.498, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130160.341, "ph": "X", "cat": "fee", "dur": 0.728, "name": "ineqcons (/astropy__astropy/astropy/modeling/core.py:3401)"}, {"pid": 11306, "tid": 11306, "ts": 37013130159.442, "ph": "X", "cat": "fee", "dur": 1.707, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130161.902, "ph": "X", "cat": "fee", "dur": 0.396, "name": "parameters (/astropy__astropy/astropy/modeling/core.py:1179)"}, {"pid": 11306, "tid": 11306, "ts": 37013130162.775, "ph": "X", "cat": "fee", "dur": 0.051, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130162.614, "ph": "X", "cat": "fee", "dur": 0.473, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130165.294, "ph": "X", "cat": "fee", "dur": 0.144, "name": "isleaf (/astropy__astropy/astropy/modeling/core.py:3475)"}, {"pid": 11306, "tid": 11306, "ts": 37013130165.898, "ph": "X", "cat": "fee", "dur": 0.611, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130166.766, "ph": "X", "cat": "fee", "dur": 0.265, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130164.713, "ph": "X", "cat": "fee", "dur": 2.702, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130167.757, "ph": "X", "cat": "fee", "dur": 0.066, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130167.593, "ph": "X", "cat": "fee", "dur": 0.591, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130168.443, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130168.304, "ph": "X", "cat": "fee", "dur": 0.533, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130164.023, "ph": "X", "cat": "fee", "dur": 4.877, "name": "_make_leaflist (/astropy__astropy/astropy/modeling/core.py:3291)"}, {"pid": 11306, "tid": 11306, "ts": 37013130169.235, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130169.098, "ph": "X", "cat": "fee", "dur": 0.499, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130169.887, "ph": "X", "cat": "fee", "dur": 0.056, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130169.75, "ph": "X", "cat": "fee", "dur": 0.451, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130175.274, "ph": "X", "cat": "fee", "dur": 0.082, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130175.529, "ph": "X", "cat": "fee", "dur": 0.067, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130175.065, "ph": "X", "cat": "fee", "dur": 1.015, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130176.387, "ph": "X", "cat": "fee", "dur": 0.055, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130176.546, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130176.252, "ph": "X", "cat": "fee", "dur": 0.613, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130178.036, "ph": "X", "cat": "fee", "dur": 0.24, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130178.514, "ph": "X", "cat": "fee", "dur": 0.1, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130178.719, "ph": "X", "cat": "fee", "dur": 0.087, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130180.186, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130180.348, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130180.019, "ph": "X", "cat": "fee", "dur": 0.75, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130181.234, "ph": "X", "cat": "fee", "dur": 0.061, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130181.797, "ph": "X", "cat": "fee", "dur": 0.308, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130184.322, "ph": "X", "cat": "fee", "dur": 0.216, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130187.132, "ph": "X", "cat": "fee", "dur": 0.068, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130187.336, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130186.875, "ph": "X", "cat": "fee", "dur": 0.899, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130180.985, "ph": "X", "cat": "fee", "dur": 6.857, "name": "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:3550)"}, {"pid": 11306, "tid": 11306, "ts": 37013130188.302, "ph": "X", "cat": "fee", "dur": 0.055, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130188.462, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130188.147, "ph": "X", "cat": "fee", "dur": 0.642, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130163.333, "ph": "X", "cat": "fee", "dur": 25.601, "name": "_map_parameters (/astropy__astropy/astropy/modeling/core.py:3505)"}, {"pid": 11306, "tid": 11306, "ts": 37013130115.705, "ph": "X", "cat": "fee", "dur": 73.387, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:2902)"}, {"pid": 11306, "tid": 11306, "ts": 37013130114.88, "ph": "X", "cat": "fee", "dur": 74.385, "name": "<lambda> (/astropy__astropy/astropy/modeling/core.py:57)"}, {"pid": 11306, "tid": 11306, "ts": 37013130193.755, "ph": "X", "cat": "fee", "dur": 0.976, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130194.875, "ph": "X", "cat": "fee", "dur": 0.706, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130193.392, "ph": "X", "cat": "fee", "dur": 2.273, "name": "_default_inputs_outputs (/astropy__astropy/astropy/modeling/core.py:726)"}, {"pid": 11306, "tid": 11306, "ts": 37013130195.87, "ph": "X", "cat": "fee", "dur": 0.623, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130243.17, "ph": "X", "cat": "fee", "dur": 0.419, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013130243.869, "ph": "X", "cat": "fee", "dur": 0.142, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013130242.646, "ph": "X", "cat": "fee", "dur": 1.54, "name": "model (/astropy__astropy/astropy/modeling/parameters.py:607)"}, {"pid": 11306, "tid": 11306, "ts": 37013130277.575, "ph": "X", "cat": "fee", "dur": 0.186, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013130277.926, "ph": "X", "cat": "fee", "dur": 0.122, "name": "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)"}, {"pid": 11306, "tid": 11306, "ts": 37013130277.392, "ph": "X", "cat": "fee", "dur": 0.788, "name": "model (/astropy__astropy/astropy/modeling/parameters.py:607)"}, {"pid": 11306, "tid": 11306, "ts": 37013130282.525, "ph": "X", "cat": "fee", "dur": 1.041, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130281.152, "ph": "X", "cat": "fee", "dur": 3.153, "name": "_initialize_constraints (/astropy__astropy/astropy/modeling/core.py:2365)"}, {"pid": 11306, "tid": 11306, "ts": 37013130284.585, "ph": "X", "cat": "fee", "dur": 0.278, "name": "_initialize_setters (/astropy__astropy/astropy/modeling/core.py:744)"}, {"pid": 11306, "tid": 11306, "ts": 37013130286.201, "ph": "X", "cat": "fee", "dur": 0.643, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130287.548, "ph": "X", "cat": "fee", "dur": 0.53, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130289.256, "ph": "X", "cat": "fee", "dur": 4.933, "name": "quantity_asanyarray (/astropy__astropy/astropy/units/utils.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130295.148, "ph": "X", "cat": "fee", "dur": 0.11, "name": "unit (/astropy__astropy/astropy/modeling/parameters.py:346)"}, {"pid": 11306, "tid": 11306, "ts": 37013130295.546, "ph": "X", "cat": "fee", "dur": 0.126, "name": "internal_unit (/astropy__astropy/astropy/modeling/parameters.py:380)"}, {"pid": 11306, "tid": 11306, "ts": 37013130294.579, "ph": "X", "cat": "fee", "dur": 1.884, "name": "_initialize_parameter_value (/astropy__astropy/astropy/modeling/core.py:2525)"}, {"pid": 11306, "tid": 11306, "ts": 37013130297.216, "ph": "X", "cat": "fee", "dur": 1.723, "name": "quantity_asanyarray (/astropy__astropy/astropy/units/utils.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130299.522, "ph": "X", "cat": "fee", "dur": 0.073, "name": "unit (/astropy__astropy/astropy/modeling/parameters.py:346)"}, {"pid": 11306, "tid": 11306, "ts": 37013130299.768, "ph": "X", "cat": "fee", "dur": 0.077, "name": "internal_unit (/astropy__astropy/astropy/modeling/parameters.py:380)"}, {"pid": 11306, "tid": 11306, "ts": 37013130299.17, "ph": "X", "cat": "fee", "dur": 1.022, "name": "_initialize_parameter_value (/astropy__astropy/astropy/modeling/core.py:2525)"}, {"pid": 11306, "tid": 11306, "ts": 37013130301.067, "ph": "X", "cat": "fee", "dur": 0.386, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130303.002, "ph": "X", "cat": "fee", "dur": 0.275, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130305.033, "ph": "X", "cat": "fee", "dur": 0.308, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013130305.415, "ph": "X", "cat": "fee", "dur": 0.155, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013130305.621, "ph": "X", "cat": "fee", "dur": 0.062, "name": "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)"}, {"pid": 11306, "tid": 11306, "ts": 37013130304.281, "ph": "X", "cat": "fee", "dur": 2.325, "name": "check_broadcast (/astropy__astropy/astropy/utils/shapes.py:308)"}, {"pid": 11306, "tid": 11306, "ts": 37013130300.705, "ph": "X", "cat": "fee", "dur": 6.099, "name": "_check_param_broadcast (/astropy__astropy/astropy/modeling/core.py:2608)"}, {"pid": 11306, "tid": 11306, "ts": 37013130307.948, "ph": "X", "cat": "fee", "dur": 0.989, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130285.205, "ph": "X", "cat": "fee", "dur": 24.29, "name": "_initialize_parameters (/astropy__astropy/astropy/modeling/core.py:2382)"}, {"pid": 11306, "tid": 11306, "ts": 37013130310.149, "ph": "X", "cat": "fee", "dur": 0.283, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130312.568, "ph": "X", "cat": "fee", "dur": 0.206, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130315.02, "ph": "X", "cat": "fee", "dur": 0.7, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130309.842, "ph": "X", "cat": "fee", "dur": 5.967, "name": "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:2568)"}, {"pid": 11306, "tid": 11306, "ts": 37013130316.529, "ph": "X", "cat": "fee", "dur": 0.078, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130316.734, "ph": "X", "cat": "fee", "dur": 0.181, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)"}, {"pid": 11306, "tid": 11306, "ts": 37013130317.113, "ph": "X", "cat": "fee", "dur": 0.59, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130318.005, "ph": "X", "cat": "fee", "dur": 0.055, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130318.147, "ph": "X", "cat": "fee", "dur": 0.158, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)"}, {"pid": 11306, "tid": 11306, "ts": 37013130318.434, "ph": "X", "cat": "fee", "dur": 0.551, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130316.095, "ph": "X", "cat": "fee", "dur": 2.96, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013130192.669, "ph": "X", "cat": "fee", "dur": 126.515, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:701)"}, {"pid": 11306, "tid": 11306, "ts": 37013130191.124, "ph": "X", "cat": "fee", "dur": 128.332, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:430)"}, {"pid": 11306, "tid": 11306, "ts": 37013130190.258, "ph": "X", "cat": "fee", "dur": 129.36, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:432)"}, {"pid": 11306, "tid": 11306, "ts": 37013130321.608, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130321.307, "ph": "X", "cat": "fee", "dur": 0.825, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130322.453, "ph": "X", "cat": "fee", "dur": 0.071, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130322.271, "ph": "X", "cat": "fee", "dur": 0.515, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130323.025, "ph": "X", "cat": "fee", "dur": 0.056, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130322.888, "ph": "X", "cat": "fee", "dur": 0.451, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130323.569, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130323.437, "ph": "X", "cat": "fee", "dur": 0.432, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130324.112, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130323.979, "ph": "X", "cat": "fee", "dur": 0.461, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130324.689, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130324.552, "ph": "X", "cat": "fee", "dur": 0.441, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130325.229, "ph": "X", "cat": "fee", "dur": 0.056, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130325.092, "ph": "X", "cat": "fee", "dur": 0.427, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130325.764, "ph": "X", "cat": "fee", "dur": 0.055, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130325.626, "ph": "X", "cat": "fee", "dur": 0.547, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130326.412, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130326.284, "ph": "X", "cat": "fee", "dur": 0.425, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130326.946, "ph": "X", "cat": "fee", "dur": 0.055, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130326.811, "ph": "X", "cat": "fee", "dur": 0.441, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130327.489, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130327.355, "ph": "X", "cat": "fee", "dur": 0.423, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130328.313, "ph": "X", "cat": "fee", "dur": 0.159, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013130328.644, "ph": "X", "cat": "fee", "dur": 0.101, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013130328.906, "ph": "X", "cat": "fee", "dur": 0.082, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013130329.273, "ph": "X", "cat": "fee", "dur": 0.062, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130329.111, "ph": "X", "cat": "fee", "dur": 0.522, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130329.854, "ph": "X", "cat": "fee", "dur": 0.095, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130330.061, "ph": "X", "cat": "fee", "dur": 0.074, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130330.283, "ph": "X", "cat": "fee", "dur": 0.063, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130330.442, "ph": "X", "cat": "fee", "dur": 0.059, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130331.553, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130331.374, "ph": "X", "cat": "fee", "dur": 0.508, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130332.603, "ph": "X", "cat": "fee", "dur": 0.083, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3371)"}, {"pid": 11306, "tid": 11306, "ts": 37013130333.077, "ph": "X", "cat": "fee", "dur": 0.062, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130333.754, "ph": "X", "cat": "fee", "dur": 0.055, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130333.597, "ph": "X", "cat": "fee", "dur": 0.462, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130333.475, "ph": "X", "cat": "fee", "dur": 0.655, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3376)"}, {"pid": 11306, "tid": 11306, "ts": 37013130332.894, "ph": "X", "cat": "fee", "dur": 1.317, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130334.346, "ph": "X", "cat": "fee", "dur": 0.084, "name": "n_outputs (/astropy__astropy/astropy/modeling/core.py:3380)"}, {"pid": 11306, "tid": 11306, "ts": 37013130334.694, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130335.218, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130335.08, "ph": "X", "cat": "fee", "dur": 0.44, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130335.002, "ph": "X", "cat": "fee", "dur": 0.586, "name": "n_outputs (/astropy__astropy/astropy/modeling/core.py:3385)"}, {"pid": 11306, "tid": 11306, "ts": 37013130334.554, "ph": "X", "cat": "fee", "dur": 1.114, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130335.823, "ph": "X", "cat": "fee", "dur": 0.062, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130335.986, "ph": "X", "cat": "fee", "dur": 0.066, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130336.169, "ph": "X", "cat": "fee", "dur": 0.825, "name": "combine_labels (/astropy__astropy/astropy/modeling/utils.py:245)"}, {"pid": 11306, "tid": 11306, "ts": 37013130337.276, "ph": "X", "cat": "fee", "dur": 0.06, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130337.818, "ph": "X", "cat": "fee", "dur": 0.061, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3371)"}, {"pid": 11306, "tid": 11306, "ts": 37013130338.166, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130338.032, "ph": "X", "cat": "fee", "dur": 0.445, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130339.177, "ph": "X", "cat": "fee", "dur": 0.056, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130339.324, "ph": "X", "cat": "fee", "dur": 0.528, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)"}, {"pid": 11306, "tid": 11306, "ts": 37013130340.142, "ph": "X", "cat": "fee", "dur": 0.065, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130339.982, "ph": "X", "cat": "fee", "dur": 0.527, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130340.832, "ph": "X", "cat": "fee", "dur": 0.053, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130340.973, "ph": "X", "cat": "fee", "dur": 0.318, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)"}, {"pid": 11306, "tid": 11306, "ts": 37013130341.568, "ph": "X", "cat": "fee", "dur": 0.05, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130341.42, "ph": "X", "cat": "fee", "dur": 0.47, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130338.784, "ph": "X", "cat": "fee", "dur": 3.173, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013130337.635, "ph": "X", "cat": "fee", "dur": 4.452, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:761)"}, {"pid": 11306, "tid": 11306, "ts": 37013130337.113, "ph": "X", "cat": "fee", "dur": 5.075, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130342.346, "ph": "X", "cat": "fee", "dur": 0.082, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:768)"}, {"pid": 11306, "tid": 11306, "ts": 37013130342.519, "ph": "X", "cat": "fee", "dur": 0.057, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:768)"}, {"pid": 11306, "tid": 11306, "ts": 37013130343.447, "ph": "X", "cat": "fee", "dur": 0.163, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013130343.663, "ph": "X", "cat": "fee", "dur": 0.147, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013130343.862, "ph": "X", "cat": "fee", "dur": 0.096, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013130344.008, "ph": "X", "cat": "fee", "dur": 0.057, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)"}, {"pid": 11306, "tid": 11306, "ts": 37013130344.506, "ph": "X", "cat": "fee", "dur": 0.096, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:257)"}, {"pid": 11306, "tid": 11306, "ts": 37013130344.653, "ph": "X", "cat": "fee", "dur": 0.055, "name": "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:257)"}, {"pid": 11306, "tid": 11306, "ts": 37013130342.661, "ph": "X", "cat": "fee", "dur": 2.315, "name": "combine_labels (/astropy__astropy/astropy/modeling/utils.py:245)"}, {"pid": 11306, "tid": 11306, "ts": 37013130345.335, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130345.877, "ph": "X", "cat": "fee", "dur": 0.061, "name": "n_outputs (/astropy__astropy/astropy/modeling/core.py:3380)"}, {"pid": 11306, "tid": 11306, "ts": 37013130346.18, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130346.04, "ph": "X", "cat": "fee", "dur": 0.499, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130345.739, "ph": "X", "cat": "fee", "dur": 0.879, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:772)"}, {"pid": 11306, "tid": 11306, "ts": 37013130345.152, "ph": "X", "cat": "fee", "dur": 1.547, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130355.069, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130355.691, "ph": "X", "cat": "fee", "dur": 0.056, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130355.554, "ph": "X", "cat": "fee", "dur": 0.488, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130355.463, "ph": "X", "cat": "fee", "dur": 0.656, "name": "name (/astropy__astropy/astropy/modeling/core.py:1148)"}, {"pid": 11306, "tid": 11306, "ts": 37013130354.904, "ph": "X", "cat": "fee", "dur": 1.302, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130356.478, "ph": "X", "cat": "fee", "dur": 0.048, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130356.332, "ph": "X", "cat": "fee", "dur": 0.433, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130357.015, "ph": "X", "cat": "fee", "dur": 0.051, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130356.875, "ph": "X", "cat": "fee", "dur": 0.424, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130357.53, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130357.399, "ph": "X", "cat": "fee", "dur": 0.42, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130358.124, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130357.988, "ph": "X", "cat": "fee", "dur": 0.439, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130358.707, "ph": "X", "cat": "fee", "dur": 0.051, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130359.241, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130359.102, "ph": "X", "cat": "fee", "dur": 0.429, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130359.014, "ph": "X", "cat": "fee", "dur": 0.585, "name": "eqcons (/astropy__astropy/astropy/modeling/core.py:3393)"}, {"pid": 11306, "tid": 11306, "ts": 37013130358.563, "ph": "X", "cat": "fee", "dur": 1.114, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130359.942, "ph": "X", "cat": "fee", "dur": 0.056, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130360.481, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130360.348, "ph": "X", "cat": "fee", "dur": 0.463, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130360.266, "ph": "X", "cat": "fee", "dur": 0.604, "name": "ineqcons (/astropy__astropy/astropy/modeling/core.py:3401)"}, {"pid": 11306, "tid": 11306, "ts": 37013130359.8, "ph": "X", "cat": "fee", "dur": 1.148, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130361.475, "ph": "X", "cat": "fee", "dur": 0.07, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130362.042, "ph": "X", "cat": "fee", "dur": 0.061, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130362.395, "ph": "X", "cat": "fee", "dur": 0.273, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130381.832, "ph": "X", "cat": "fee", "dur": 0.238, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130361.901, "ph": "X", "cat": "fee", "dur": 21.74, "name": "_parameters_to_array (/astropy__astropy/astropy/modeling/core.py:2585)"}, {"pid": 11306, "tid": 11306, "ts": 37013130383.983, "ph": "X", "cat": "fee", "dur": 0.067, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130384.525, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130361.364, "ph": "X", "cat": "fee", "dur": 24.085, "name": "parameters (/astropy__astropy/astropy/modeling/core.py:1179)"}, {"pid": 11306, "tid": 11306, "ts": 37013130385.961, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130385.758, "ph": "X", "cat": "fee", "dur": 0.539, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130387.308, "ph": "X", "cat": "fee", "dur": 0.068, "name": "isleaf (/astropy__astropy/astropy/modeling/core.py:3475)"}, {"pid": 11306, "tid": 11306, "ts": 37013130387.885, "ph": "X", "cat": "fee", "dur": 0.029, "name": "isleaf (/astropy__astropy/astropy/modeling/core.py:3475)"}, {"pid": 11306, "tid": 11306, "ts": 37013130388.233, "ph": "X", "cat": "fee", "dur": 0.332, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130388.885, "ph": "X", "cat": "fee", "dur": 0.172, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130387.777, "ph": "X", "cat": "fee", "dur": 1.57, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130389.565, "ph": "X", "cat": "fee", "dur": 0.139, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130387.121, "ph": "X", "cat": "fee", "dur": 2.869, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130390.318, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130390.14, "ph": "X", "cat": "fee", "dur": 0.533, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130390.941, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130390.786, "ph": "X", "cat": "fee", "dur": 0.527, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130386.879, "ph": "X", "cat": "fee", "dur": 4.495, "name": "_make_leaflist (/astropy__astropy/astropy/modeling/core.py:3291)"}, {"pid": 11306, "tid": 11306, "ts": 37013130391.707, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130391.573, "ph": "X", "cat": "fee", "dur": 1.416, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130393.299, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130393.153, "ph": "X", "cat": "fee", "dur": 0.498, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130398.449, "ph": "X", "cat": "fee", "dur": 0.062, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130398.647, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130398.255, "ph": "X", "cat": "fee", "dur": 0.859, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130399.381, "ph": "X", "cat": "fee", "dur": 0.052, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130399.536, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130399.231, "ph": "X", "cat": "fee", "dur": 0.632, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130400.574, "ph": "X", "cat": "fee", "dur": 0.171, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130400.884, "ph": "X", "cat": "fee", "dur": 0.104, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130401.079, "ph": "X", "cat": "fee", "dur": 0.09, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130401.242, "ph": "X", "cat": "fee", "dur": 0.069, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130401.382, "ph": "X", "cat": "fee", "dur": 0.075, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130401.87, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130402.033, "ph": "X", "cat": "fee", "dur": 0.051, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130401.694, "ph": "X", "cat": "fee", "dur": 0.762, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130402.812, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130403.269, "ph": "X", "cat": "fee", "dur": 0.284, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130405.483, "ph": "X", "cat": "fee", "dur": 0.245, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130407.289, "ph": "X", "cat": "fee", "dur": 0.234, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130408.891, "ph": "X", "cat": "fee", "dur": 0.224, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130411.208, "ph": "X", "cat": "fee", "dur": 0.056, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130411.374, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130411.014, "ph": "X", "cat": "fee", "dur": 0.8, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130402.675, "ph": "X", "cat": "fee", "dur": 9.221, "name": "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:3550)"}, {"pid": 11306, "tid": 11306, "ts": 37013130412.336, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130412.493, "ph": "X", "cat": "fee", "dur": 0.053, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130412.169, "ph": "X", "cat": "fee", "dur": 0.666, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130386.504, "ph": "X", "cat": "fee", "dur": 26.459, "name": "_map_parameters (/astropy__astropy/astropy/modeling/core.py:3505)"}, {"pid": 11306, "tid": 11306, "ts": 37013130320.948, "ph": "X", "cat": "fee", "dur": 92.143, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:2902)"}, {"pid": 11306, "tid": 11306, "ts": 37013130320.536, "ph": "X", "cat": "fee", "dur": 92.714, "name": "<lambda> (/astropy__astropy/astropy/modeling/core.py:57)"}, {"pid": 11306, "tid": 11306, "ts": 37013130413.783, "ph": "X", "cat": "fee", "dur": 0.067, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3371)"}, {"pid": 11306, "tid": 11306, "ts": 37013130414.426, "ph": "X", "cat": "fee", "dur": 0.192, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013130415.193, "ph": "X", "cat": "fee", "dur": 0.039, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013130415.901, "ph": "X", "cat": "fee", "dur": 0.065, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013130421.956, "ph": "X", "cat": "fee", "dur": 0.38, "name": "separable (/astropy__astropy/astropy/modeling/core.py:1531)"}, {"pid": 11306, "tid": 11306, "ts": 37013130417.151, "ph": "X", "cat": "fee", "dur": 8.712, "name": "_coord_matrix (/astropy__astropy/astropy/modeling/separable.py:171)"}, {"pid": 11306, "tid": 11306, "ts": 37013130415.423, "ph": "X", "cat": "fee", "dur": 10.559, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130426.725, "ph": "X", "cat": "fee", "dur": 0.103, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013130428.147, "ph": "X", "cat": "fee", "dur": 0.163, "name": "separable (/astropy__astropy/astropy/modeling/core.py:1531)"}, {"pid": 11306, "tid": 11306, "ts": 37013130427.679, "ph": "X", "cat": "fee", "dur": 2.602, "name": "_coord_matrix (/astropy__astropy/astropy/modeling/separable.py:171)"}, {"pid": 11306, "tid": 11306, "ts": 37013130426.24, "ph": "X", "cat": "fee", "dur": 4.163, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130430.99, "ph": "X", "cat": "fee", "dur": 1.428, "name": "_compute_n_outputs (/astropy__astropy/astropy/modeling/separable.py:105)"}, {"pid": 11306, "tid": 11306, "ts": 37013130430.736, "ph": "X", "cat": "fee", "dur": 17.448, "name": "_cstack (/astropy__astropy/astropy/modeling/separable.py:219)"}, {"pid": 11306, "tid": 11306, "ts": 37013130415.084, "ph": "X", "cat": "fee", "dur": 33.374, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130448.968, "ph": "X", "cat": "fee", "dur": 0.093, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013130451.324, "ph": "X", "cat": "fee", "dur": 0.176, "name": "separable (/astropy__astropy/astropy/modeling/core.py:1531)"}, {"pid": 11306, "tid": 11306, "ts": 37013130450.899, "ph": "X", "cat": "fee", "dur": 1.435, "name": "_coord_matrix (/astropy__astropy/astropy/modeling/separable.py:171)"}, {"pid": 11306, "tid": 11306, "ts": 37013130448.799, "ph": "X", "cat": "fee", "dur": 3.607, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130452.765, "ph": "X", "cat": "fee", "dur": 0.839, "name": "_compute_n_outputs (/astropy__astropy/astropy/modeling/separable.py:105)"}, {"pid": 11306, "tid": 11306, "ts": 37013130452.652, "ph": "X", "cat": "fee", "dur": 8.387, "name": "_cstack (/astropy__astropy/astropy/modeling/separable.py:219)"}, {"pid": 11306, "tid": 11306, "ts": 37013130414.133, "ph": "X", "cat": "fee", "dur": 47.046, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130413.511, "ph": "X", "cat": "fee", "dur": 67.308, "name": "separability_matrix (/astropy__astropy/astropy/modeling/separable.py:66)"}, {"pid": 11306, "tid": 11306, "ts": 37013130554.404, "ph": "X", "cat": "fee", "dur": 0.474, "name": "name (/astropy__astropy/astropy/modeling/core.py:179)"}, {"pid": 11306, "tid": 11306, "ts": 37013130553.859, "ph": "X", "cat": "fee", "dur": 3.854, "name": "__new__ (/astropy__astropy/astropy/modeling/projections.py:163)"}, {"pid": 11306, "tid": 11306, "ts": 37013130562.031, "ph": "X", "cat": "fee", "dur": 0.802, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:735)"}, {"pid": 11306, "tid": 11306, "ts": 37013130562.907, "ph": "X", "cat": "fee", "dur": 0.271, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:735)"}, {"pid": 11306, "tid": 11306, "ts": 37013130563.261, "ph": "X", "cat": "fee", "dur": 0.088, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:735)"}, {"pid": 11306, "tid": 11306, "ts": 37013130563.963, "ph": "X", "cat": "fee", "dur": 2.565, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130567.412, "ph": "X", "cat": "fee", "dur": 0.279, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:736)"}, {"pid": 11306, "tid": 11306, "ts": 37013130567.787, "ph": "X", "cat": "fee", "dur": 0.313, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:736)"}, {"pid": 11306, "tid": 11306, "ts": 37013130568.219, "ph": "X", "cat": "fee", "dur": 0.059, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:736)"}, {"pid": 11306, "tid": 11306, "ts": 37013130568.585, "ph": "X", "cat": "fee", "dur": 1.324, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130560.661, "ph": "X", "cat": "fee", "dur": 9.391, "name": "_default_inputs_outputs (/astropy__astropy/astropy/modeling/core.py:726)"}, {"pid": 11306, "tid": 11306, "ts": 37013130570.335, "ph": "X", "cat": "fee", "dur": 0.807, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130578.452, "ph": "X", "cat": "fee", "dur": 1.07, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130576.913, "ph": "X", "cat": "fee", "dur": 3.676, "name": "_initialize_constraints (/astropy__astropy/astropy/modeling/core.py:2365)"}, {"pid": 11306, "tid": 11306, "ts": 37013130581.215, "ph": "X", "cat": "fee", "dur": 0.463, "name": "_initialize_setters (/astropy__astropy/astropy/modeling/core.py:744)"}, {"pid": 11306, "tid": 11306, "ts": 37013130583.733, "ph": "X", "cat": "fee", "dur": 1.03, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130585.716, "ph": "X", "cat": "fee", "dur": 0.925, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130588.783, "ph": "X", "cat": "fee", "dur": 0.302, "name": "check_broadcast (/astropy__astropy/astropy/utils/shapes.py:308)"}, {"pid": 11306, "tid": 11306, "ts": 37013130588.036, "ph": "X", "cat": "fee", "dur": 1.228, "name": "_check_param_broadcast (/astropy__astropy/astropy/modeling/core.py:2608)"}, {"pid": 11306, "tid": 11306, "ts": 37013130589.56, "ph": "X", "cat": "fee", "dur": 1.042, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130582.213, "ph": "X", "cat": "fee", "dur": 8.646, "name": "_initialize_parameters (/astropy__astropy/astropy/modeling/core.py:2382)"}, {"pid": 11306, "tid": 11306, "ts": 37013130593.933, "ph": "X", "cat": "fee", "dur": 0.977, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130591.475, "ph": "X", "cat": "fee", "dur": 3.534, "name": "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:2568)"}, {"pid": 11306, "tid": 11306, "ts": 37013130596.359, "ph": "X", "cat": "fee", "dur": 0.128, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130596.774, "ph": "X", "cat": "fee", "dur": 0.572, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)"}, {"pid": 11306, "tid": 11306, "ts": 37013130597.624, "ph": "X", "cat": "fee", "dur": 0.959, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130599.233, "ph": "X", "cat": "fee", "dur": 0.083, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130599.495, "ph": "X", "cat": "fee", "dur": 0.321, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)"}, {"pid": 11306, "tid": 11306, "ts": 37013130600.014, "ph": "X", "cat": "fee", "dur": 0.828, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130595.431, "ph": "X", "cat": "fee", "dur": 5.489, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013130559.825, "ph": "X", "cat": "fee", "dur": 41.268, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:701)"}, {"pid": 11306, "tid": 11306, "ts": 37013130603.725, "ph": "X", "cat": "fee", "dur": 1.289, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130559.101, "ph": "X", "cat": "fee", "dur": 46.069, "name": "__init__ (/astropy__astropy/astropy/modeling/projections.py:105)"}, {"pid": 11306, "tid": 11306, "ts": 37013130607.326, "ph": "X", "cat": "fee", "dur": 0.424, "name": "_update_prj (/astropy__astropy/astropy/modeling/projections.py:122)"}, {"pid": 11306, "tid": 11306, "ts": 37013130610.51, "ph": "X", "cat": "fee", "dur": 1.032, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130611.86, "ph": "X", "cat": "fee", "dur": 0.639, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013130610.112, "ph": "X", "cat": "fee", "dur": 2.555, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:761)"}, {"pid": 11306, "tid": 11306, "ts": 37013130608.896, "ph": "X", "cat": "fee", "dur": 3.935, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130614.375, "ph": "X", "cat": "fee", "dur": 1.002, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130614.115, "ph": "X", "cat": "fee", "dur": 3.293, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:772)"}, {"pid": 11306, "tid": 11306, "ts": 37013130613.053, "ph": "X", "cat": "fee", "dur": 4.468, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130558.166, "ph": "X", "cat": "fee", "dur": 59.472, "name": "__init__ (/astropy__astropy/astropy/modeling/projections.py:168)"}, {"pid": 11306, "tid": 11306, "ts": 37013130621.193, "ph": "X", "cat": "fee", "dur": 0.218, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130620.511, "ph": "X", "cat": "fee", "dur": 1.653, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130622.722, "ph": "X", "cat": "fee", "dur": 0.11, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130622.417, "ph": "X", "cat": "fee", "dur": 0.875, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130623.806, "ph": "X", "cat": "fee", "dur": 0.074, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130623.562, "ph": "X", "cat": "fee", "dur": 0.669, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130624.603, "ph": "X", "cat": "fee", "dur": 0.07, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130624.392, "ph": "X", "cat": "fee", "dur": 0.678, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130625.531, "ph": "X", "cat": "fee", "dur": 0.073, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130625.326, "ph": "X", "cat": "fee", "dur": 0.775, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130626.474, "ph": "X", "cat": "fee", "dur": 0.076, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130626.264, "ph": "X", "cat": "fee", "dur": 0.646, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130627.29, "ph": "X", "cat": "fee", "dur": 0.078, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130627.074, "ph": "X", "cat": "fee", "dur": 0.675, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130628.112, "ph": "X", "cat": "fee", "dur": 0.064, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130627.908, "ph": "X", "cat": "fee", "dur": 0.757, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130629.036, "ph": "X", "cat": "fee", "dur": 0.069, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130628.83, "ph": "X", "cat": "fee", "dur": 0.629, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130629.842, "ph": "X", "cat": "fee", "dur": 0.068, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130629.628, "ph": "X", "cat": "fee", "dur": 0.62, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130631.147, "ph": "X", "cat": "fee", "dur": 0.071, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130630.384, "ph": "X", "cat": "fee", "dur": 1.13, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130631.97, "ph": "X", "cat": "fee", "dur": 0.204, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013130632.392, "ph": "X", "cat": "fee", "dur": 0.24, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013130632.849, "ph": "X", "cat": "fee", "dur": 0.075, "name": "__len__ (/astropy__astropy/astropy/modeling/core.py:878)"}, {"pid": 11306, "tid": 11306, "ts": 37013130633.239, "ph": "X", "cat": "fee", "dur": 0.066, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130633.063, "ph": "X", "cat": "fee", "dur": 0.588, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130634.006, "ph": "X", "cat": "fee", "dur": 0.336, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130634.476, "ph": "X", "cat": "fee", "dur": 0.079, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130634.722, "ph": "X", "cat": "fee", "dur": 0.048, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130634.882, "ph": "X", "cat": "fee", "dur": 0.049, "name": "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)"}, {"pid": 11306, "tid": 11306, "ts": 37013130635.208, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130635.039, "ph": "X", "cat": "fee", "dur": 0.503, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130637.399, "ph": "X", "cat": "fee", "dur": 0.094, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3371)"}, {"pid": 11306, "tid": 11306, "ts": 37013130637.854, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130638.712, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130638.544, "ph": "X", "cat": "fee", "dur": 0.525, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130638.346, "ph": "X", "cat": "fee", "dur": 0.795, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3376)"}, {"pid": 11306, "tid": 11306, "ts": 37013130637.676, "ph": "X", "cat": "fee", "dur": 1.552, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130639.403, "ph": "X", "cat": "fee", "dur": 0.073, "name": "n_outputs (/astropy__astropy/astropy/modeling/core.py:3380)"}, {"pid": 11306, "tid": 11306, "ts": 37013130639.733, "ph": "X", "cat": "fee", "dur": 0.054, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130640.409, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130640.265, "ph": "X", "cat": "fee", "dur": 0.463, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130640.158, "ph": "X", "cat": "fee", "dur": 0.646, "name": "n_outputs (/astropy__astropy/astropy/modeling/core.py:3385)"}, {"pid": 11306, "tid": 11306, "ts": 37013130639.586, "ph": "X", "cat": "fee", "dur": 2.201, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130642.106, "ph": "X", "cat": "fee", "dur": 0.072, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130642.344, "ph": "X", "cat": "fee", "dur": 0.103, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130642.813, "ph": "X", "cat": "fee", "dur": 1.436, "name": "combine_labels (/astropy__astropy/astropy/modeling/utils.py:245)"}, {"pid": 11306, "tid": 11306, "ts": 37013130644.593, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130645.245, "ph": "X", "cat": "fee", "dur": 0.076, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3371)"}, {"pid": 11306, "tid": 11306, "ts": 37013130645.652, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130645.477, "ph": "X", "cat": "fee", "dur": 0.521, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130646.747, "ph": "X", "cat": "fee", "dur": 0.075, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130646.976, "ph": "X", "cat": "fee", "dur": 0.502, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)"}, {"pid": 11306, "tid": 11306, "ts": 37013130647.818, "ph": "X", "cat": "fee", "dur": 0.055, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130647.649, "ph": "X", "cat": "fee", "dur": 0.6, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130648.584, "ph": "X", "cat": "fee", "dur": 0.065, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:757)"}, {"pid": 11306, "tid": 11306, "ts": 37013130648.745, "ph": "X", "cat": "fee", "dur": 0.33, "name": "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)"}, {"pid": 11306, "tid": 11306, "ts": 37013130649.358, "ph": "X", "cat": "fee", "dur": 0.055, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130649.208, "ph": "X", "cat": "fee", "dur": 0.499, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130646.364, "ph": "X", "cat": "fee", "dur": 3.421, "name": "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)"}, {"pid": 11306, "tid": 11306, "ts": 37013130645.042, "ph": "X", "cat": "fee", "dur": 4.897, "name": "inputs (/astropy__astropy/astropy/modeling/core.py:761)"}, {"pid": 11306, "tid": 11306, "ts": 37013130644.393, "ph": "X", "cat": "fee", "dur": 5.653, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130650.268, "ph": "X", "cat": "fee", "dur": 0.096, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:768)"}, {"pid": 11306, "tid": 11306, "ts": 37013130650.478, "ph": "X", "cat": "fee", "dur": 0.078, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:768)"}, {"pid": 11306, "tid": 11306, "ts": 37013130650.67, "ph": "X", "cat": "fee", "dur": 0.811, "name": "combine_labels (/astropy__astropy/astropy/modeling/utils.py:245)"}, {"pid": 11306, "tid": 11306, "ts": 37013130651.763, "ph": "X", "cat": "fee", "dur": 0.06, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130652.286, "ph": "X", "cat": "fee", "dur": 0.062, "name": "n_outputs (/astropy__astropy/astropy/modeling/core.py:3380)"}, {"pid": 11306, "tid": 11306, "ts": 37013130652.628, "ph": "X", "cat": "fee", "dur": 0.061, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130652.476, "ph": "X", "cat": "fee", "dur": 0.556, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130652.143, "ph": "X", "cat": "fee", "dur": 0.966, "name": "outputs (/astropy__astropy/astropy/modeling/core.py:772)"}, {"pid": 11306, "tid": 11306, "ts": 37013130651.583, "ph": "X", "cat": "fee", "dur": 1.614, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130653.598, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130654.267, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130654.12, "ph": "X", "cat": "fee", "dur": 0.513, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130654.022, "ph": "X", "cat": "fee", "dur": 0.784, "name": "name (/astropy__astropy/astropy/modeling/core.py:1148)"}, {"pid": 11306, "tid": 11306, "ts": 37013130653.426, "ph": "X", "cat": "fee", "dur": 1.472, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130655.242, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130655.093, "ph": "X", "cat": "fee", "dur": 0.474, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130655.915, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130655.749, "ph": "X", "cat": "fee", "dur": 0.482, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130656.496, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130656.346, "ph": "X", "cat": "fee", "dur": 0.468, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130657.2, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130657.043, "ph": "X", "cat": "fee", "dur": 0.514, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130657.908, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130658.674, "ph": "X", "cat": "fee", "dur": 0.061, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130658.526, "ph": "X", "cat": "fee", "dur": 0.477, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130658.395, "ph": "X", "cat": "fee", "dur": 0.686, "name": "eqcons (/astropy__astropy/astropy/modeling/core.py:3393)"}, {"pid": 11306, "tid": 11306, "ts": 37013130657.716, "ph": "X", "cat": "fee", "dur": 1.452, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130660.518, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130661.415, "ph": "X", "cat": "fee", "dur": 0.058, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130661.263, "ph": "X", "cat": "fee", "dur": 0.526, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130661.162, "ph": "X", "cat": "fee", "dur": 0.707, "name": "ineqcons (/astropy__astropy/astropy/modeling/core.py:3401)"}, {"pid": 11306, "tid": 11306, "ts": 37013130660.337, "ph": "X", "cat": "fee", "dur": 1.663, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130662.639, "ph": "X", "cat": "fee", "dur": 0.185, "name": "parameters (/astropy__astropy/astropy/modeling/core.py:1179)"}, {"pid": 11306, "tid": 11306, "ts": 37013130663.301, "ph": "X", "cat": "fee", "dur": 0.06, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130663.116, "ph": "X", "cat": "fee", "dur": 0.536, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130665.481, "ph": "X", "cat": "fee", "dur": 0.089, "name": "isleaf (/astropy__astropy/astropy/modeling/core.py:3475)"}, {"pid": 11306, "tid": 11306, "ts": 37013130666.084, "ph": "X", "cat": "fee", "dur": 0.524, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130666.971, "ph": "X", "cat": "fee", "dur": 0.041, "name": "isleaf (/astropy__astropy/astropy/modeling/core.py:3475)"}, {"pid": 11306, "tid": 11306, "ts": 37013130667.336, "ph": "X", "cat": "fee", "dur": 0.257, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130667.82, "ph": "X", "cat": "fee", "dur": 0.136, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130666.854, "ph": "X", "cat": "fee", "dur": 1.464, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130664.95, "ph": "X", "cat": "fee", "dur": 3.626, "name": "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)"}, {"pid": 11306, "tid": 11306, "ts": 37013130668.952, "ph": "X", "cat": "fee", "dur": 0.076, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130668.749, "ph": "X", "cat": "fee", "dur": 0.653, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130669.703, "ph": "X", "cat": "fee", "dur": 0.055, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130669.533, "ph": "X", "cat": "fee", "dur": 0.578, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130664.426, "ph": "X", "cat": "fee", "dur": 5.759, "name": "_make_leaflist (/astropy__astropy/astropy/modeling/core.py:3291)"}, {"pid": 11306, "tid": 11306, "ts": 37013130670.55, "ph": "X", "cat": "fee", "dur": 0.057, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130670.402, "ph": "X", "cat": "fee", "dur": 0.517, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130671.241, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130671.086, "ph": "X", "cat": "fee", "dur": 0.503, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130677.358, "ph": "X", "cat": "fee", "dur": 0.085, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130677.598, "ph": "X", "cat": "fee", "dur": 0.063, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130677.136, "ph": "X", "cat": "fee", "dur": 1.1, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130678.542, "ph": "X", "cat": "fee", "dur": 0.06, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130678.708, "ph": "X", "cat": "fee", "dur": 0.064, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130678.386, "ph": "X", "cat": "fee", "dur": 0.685, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130679.967, "ph": "X", "cat": "fee", "dur": 0.222, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130680.368, "ph": "X", "cat": "fee", "dur": 0.147, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130680.624, "ph": "X", "cat": "fee", "dur": 0.088, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130680.79, "ph": "X", "cat": "fee", "dur": 0.076, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130680.94, "ph": "X", "cat": "fee", "dur": 0.077, "name": "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)"}, {"pid": 11306, "tid": 11306, "ts": 37013130681.581, "ph": "X", "cat": "fee", "dur": 0.063, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130681.756, "ph": "X", "cat": "fee", "dur": 0.063, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130681.408, "ph": "X", "cat": "fee", "dur": 0.742, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130682.632, "ph": "X", "cat": "fee", "dur": 0.069, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130683.39, "ph": "X", "cat": "fee", "dur": 1.318, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130689.346, "ph": "X", "cat": "fee", "dur": 0.301, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130691.632, "ph": "X", "cat": "fee", "dur": 0.605, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130693.718, "ph": "X", "cat": "fee", "dur": 0.312, "name": "value (/astropy__astropy/astropy/modeling/parameters.py:313)"}, {"pid": 11306, "tid": 11306, "ts": 37013130696.682, "ph": "X", "cat": "fee", "dur": 0.063, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130696.88, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130696.447, "ph": "X", "cat": "fee", "dur": 0.923, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130682.364, "ph": "X", "cat": "fee", "dur": 15.097, "name": "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:3550)"}, {"pid": 11306, "tid": 11306, "ts": 37013130698.898, "ph": "X", "cat": "fee", "dur": 0.059, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130699.07, "ph": "X", "cat": "fee", "dur": 0.06, "name": "param_names (/astropy__astropy/astropy/modeling/core.py:3286)"}, {"pid": 11306, "tid": 11306, "ts": 37013130698.716, "ph": "X", "cat": "fee", "dur": 0.754, "name": "__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)"}, {"pid": 11306, "tid": 11306, "ts": 37013130663.943, "ph": "X", "cat": "fee", "dur": 35.696, "name": "_map_parameters (/astropy__astropy/astropy/modeling/core.py:3505)"}, {"pid": 11306, "tid": 11306, "ts": 37013130619.553, "ph": "X", "cat": "fee", "dur": 80.214, "name": "__init__ (/astropy__astropy/astropy/modeling/core.py:2902)"}, {"pid": 11306, "tid": 11306, "ts": 37013130618.864, "ph": "X", "cat": "fee", "dur": 81.062, "name": "<lambda> (/astropy__astropy/astropy/modeling/core.py:57)"}, {"pid": 11306, "tid": 11306, "ts": 37013130700.511, "ph": "X", "cat": "fee", "dur": 0.071, "name": "n_inputs (/astropy__astropy/astropy/modeling/core.py:3371)"}, {"pid": 11306, "tid": 11306, "ts": 37013130701.079, "ph": "X", "cat": "fee", "dur": 0.11, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013130702.031, "ph": "X", "cat": "fee", "dur": 0.06, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013130704.314, "ph": "X", "cat": "fee", "dur": 0.286, "name": "separable (/astropy__astropy/astropy/modeling/core.py:1531)"}, {"pid": 11306, "tid": 11306, "ts": 37013130703.195, "ph": "X", "cat": "fee", "dur": 5.799, "name": "_coord_matrix (/astropy__astropy/astropy/modeling/separable.py:171)"}, {"pid": 11306, "tid": 11306, "ts": 37013130701.675, "ph": "X", "cat": "fee", "dur": 7.442, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130709.576, "ph": "X", "cat": "fee", "dur": 0.075, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013130710.11, "ph": "X", "cat": "fee", "dur": 0.056, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013130711.675, "ph": "X", "cat": "fee", "dur": 0.155, "name": "separable (/astropy__astropy/astropy/modeling/core.py:1531)"}, {"pid": 11306, "tid": 11306, "ts": 37013130711.163, "ph": "X", "cat": "fee", "dur": 2.172, "name": "_coord_matrix (/astropy__astropy/astropy/modeling/separable.py:171)"}, {"pid": 11306, "tid": 11306, "ts": 37013130709.956, "ph": "X", "cat": "fee", "dur": 3.476, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130713.726, "ph": "X", "cat": "fee", "dur": 0.059, "name": "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)"}, {"pid": 11306, "tid": 11306, "ts": 37013130714.91, "ph": "X", "cat": "fee", "dur": 0.112, "name": "separable (/astropy__astropy/astropy/modeling/core.py:1531)"}, {"pid": 11306, "tid": 11306, "ts": 37013130714.52, "ph": "X", "cat": "fee", "dur": 1.063, "name": "_coord_matrix (/astropy__astropy/astropy/modeling/separable.py:171)"}, {"pid": 11306, "tid": 11306, "ts": 37013130713.627, "ph": "X", "cat": "fee", "dur": 2.02, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130716.193, "ph": "X", "cat": "fee", "dur": 1.296, "name": "_compute_n_outputs (/astropy__astropy/astropy/modeling/separable.py:105)"}, {"pid": 11306, "tid": 11306, "ts": 37013130715.962, "ph": "X", "cat": "fee", "dur": 14.589, "name": "_cstack (/astropy__astropy/astropy/modeling/separable.py:219)"}, {"pid": 11306, "tid": 11306, "ts": 37013130709.367, "ph": "X", "cat": "fee", "dur": 21.464, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130731.341, "ph": "X", "cat": "fee", "dur": 0.888, "name": "_compute_n_outputs (/astropy__astropy/astropy/modeling/separable.py:105)"}, {"pid": 11306, "tid": 11306, "ts": 37013130731.221, "ph": "X", "cat": "fee", "dur": 7.18, "name": "_cstack (/astropy__astropy/astropy/modeling/separable.py:219)"}, {"pid": 11306, "tid": 11306, "ts": 37013130700.843, "ph": "X", "cat": "fee", "dur": 37.7, "name": "_separable (/astropy__astropy/astropy/modeling/separable.py:290)"}, {"pid": 11306, "tid": 11306, "ts": 37013130700.241, "ph": "X", "cat": "fee", "dur": 50.14, "name": "separability_matrix (/astropy__astropy/astropy/modeling/separable.py:66)"}, {"pid": 11306, "tid": 11306, "ts": 37012535949.395, "ph": "X", "cat": "fee", "dur": 594857.764, "name": "<module> (/astropy__astropy/reproducer_astropy__astropy-12907.py:2)"}], "viztracer_metadata": {"overflow": false, "version": "0.16.3"}, "file_info": {"files": {"/astropy__astropy/astropy/modeling/core.py": ["# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\"\"\"\nThis module defines base classes for all models.  The base class of all\nmodels is `~astropy.modeling.Model`. `~astropy.modeling.FittableModel` is\nthe base class for all fittable models. Fittable models can be linear or\nnonlinear in a regression analysis sense.\n\nAll models provide a `__call__` method which performs the transformation in\na purely mathematical way, i.e. the models are unitless.  Model instances can\nrepresent either a single model, or a \"model set\" representing multiple copies\nof the same type of model, but with potentially different values of the\nparameters in each model making up the set.\n\"\"\"\n# pylint: disable=invalid-name, protected-access, redefined-outer-name\nimport abc\nimport copy\nimport inspect\nimport itertools\nimport functools\nimport operator\nimport types\n\nfrom collections import defaultdict, deque\nfrom inspect import signature\nfrom itertools import chain\n\nimport numpy as np\n\nfrom astropy.utils import indent, metadata\nfrom astropy.table import Table\nfrom astropy.units import Quantity, UnitsError, dimensionless_unscaled\nfrom astropy.units.utils import quantity_asanyarray\nfrom astropy.utils import (sharedmethod, find_current_module,\n                           check_broadcast, IncompatibleShapeError, isiterable)\nfrom astropy.utils.codegen import make_function_with_signature\nfrom astropy.nddata.utils import add_array, extract_array\nfrom .utils import (combine_labels, make_binary_operator_eval,\n                    get_inputs_and_params, _combine_equivalency_dict,\n                    _ConstraintsDict, _SpecialOperatorsDict)\nfrom .bounding_box import ModelBoundingBox, CompoundBoundingBox\nfrom .parameters import (Parameter, InputParameterError,\n                         param_repr_oneline, _tofloat)\n\n\n__all__ = ['Model', 'FittableModel', 'Fittable1DModel', 'Fittable2DModel',\n           'CompoundModel', 'fix_inputs', 'custom_model', 'ModelDefinitionError',\n           'bind_bounding_box', 'bind_compound_bounding_box']\n\n\ndef _model_oper(oper, **kwargs):\n    \"\"\"\n    Returns a function that evaluates a given Python arithmetic operator\n    between two models.  The operator should be given as a string, like ``'+'``\n    or ``'**'``.\n    \"\"\"\n    return lambda left, right: CompoundModel(oper, left, right, **kwargs)\n\n\nclass ModelDefinitionError(TypeError):\n    \"\"\"Used for incorrect models definitions.\"\"\"\n\n\nclass _ModelMeta(abc.ABCMeta):\n    \"\"\"\n    Metaclass for Model.\n\n    Currently just handles auto-generating the param_names list based on\n    Parameter descriptors declared at the class-level of Model subclasses.\n    \"\"\"\n\n    _is_dynamic = False\n    \"\"\"\n    This flag signifies whether this class was created in the \"normal\" way,\n    with a class statement in the body of a module, as opposed to a call to\n    `type` or some other metaclass constructor, such that the resulting class\n    does not belong to a specific module.  This is important for pickling of\n    dynamic classes.\n\n    This flag is always forced to False for new classes, so code that creates\n    dynamic classes should manually set it to True on those classes when\n    creating them.\n    \"\"\"\n\n    # Default empty dict for _parameters_, which will be empty on model\n    # classes that don't have any Parameters\n\n    def __new__(mcls, name, bases, members, **kwds):\n        # See the docstring for _is_dynamic above\n        if '_is_dynamic' not in members:\n            members['_is_dynamic'] = mcls._is_dynamic\n        opermethods = [\n            ('__add__', _model_oper('+')),\n            ('__sub__', _model_oper('-')),\n            ('__mul__', _model_oper('*')),\n            ('__truediv__', _model_oper('/')),\n            ('__pow__', _model_oper('**')),\n            ('__or__', _model_oper('|')),\n            ('__and__', _model_oper('&')),\n            ('_fix_inputs', _model_oper('fix_inputs'))\n        ]\n\n        members['_parameters_'] = {k: v for k, v in members.items()\n                                   if isinstance(v, Parameter)}\n\n        for opermethod, opercall in opermethods:\n            members[opermethod] = opercall\n        cls = super().__new__(mcls, name, bases, members, **kwds)\n\n        param_names = list(members['_parameters_'])\n\n        # Need to walk each base MRO to collect all parameter names\n        for base in bases:\n            for tbase in base.__mro__:\n                if issubclass(tbase, Model):\n                    # Preserve order of definitions\n                    param_names = list(tbase._parameters_) + param_names\n        # Remove duplicates (arising from redefinition in subclass).\n        param_names = list(dict.fromkeys(param_names))\n        if cls._parameters_:\n            if hasattr(cls, '_param_names'):\n                # Slight kludge to support compound models, where\n                # cls.param_names is a property; could be improved with a\n                # little refactoring but fine for now\n                cls._param_names = tuple(param_names)\n            else:\n                cls.param_names = tuple(param_names)\n\n        return cls\n\n    def __init__(cls, name, bases, members, **kwds):\n        super(_ModelMeta, cls).__init__(name, bases, members, **kwds)\n        cls._create_inverse_property(members)\n        cls._create_bounding_box_property(members)\n        pdict = {}\n        for base in bases:\n            for tbase in base.__mro__:\n                if issubclass(tbase, Model):\n                    for parname, val in cls._parameters_.items():\n                        pdict[parname] = val\n        cls._handle_special_methods(members, pdict)\n\n    def __repr__(cls):\n        \"\"\"\n        Custom repr for Model subclasses.\n        \"\"\"\n\n        return cls._format_cls_repr()\n\n    def _repr_pretty_(cls, p, cycle):\n        \"\"\"\n        Repr for IPython's pretty printer.\n\n        By default IPython \"pretty prints\" classes, so we need to implement\n        this so that IPython displays the custom repr for Models.\n        \"\"\"\n\n        p.text(repr(cls))\n\n    def __reduce__(cls):\n        if not cls._is_dynamic:\n            # Just return a string specifying where the class can be imported\n            # from\n            return cls.__name__\n        members = dict(cls.__dict__)\n        # Delete any ABC-related attributes--these will be restored when\n        # the class is reconstructed:\n        for key in list(members):\n            if key.startswith('_abc_'):\n                del members[key]\n\n        # Delete custom __init__ and __call__ if they exist:\n        for key in ('__init__', '__call__'):\n            if key in members:\n                del members[key]\n\n        return (type(cls), (cls.__name__, cls.__bases__, members))\n\n    @property\n    def name(cls):\n        \"\"\"\n        The name of this model class--equivalent to ``cls.__name__``.\n\n        This attribute is provided for symmetry with the `Model.name` attribute\n        of model instances.\n        \"\"\"\n\n        return cls.__name__\n\n    @property\n    def _is_concrete(cls):\n        \"\"\"\n        A class-level property that determines whether the class is a concrete\n        implementation of a Model--i.e. it is not some abstract base class or\n        internal implementation detail (i.e. begins with '_').\n        \"\"\"\n        return not (cls.__name__.startswith('_') or inspect.isabstract(cls))\n\n    def rename(cls, name=None, inputs=None, outputs=None):\n        \"\"\"\n        Creates a copy of this model class with a new name, inputs or outputs.\n\n        The new class is technically a subclass of the original class, so that\n        instance and type checks will still work.  For example::\n\n            >>> from astropy.modeling.models import Rotation2D\n            >>> SkyRotation = Rotation2D.rename('SkyRotation')\n            >>> SkyRotation\n            <class 'astropy.modeling.core.SkyRotation'>\n            Name: SkyRotation (Rotation2D)\n            N_inputs: 2\n            N_outputs: 2\n            Fittable parameters: ('angle',)\n            >>> issubclass(SkyRotation, Rotation2D)\n            True\n            >>> r = SkyRotation(90)\n            >>> isinstance(r, Rotation2D)\n            True\n        \"\"\"\n\n        mod = find_current_module(2)\n        if mod:\n            modname = mod.__name__\n        else:\n            modname = '__main__'\n\n        if name is None:\n            name = cls.name\n        if inputs is None:\n            inputs = cls.inputs\n        else:\n            if not isinstance(inputs, tuple):\n                raise TypeError(\"Expected 'inputs' to be a tuple of strings.\")\n            elif len(inputs) != len(cls.inputs):\n                raise ValueError(f'{cls.name} expects {len(cls.inputs)} inputs')\n        if outputs is None:\n            outputs = cls.outputs\n        else:\n            if not isinstance(outputs, tuple):\n                raise TypeError(\"Expected 'outputs' to be a tuple of strings.\")\n            elif len(outputs) != len(cls.outputs):\n                raise ValueError(f'{cls.name} expects {len(cls.outputs)} outputs')\n        new_cls = type(name, (cls,), {\"inputs\": inputs, \"outputs\": outputs})\n        new_cls.__module__ = modname\n        new_cls.__qualname__ = name\n\n        return new_cls\n\n    def _create_inverse_property(cls, members):\n        inverse = members.get('inverse')\n        if inverse is None or cls.__bases__[0] is object:\n            # The latter clause is the prevent the below code from running on\n            # the Model base class, which implements the default getter and\n            # setter for .inverse\n            return\n\n        if isinstance(inverse, property):\n            # We allow the @property decorator to be omitted entirely from\n            # the class definition, though its use should be encouraged for\n            # clarity\n            inverse = inverse.fget\n\n        # Store the inverse getter internally, then delete the given .inverse\n        # attribute so that cls.inverse resolves to Model.inverse instead\n        cls._inverse = inverse\n        del cls.inverse\n\n    def _create_bounding_box_property(cls, members):\n        \"\"\"\n        Takes any bounding_box defined on a concrete Model subclass (either\n        as a fixed tuple or a property or method) and wraps it in the generic\n        getter/setter interface for the bounding_box attribute.\n        \"\"\"\n\n        # TODO: Much of this is verbatim from _create_inverse_property--I feel\n        # like there could be a way to generify properties that work this way,\n        # but for the time being that would probably only confuse things more.\n        bounding_box = members.get('bounding_box')\n        if bounding_box is None or cls.__bases__[0] is object:\n            return\n\n        if isinstance(bounding_box, property):\n            bounding_box = bounding_box.fget\n\n        if not callable(bounding_box):\n            # See if it's a hard-coded bounding_box (as a sequence) and\n            # normalize it\n            try:\n                bounding_box = ModelBoundingBox.validate(cls, bounding_box, _preserve_ignore=True)\n            except ValueError as exc:\n                raise ModelDefinitionError(exc.args[0])\n        else:\n            sig = signature(bounding_box)\n            # May be a method that only takes 'self' as an argument (like a\n            # property, but the @property decorator was forgotten)\n            #\n            # However, if the method takes additional arguments then this is a\n            # parameterized bounding box and should be callable\n            if len(sig.parameters) > 1:\n                bounding_box = \\\n                        cls._create_bounding_box_subclass(bounding_box, sig)\n\n        # See the Model.bounding_box getter definition for how this attribute\n        # is used\n        cls._bounding_box = bounding_box\n        del cls.bounding_box\n\n    def _create_bounding_box_subclass(cls, func, sig):\n        \"\"\"\n        For Models that take optional arguments for defining their bounding\n        box, we create a subclass of ModelBoundingBox with a ``__call__`` method\n        that supports those additional arguments.\n\n        Takes the function's Signature as an argument since that is already\n        computed in _create_bounding_box_property, so no need to duplicate that\n        effort.\n        \"\"\"\n\n        # TODO: Might be convenient if calling the bounding box also\n        # automatically sets the _user_bounding_box.  So that\n        #\n        #    >>> model.bounding_box(arg=1)\n        #\n        # in addition to returning the computed bbox, also sets it, so that\n        # it's a shortcut for\n        #\n        #    >>> model.bounding_box = model.bounding_box(arg=1)\n        #\n        # Not sure if that would be non-obvious / confusing though...\n\n        def __call__(self, **kwargs):\n            return func(self._model, **kwargs)\n\n        kwargs = []\n        for idx, param in enumerate(sig.parameters.values()):\n            if idx == 0:\n                # Presumed to be a 'self' argument\n                continue\n\n            if param.default is param.empty:\n                raise ModelDefinitionError(\n                    'The bounding_box method for {0} is not correctly '\n                    'defined: If defined as a method all arguments to that '\n                    'method (besides self) must be keyword arguments with '\n                    'default values that can be used to compute a default '\n                    'bounding box.'.format(cls.name))\n\n            kwargs.append((param.name, param.default))\n\n        __call__.__signature__ = sig\n\n        return type(f'{cls.name}ModelBoundingBox', (ModelBoundingBox,),\n                    {'__call__': __call__})\n\n    def _handle_special_methods(cls, members, pdict):\n\n        # Handle init creation from inputs\n        def update_wrapper(wrapper, cls):\n            # Set up the new __call__'s metadata attributes as though it were\n            # manually defined in the class definition\n            # A bit like functools.update_wrapper but uses the class instead of\n            # the wrapped function\n            wrapper.__module__ = cls.__module__\n            wrapper.__doc__ = getattr(cls, wrapper.__name__).__doc__\n            if hasattr(cls, '__qualname__'):\n                wrapper.__qualname__ = f'{cls.__qualname__}.{wrapper.__name__}'\n\n        if ('__call__' not in members and 'n_inputs' in members and\n                isinstance(members['n_inputs'], int) and members['n_inputs'] > 0):\n\n            # Don't create a custom __call__ for classes that already have one\n            # explicitly defined (this includes the Model base class, and any\n            # other classes that manually override __call__\n\n            def __call__(self, *inputs, **kwargs):\n                \"\"\"Evaluate this model on the supplied inputs.\"\"\"\n                return super(cls, self).__call__(*inputs, **kwargs)\n\n            # When called, models can take two optional keyword arguments:\n            #\n            # * model_set_axis, which indicates (for multi-dimensional input)\n            #   which axis is used to indicate different models\n            #\n            # * equivalencies, a dictionary of equivalencies to be applied to\n            #   the input values, where each key should correspond to one of\n            #   the inputs.\n            #\n            # The following code creates the __call__ function with these\n            # two keyword arguments.\n\n            args = ('self',)\n            kwargs = dict([('model_set_axis', None),\n                           ('with_bounding_box', False),\n                           ('fill_value', np.nan),\n                           ('equivalencies', None),\n                           ('inputs_map', None)])\n\n            new_call = make_function_with_signature(\n                __call__, args, kwargs, varargs='inputs', varkwargs='new_inputs')\n\n            # The following makes it look like __call__\n            # was defined in the class\n            update_wrapper(new_call, cls)\n\n            cls.__call__ = new_call\n\n        if ('__init__' not in members and not inspect.isabstract(cls) and\n                cls._parameters_):\n            # Build list of all parameters including inherited ones\n\n            # If *all* the parameters have default values we can make them\n            # keyword arguments; otherwise they must all be positional\n            # arguments\n            if all(p.default is not None for p in pdict.values()):\n                args = ('self',)\n                kwargs = []\n                for param_name, param_val in pdict.items():\n                    default = param_val.default\n                    unit = param_val.unit\n                    # If the unit was specified in the parameter but the\n                    # default is not a Quantity, attach the unit to the\n                    # default.\n                    if unit is not None:\n                        default = Quantity(default, unit, copy=False)\n                    kwargs.append((param_name, default))\n            else:\n                args = ('self',) + tuple(pdict.keys())\n                kwargs = {}\n\n            def __init__(self, *params, **kwargs):\n                return super(cls, self).__init__(*params, **kwargs)\n\n            new_init = make_function_with_signature(\n                __init__, args, kwargs, varkwargs='kwargs')\n            update_wrapper(new_init, cls)\n            cls.__init__ = new_init\n\n    # *** Arithmetic operators for creating compound models ***\n    __add__ = _model_oper('+')\n    __sub__ = _model_oper('-')\n    __mul__ = _model_oper('*')\n    __truediv__ = _model_oper('/')\n    __pow__ = _model_oper('**')\n    __or__ = _model_oper('|')\n    __and__ = _model_oper('&')\n    _fix_inputs = _model_oper('fix_inputs')\n\n    # *** Other utilities ***\n\n    def _format_cls_repr(cls, keywords=[]):\n        \"\"\"\n        Internal implementation of ``__repr__``.\n\n        This is separated out for ease of use by subclasses that wish to\n        override the default ``__repr__`` while keeping the same basic\n        formatting.\n        \"\"\"\n\n        # For the sake of familiarity start the output with the standard class\n        # __repr__\n        parts = [super().__repr__()]\n\n        if not cls._is_concrete:\n            return parts[0]\n\n        def format_inheritance(cls):\n            bases = []\n            for base in cls.mro()[1:]:\n                if not issubclass(base, Model):\n                    continue\n                elif (inspect.isabstract(base) or\n                      base.__name__.startswith('_')):\n                    break\n                bases.append(base.name)\n            if bases:\n                return f\"{cls.name} ({' -> '.join(bases)})\"\n            return cls.name\n\n        try:\n            default_keywords = [\n                ('Name', format_inheritance(cls)),\n                ('N_inputs', cls.n_inputs),\n                ('N_outputs', cls.n_outputs),\n            ]\n\n            if cls.param_names:\n                default_keywords.append(('Fittable parameters',\n                                         cls.param_names))\n\n            for keyword, value in default_keywords + keywords:\n                if value is not None:\n                    parts.append(f'{keyword}: {value}')\n\n            return '\\n'.join(parts)\n        except Exception:\n            # If any of the above formatting fails fall back on the basic repr\n            # (this is particularly useful in debugging)\n            return parts[0]\n\n\nclass Model(metaclass=_ModelMeta):\n    \"\"\"\n    Base class for all models.\n\n    This is an abstract class and should not be instantiated directly.\n\n    The following initialization arguments apply to the majority of Model\n    subclasses by default (exceptions include specialized utility models\n    like `~astropy.modeling.mappings.Mapping`).  Parametric models take all\n    their parameters as arguments, followed by any of the following optional\n    keyword arguments:\n\n    Parameters\n    ----------\n    name : str, optional\n        A human-friendly name associated with this model instance\n        (particularly useful for identifying the individual components of a\n        compound model).\n\n    meta : dict, optional\n        An optional dict of user-defined metadata to attach to this model.\n        How this is used and interpreted is up to the user or individual use\n        case.\n\n    n_models : int, optional\n        If given an integer greater than 1, a *model set* is instantiated\n        instead of a single model.  This affects how the parameter arguments\n        are interpreted.  In this case each parameter must be given as a list\n        or array--elements of this array are taken along the first axis (or\n        ``model_set_axis`` if specified), such that the Nth element is the\n        value of that parameter for the Nth model in the set.\n\n        See the section on model sets in the documentation for more details.\n\n    model_set_axis : int, optional\n        This argument only applies when creating a model set (i.e. ``n_models >\n        1``).  It changes how parameter values are interpreted.  Normally the\n        first axis of each input parameter array (properly the 0th axis) is\n        taken as the axis corresponding to the model sets.  However, any axis\n        of an input array may be taken as this \"model set axis\".  This accepts\n        negative integers as well--for example use ``model_set_axis=-1`` if the\n        last (most rapidly changing) axis should be associated with the model\n        sets. Also, ``model_set_axis=False`` can be used to tell that a given\n        input should be used to evaluate all the models in the model set.\n\n    fixed : dict, optional\n        Dictionary ``{parameter_name: bool}`` setting the fixed constraint\n        for one or more parameters.  `True` means the parameter is held fixed\n        during fitting and is prevented from updates once an instance of the\n        model has been created.\n\n        Alternatively the `~astropy.modeling.Parameter.fixed` property of a\n        parameter may be used to lock or unlock individual parameters.\n\n    tied : dict, optional\n        Dictionary ``{parameter_name: callable}`` of parameters which are\n        linked to some other parameter. The dictionary values are callables\n        providing the linking relationship.\n\n        Alternatively the `~astropy.modeling.Parameter.tied` property of a\n        parameter may be used to set the ``tied`` constraint on individual\n        parameters.\n\n    bounds : dict, optional\n        A dictionary ``{parameter_name: value}`` of lower and upper bounds of\n        parameters. Keys are parameter names. Values are a list or a tuple\n        of length 2 giving the desired range for the parameter.\n\n        Alternatively the `~astropy.modeling.Parameter.min` and\n        `~astropy.modeling.Parameter.max` or\n        ~astropy.modeling.Parameter.bounds` properties of a parameter may be\n        used to set bounds on individual parameters.\n\n    eqcons : list, optional\n        List of functions of length n such that ``eqcons[j](x0, *args) == 0.0``\n        in a successfully optimized problem.\n\n    ineqcons : list, optional\n        List of functions of length n such that ``ieqcons[j](x0, *args) >=\n        0.0`` is a successfully optimized problem.\n\n    Examples\n    --------\n    >>> from astropy.modeling import models\n    >>> def tie_center(model):\n    ...         mean = 50 * model.stddev\n    ...         return mean\n    >>> tied_parameters = {'mean': tie_center}\n\n    Specify that ``'mean'`` is a tied parameter in one of two ways:\n\n    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3,\n    ...                        tied=tied_parameters)\n\n    or\n\n    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3)\n    >>> g1.mean.tied\n    False\n    >>> g1.mean.tied = tie_center\n    >>> g1.mean.tied\n    <function tie_center at 0x...>\n\n    Fixed parameters:\n\n    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3,\n    ...                        fixed={'stddev': True})\n    >>> g1.stddev.fixed\n    True\n\n    or\n\n    >>> g1 = models.Gaussian1D(amplitude=10, mean=5, stddev=.3)\n    >>> g1.stddev.fixed\n    False\n    >>> g1.stddev.fixed = True\n    >>> g1.stddev.fixed\n    True\n    \"\"\"\n\n    parameter_constraints = Parameter.constraints\n    \"\"\"\n    Primarily for informational purposes, these are the types of constraints\n    that can be set on a model's parameters.\n    \"\"\"\n\n    model_constraints = ('eqcons', 'ineqcons')\n    \"\"\"\n    Primarily for informational purposes, these are the types of constraints\n    that constrain model evaluation.\n    \"\"\"\n\n    param_names = ()\n    \"\"\"\n    Names of the parameters that describe models of this type.\n\n    The parameters in this tuple are in the same order they should be passed in\n    when initializing a model of a specific type.  Some types of models, such\n    as polynomial models, have a different number of parameters depending on\n    some other property of the model, such as the degree.\n\n    When defining a custom model class the value of this attribute is\n    automatically set by the `~astropy.modeling.Parameter` attributes defined\n    in the class body.\n    \"\"\"\n\n    n_inputs = 0\n    \"\"\"The number of inputs.\"\"\"\n    n_outputs = 0\n    \"\"\" The number of outputs.\"\"\"\n\n    standard_broadcasting = True\n    fittable = False\n    linear = True\n    _separable = None\n    \"\"\" A boolean flag to indicate whether a model is separable.\"\"\"\n    meta = metadata.MetaData()\n    \"\"\"A dict-like object to store optional information.\"\"\"\n\n    # By default models either use their own inverse property or have no\n    # inverse at all, but users may also assign a custom inverse to a model,\n    # optionally; in that case it is of course up to the user to determine\n    # whether their inverse is *actually* an inverse to the model they assign\n    # it to.\n    _inverse = None\n    _user_inverse = None\n\n    _bounding_box = None\n    _user_bounding_box = None\n\n    _has_inverse_bounding_box = False\n\n    # Default n_models attribute, so that __len__ is still defined even when a\n    # model hasn't completed initialization yet\n    _n_models = 1\n\n    # New classes can set this as a boolean value.\n    # It is converted to a dictionary mapping input name to a boolean value.\n    _input_units_strict = False\n\n    # Allow dimensionless input (and corresponding output). If this is True,\n    # input values to evaluate will gain the units specified in input_units. If\n    # this is a dictionary then it should map input name to a bool to allow\n    # dimensionless numbers for that input.\n    # Only has an effect if input_units is defined.\n    _input_units_allow_dimensionless = False\n\n    # Default equivalencies to apply to input values. If set, this should be a\n    # dictionary where each key is a string that corresponds to one of the\n    # model inputs. Only has an effect if input_units is defined.\n    input_units_equivalencies = None\n\n    # Covariance matrix can be set by fitter if available.\n    # If cov_matrix is available, then std will set as well\n    _cov_matrix = None\n    _stds = None\n\n    def __init_subclass__(cls, **kwargs):\n        super().__init_subclass__()\n\n    def __init__(self, *args, meta=None, name=None, **kwargs):\n        super().__init__()\n        self._default_inputs_outputs()\n        if meta is not None:\n            self.meta = meta\n        self._name = name\n        # add parameters to instance level by walking MRO list\n        mro = self.__class__.__mro__\n        for cls in mro:\n            if issubclass(cls, Model):\n                for parname, val in cls._parameters_.items():\n                    newpar = copy.deepcopy(val)\n                    newpar.model = self\n                    if parname not in self.__dict__:\n                        self.__dict__[parname] = newpar\n\n        self._initialize_constraints(kwargs)\n        kwargs = self._initialize_setters(kwargs)\n        # Remaining keyword args are either parameter values or invalid\n        # Parameter values must be passed in as keyword arguments in order to\n        # distinguish them\n        self._initialize_parameters(args, kwargs)\n        self._initialize_slices()\n        self._initialize_unit_support()\n\n    def _default_inputs_outputs(self):\n        if self.n_inputs == 1 and self.n_outputs == 1:\n            self._inputs = (\"x\",)\n            self._outputs = (\"y\",)\n        elif self.n_inputs == 2 and self.n_outputs == 1:\n            self._inputs = (\"x\", \"y\")\n            self._outputs = (\"z\",)\n        else:\n            try:\n                self._inputs = tuple(\"x\" + str(idx) for idx in range(self.n_inputs))\n                self._outputs = tuple(\"x\" + str(idx) for idx in range(self.n_outputs))\n            except TypeError:\n                # self.n_inputs and self.n_outputs are properties\n                # This is the case when subclasses of Model do not define\n                # ``n_inputs``, ``n_outputs``, ``inputs`` or ``outputs``.\n                self._inputs = ()\n                self._outputs = ()\n\n    def _initialize_setters(self, kwargs):\n        \"\"\"\n        This exists to inject defaults for settable properties for models\n        originating from `custom_model`.\n        \"\"\"\n        if hasattr(self, '_settable_properties'):\n            setters = {name: kwargs.pop(name, default)\n                       for name, default in self._settable_properties.items()}\n            for name, value in setters.items():\n                setattr(self, name, value)\n\n        return kwargs\n\n    @property\n    def inputs(self):\n        return self._inputs\n\n    @inputs.setter\n    def inputs(self, val):\n        if len(val) != self.n_inputs:\n            raise ValueError(f\"Expected {self.n_inputs} number of inputs, got {len(val)}.\")\n        self._inputs = val\n        self._initialize_unit_support()\n\n    @property\n    def outputs(self):\n        return self._outputs\n\n    @outputs.setter\n    def outputs(self, val):\n        if len(val) != self.n_outputs:\n            raise ValueError(f\"Expected {self.n_outputs} number of outputs, got {len(val)}.\")\n        self._outputs = val\n\n    @property\n    def n_inputs(self):\n        # TODO: remove the code in the ``if`` block when support\n        # for models with ``inputs`` as class variables is removed.\n        if hasattr(self.__class__, 'n_inputs') and isinstance(self.__class__.n_inputs, property):\n            try:\n                return len(self.__class__.inputs)\n            except TypeError:\n                try:\n                    return len(self.inputs)\n                except AttributeError:\n                    return 0\n\n        return self.__class__.n_inputs\n\n    @property\n    def n_outputs(self):\n        # TODO: remove the code in the ``if`` block when support\n        # for models with ``outputs`` as class variables is removed.\n        if hasattr(self.__class__, 'n_outputs') and isinstance(self.__class__.n_outputs, property):\n            try:\n                return len(self.__class__.outputs)\n            except TypeError:\n                try:\n                    return len(self.outputs)\n                except AttributeError:\n                    return 0\n\n        return self.__class__.n_outputs\n\n    def _calculate_separability_matrix(self):\n        \"\"\"\n        This is a hook which customises the behavior of modeling.separable.\n\n        This allows complex subclasses to customise the separability matrix.\n        If it returns `NotImplemented` the default behavior is used.\n        \"\"\"\n        return NotImplemented\n\n    def _initialize_unit_support(self):\n        \"\"\"\n        Convert self._input_units_strict and\n        self.input_units_allow_dimensionless to dictionaries\n        mapping input name to a boolean value.\n        \"\"\"\n        if isinstance(self._input_units_strict, bool):\n            self._input_units_strict = {key: self._input_units_strict for\n                                        key in self.inputs}\n\n        if isinstance(self._input_units_allow_dimensionless, bool):\n            self._input_units_allow_dimensionless = {key: self._input_units_allow_dimensionless\n                                                     for key in self.inputs}\n\n    @property\n    def input_units_strict(self):\n        \"\"\"\n        Enforce strict units on inputs to evaluate. If this is set to True,\n        input values to evaluate will be in the exact units specified by\n        input_units. If the input quantities are convertible to input_units,\n        they are converted. If this is a dictionary then it should map input\n        name to a bool to set strict input units for that parameter.\n        \"\"\"\n        val = self._input_units_strict\n        if isinstance(val, bool):\n            return {key: val for key in self.inputs}\n        return dict(zip(self.inputs, val.values()))\n\n    @property\n    def input_units_allow_dimensionless(self):\n        \"\"\"\n        Allow dimensionless input (and corresponding output). If this is True,\n        input values to evaluate will gain the units specified in input_units. If\n        this is a dictionary then it should map input name to a bool to allow\n        dimensionless numbers for that input.\n        Only has an effect if input_units is defined.\n        \"\"\"\n\n        val = self._input_units_allow_dimensionless\n        if isinstance(val, bool):\n            return {key: val for key in self.inputs}\n        return dict(zip(self.inputs, val.values()))\n\n    @property\n    def uses_quantity(self):\n        \"\"\"\n        True if this model has been created with `~astropy.units.Quantity`\n        objects or if there are no parameters.\n\n        This can be used to determine if this model should be evaluated with\n        `~astropy.units.Quantity` or regular floats.\n        \"\"\"\n        pisq = [isinstance(p, Quantity) for p in self._param_sets(units=True)]\n        return (len(pisq) == 0) or any(pisq)\n\n    def __repr__(self):\n        return self._format_repr()\n\n    def __str__(self):\n        return self._format_str()\n\n    def __len__(self):\n        return self._n_models\n\n    @staticmethod\n    def _strip_ones(intup):\n        return tuple(item for item in intup if item != 1)\n\n    def __setattr__(self, attr, value):\n        if isinstance(self, CompoundModel):\n            param_names = self._param_names\n        param_names = self.param_names\n\n        if param_names is not None and attr in self.param_names:\n            param = self.__dict__[attr]\n            value = _tofloat(value)\n            if param._validator is not None:\n                param._validator(self, value)\n            # check consistency with previous shape and size\n            eshape = self._param_metrics[attr]['shape']\n            if eshape == ():\n                eshape = (1,)\n            vshape = np.array(value).shape\n            if vshape == ():\n                vshape = (1,)\n            esize = self._param_metrics[attr]['size']\n            if (np.size(value) != esize or\n                    self._strip_ones(vshape) != self._strip_ones(eshape)):\n                raise InputParameterError(\n                    \"Value for parameter {0} does not match shape or size\\n\"\n                    \"expected by model ({1}, {2}) vs ({3}, {4})\".format(\n                        attr, vshape, np.size(value), eshape, esize))\n            if param.unit is None:\n                if isinstance(value, Quantity):\n                    param._unit = value.unit\n                    param.value = value.value\n                else:\n                    param.value = value\n            else:\n                if not isinstance(value, Quantity):\n                    raise UnitsError(f\"The '{param.name}' parameter should be given as a\"\n                                     \" Quantity because it was originally \"\n                                     \"initialized as a Quantity\")\n                param._unit = value.unit\n                param.value = value.value\n        else:\n            if attr in ['fittable', 'linear']:\n                self.__dict__[attr] = value\n            else:\n                super().__setattr__(attr, value)\n\n    def _pre_evaluate(self, *args, **kwargs):\n        \"\"\"\n        Model specific input setup that needs to occur prior to model evaluation\n        \"\"\"\n\n        # Broadcast inputs into common size\n        inputs, broadcasted_shapes = self.prepare_inputs(*args, **kwargs)\n\n        # Setup actual model evaluation method\n        parameters = self._param_sets(raw=True, units=True)\n\n        def evaluate(_inputs):\n            return self.evaluate(*chain(_inputs, parameters))\n\n        return evaluate, inputs, broadcasted_shapes, kwargs\n\n    def get_bounding_box(self, with_bbox=True):\n        \"\"\"\n        Return the ``bounding_box`` of a model if it exists or ``None``\n        otherwise.\n\n        Parameters\n        ----------\n        with_bbox :\n            The value of the ``with_bounding_box`` keyword argument\n            when calling the model. Default is `True` for usage when\n            looking up the model's ``bounding_box`` without risk of error.\n        \"\"\"\n        bbox = None\n\n        if not isinstance(with_bbox, bool) or with_bbox:\n            try:\n                bbox = self.bounding_box\n            except NotImplementedError:\n                pass\n\n            if isinstance(bbox, CompoundBoundingBox) and not isinstance(with_bbox, bool):\n                bbox = bbox[with_bbox]\n\n        return bbox\n\n    @property\n    def _argnames(self):\n        \"\"\"The inputs used to determine input_shape for bounding_box evaluation\"\"\"\n        return self.inputs\n\n    def _validate_input_shape(self, _input, idx, argnames, model_set_axis, check_model_set_axis):\n        \"\"\"\n        Perform basic validation of a single model input's shape\n            -- it has the minimum dimensions for the given model_set_axis\n\n        Returns the shape of the input if validation succeeds.\n        \"\"\"\n        input_shape = np.shape(_input)\n        # Ensure that the input's model_set_axis matches the model's\n        # n_models\n        if input_shape and check_model_set_axis:\n            # Note: Scalar inputs *only* get a pass on this\n            if len(input_shape) < model_set_axis + 1:\n                raise ValueError(\n                    f\"For model_set_axis={model_set_axis}, all inputs must be at \"\n                    f\"least {model_set_axis + 1}-dimensional.\")\n            if input_shape[model_set_axis] != self._n_models:\n                try:\n                    argname = argnames[idx]\n                except IndexError:\n                    # the case of model.inputs = ()\n                    argname = str(idx)\n\n                raise ValueError(\n                    f\"Input argument '{argname}' does not have the correct \"\n                    f\"dimensions in model_set_axis={model_set_axis} for a model set with \"\n                    f\"n_models={self._n_models}.\")\n\n        return input_shape\n\n    def _validate_input_shapes(self, inputs, argnames, model_set_axis):\n        \"\"\"\n        Perform basic validation of model inputs\n            --that they are mutually broadcastable and that they have\n            the minimum dimensions for the given model_set_axis.\n\n        If validation succeeds, returns the total shape that will result from\n        broadcasting the input arrays with each other.\n        \"\"\"\n\n        check_model_set_axis = self._n_models > 1 and model_set_axis is not False\n\n        all_shapes = []\n        for idx, _input in enumerate(inputs):\n            all_shapes.append(self._validate_input_shape(_input, idx, argnames,\n                                                         model_set_axis, check_model_set_axis))\n\n        input_shape = check_broadcast(*all_shapes)\n        if input_shape is None:\n            raise ValueError(\n                \"All inputs must have identical shapes or must be scalars.\")\n\n        return input_shape\n\n    def input_shape(self, inputs):\n        \"\"\"Get input shape for bounding_box evaluation\"\"\"\n        return self._validate_input_shapes(inputs, self._argnames, self.model_set_axis)\n\n    def _generic_evaluate(self, evaluate, _inputs, fill_value, with_bbox):\n        \"\"\"\n        Generic model evaluation routine\n            Selects and evaluates model with or without bounding_box enforcement\n        \"\"\"\n\n        # Evaluate the model using the prepared evaluation method either\n        #   enforcing the bounding_box or not.\n        bbox = self.get_bounding_box(with_bbox)\n        if (not isinstance(with_bbox, bool) or with_bbox) and bbox is not None:\n            outputs = bbox.evaluate(evaluate, _inputs, fill_value)\n        else:\n            outputs = evaluate(_inputs)\n        return outputs\n\n    def _post_evaluate(self, inputs, outputs, broadcasted_shapes, with_bbox, **kwargs):\n        \"\"\"\n        Model specific post evaluation processing of outputs\n        \"\"\"\n        if self.get_bounding_box(with_bbox) is None and self.n_outputs == 1:\n            outputs = (outputs,)\n\n        outputs = self.prepare_outputs(broadcasted_shapes, *outputs, **kwargs)\n        outputs = self._process_output_units(inputs, outputs)\n\n        if self.n_outputs == 1:\n            return outputs[0]\n        return outputs\n\n    @property\n    def bbox_with_units(self):\n        return (not isinstance(self, CompoundModel))\n\n    def __call__(self, *args, **kwargs):\n        \"\"\"\n        Evaluate this model using the given input(s) and the parameter values\n        that were specified when the model was instantiated.\n        \"\"\"\n        # Turn any keyword arguments into positional arguments.\n        args, kwargs = self._get_renamed_inputs_as_positional(*args, **kwargs)\n\n        # Read model evaluation related parameters\n        with_bbox = kwargs.pop('with_bounding_box', False)\n        fill_value = kwargs.pop('fill_value', np.nan)\n\n        # prepare for model evaluation (overridden in CompoundModel)\n        evaluate, inputs, broadcasted_shapes, kwargs = self._pre_evaluate(*args, **kwargs)\n\n        outputs = self._generic_evaluate(evaluate, inputs,\n                                         fill_value, with_bbox)\n\n        # post-process evaluation results (overridden in CompoundModel)\n        return self._post_evaluate(inputs, outputs, broadcasted_shapes, with_bbox, **kwargs)\n\n    def _get_renamed_inputs_as_positional(self, *args, **kwargs):\n        def _keyword2positional(kwargs):\n            # Inputs were passed as keyword (not positional) arguments.\n            # Because the signature of the ``__call__`` is defined at\n            # the class level, the name of the inputs cannot be changed at\n            # the instance level and the old names are always present in the\n            # signature of the method. In order to use the new names of the\n            # inputs, the old names are taken out of ``kwargs``, the input\n            # values are sorted in the order of self.inputs and passed as\n            # positional arguments to ``__call__``.\n\n            # These are the keys that are always present as keyword arguments.\n            keys = ['model_set_axis', 'with_bounding_box', 'fill_value',\n                    'equivalencies', 'inputs_map']\n\n            new_inputs = {}\n            # kwargs contain the names of the new inputs + ``keys``\n            allkeys = list(kwargs.keys())\n            # Remove the names of the new inputs from kwargs and save them\n            # to a dict ``new_inputs``.\n            for key in allkeys:\n                if key not in keys:\n                    new_inputs[key] = kwargs[key]\n                    del kwargs[key]\n            return new_inputs, kwargs\n        n_args = len(args)\n\n        new_inputs, kwargs = _keyword2positional(kwargs)\n        n_all_args = n_args + len(new_inputs)\n\n        if n_all_args < self.n_inputs:\n            raise ValueError(f\"Missing input arguments - expected {self.n_inputs}, got {n_all_args}\")\n        elif n_all_args > self.n_inputs:\n            raise ValueError(f\"Too many input arguments - expected {self.n_inputs}, got {n_all_args}\")\n        if n_args == 0:\n            # Create positional arguments from the keyword arguments in ``new_inputs``.\n            new_args = []\n            for k in self.inputs:\n                new_args.append(new_inputs[k])\n        elif n_args != self.n_inputs:\n            # Some inputs are passed as positional, others as keyword arguments.\n            args = list(args)\n\n            # Create positional arguments from the keyword arguments in ``new_inputs``.\n            new_args = []\n            for k in self.inputs:\n                if k in new_inputs:\n                    new_args.append(new_inputs[k])\n                else:\n                    new_args.append(args[0])\n                    del args[0]\n        else:\n            new_args = args\n        return new_args, kwargs\n\n    # *** Properties ***\n    @property\n    def name(self):\n        \"\"\"User-provided name for this model instance.\"\"\"\n\n        return self._name\n\n    @name.setter\n    def name(self, val):\n        \"\"\"Assign a (new) name to this model.\"\"\"\n\n        self._name = val\n\n    @property\n    def model_set_axis(self):\n        \"\"\"\n        The index of the model set axis--that is the axis of a parameter array\n        that pertains to which model a parameter value pertains to--as\n        specified when the model was initialized.\n\n        See the documentation on :ref:`astropy:modeling-model-sets`\n        for more details.\n        \"\"\"\n\n        return self._model_set_axis\n\n    @property\n    def param_sets(self):\n        \"\"\"\n        Return parameters as a pset.\n\n        This is a list with one item per parameter set, which is an array of\n        that parameter's values across all parameter sets, with the last axis\n        associated with the parameter set.\n        \"\"\"\n\n        return self._param_sets()\n\n    @property\n    def parameters(self):\n        \"\"\"\n        A flattened array of all parameter values in all parameter sets.\n\n        Fittable parameters maintain this list and fitters modify it.\n        \"\"\"\n\n        # Currently the sequence of a model's parameters must be contiguous\n        # within the _parameters array (which may be a view of a larger array,\n        # for example when taking a sub-expression of a compound model), so\n        # the assumption here is reliable:\n        if not self.param_names:\n            # Trivial, but not unheard of\n            return self._parameters\n\n        self._parameters_to_array()\n        start = self._param_metrics[self.param_names[0]]['slice'].start\n        stop = self._param_metrics[self.param_names[-1]]['slice'].stop\n\n        return self._parameters[start:stop]\n\n    @parameters.setter\n    def parameters(self, value):\n        \"\"\"\n        Assigning to this attribute updates the parameters array rather than\n        replacing it.\n        \"\"\"\n\n        if not self.param_names:\n            return\n\n        start = self._param_metrics[self.param_names[0]]['slice'].start\n        stop = self._param_metrics[self.param_names[-1]]['slice'].stop\n\n        try:\n            value = np.array(value).flatten()\n            self._parameters[start:stop] = value\n        except ValueError as e:\n            raise InputParameterError(\n                \"Input parameter values not compatible with the model \"\n                \"parameters array: {0}\".format(e))\n        self._array_to_parameters()\n\n    @property\n    def sync_constraints(self):\n        '''\n        This is a boolean property that indicates whether or not accessing constraints\n        automatically check the constituent models current values. It defaults to True\n        on creation of a model, but for fitting purposes it should be set to False\n        for performance reasons.\n        '''\n        if not hasattr(self, '_sync_constraints'):\n            self._sync_constraints = True\n        return self._sync_constraints\n\n    @sync_constraints.setter\n    def sync_constraints(self, value):\n        if not isinstance(value, bool):\n            raise ValueError('sync_constraints only accepts True or False as values')\n        self._sync_constraints = value\n\n    @property\n    def fixed(self):\n        \"\"\"\n        A ``dict`` mapping parameter names to their fixed constraint.\n        \"\"\"\n        if not hasattr(self, '_fixed') or self.sync_constraints:\n            self._fixed = _ConstraintsDict(self, 'fixed')\n        return self._fixed\n\n    @property\n    def bounds(self):\n        \"\"\"\n        A ``dict`` mapping parameter names to their upper and lower bounds as\n        ``(min, max)`` tuples or ``[min, max]`` lists.\n        \"\"\"\n        if not hasattr(self, '_bounds') or self.sync_constraints:\n            self._bounds = _ConstraintsDict(self, 'bounds')\n        return self._bounds\n\n    @property\n    def tied(self):\n        \"\"\"\n        A ``dict`` mapping parameter names to their tied constraint.\n        \"\"\"\n        if not hasattr(self, '_tied') or self.sync_constraints:\n            self._tied = _ConstraintsDict(self, 'tied')\n        return self._tied\n\n    @property\n    def eqcons(self):\n        \"\"\"List of parameter equality constraints.\"\"\"\n\n        return self._mconstraints['eqcons']\n\n    @property\n    def ineqcons(self):\n        \"\"\"List of parameter inequality constraints.\"\"\"\n\n        return self._mconstraints['ineqcons']\n\n    def has_inverse(self):\n        \"\"\"\n        Returns True if the model has an analytic or user\n        inverse defined.\n        \"\"\"\n        try:\n            self.inverse\n        except NotImplementedError:\n            return False\n\n        return True\n\n    @property\n    def inverse(self):\n        \"\"\"\n        Returns a new `~astropy.modeling.Model` instance which performs the\n        inverse transform, if an analytic inverse is defined for this model.\n\n        Even on models that don't have an inverse defined, this property can be\n        set with a manually-defined inverse, such a pre-computed or\n        experimentally determined inverse (often given as a\n        `~astropy.modeling.polynomial.PolynomialModel`, but not by\n        requirement).\n\n        A custom inverse can be deleted with ``del model.inverse``.  In this\n        case the model's inverse is reset to its default, if a default exists\n        (otherwise the default is to raise `NotImplementedError`).\n\n        Note to authors of `~astropy.modeling.Model` subclasses:  To define an\n        inverse for a model simply override this property to return the\n        appropriate model representing the inverse.  The machinery that will\n        make the inverse manually-overridable is added automatically by the\n        base class.\n        \"\"\"\n        if self._user_inverse is not None:\n            return self._user_inverse\n        elif self._inverse is not None:\n            result = self._inverse()\n            if result is not NotImplemented:\n                if not self._has_inverse_bounding_box:\n                    result.bounding_box = None\n                return result\n\n        raise NotImplementedError(\"No analytical or user-supplied inverse transform \"\n                                  \"has been implemented for this model.\")\n\n    @inverse.setter\n    def inverse(self, value):\n        if not isinstance(value, (Model, type(None))):\n            raise ValueError(\n                \"The ``inverse`` attribute may be assigned a `Model` \"\n                \"instance or `None` (where `None` explicitly forces the \"\n                \"model to have no inverse.\")\n\n        self._user_inverse = value\n\n    @inverse.deleter\n    def inverse(self):\n        \"\"\"\n        Resets the model's inverse to its default (if one exists, otherwise\n        the model will have no inverse).\n        \"\"\"\n\n        try:\n            del self._user_inverse\n        except AttributeError:\n            pass\n\n    @property\n    def has_user_inverse(self):\n        \"\"\"\n        A flag indicating whether or not a custom inverse model has been\n        assigned to this model by a user, via assignment to ``model.inverse``.\n        \"\"\"\n        return self._user_inverse is not None\n\n    @property\n    def bounding_box(self):\n        r\"\"\"\n        A `tuple` of length `n_inputs` defining the bounding box limits, or\n        raise `NotImplementedError` for no bounding_box.\n\n        The default limits are given by a ``bounding_box`` property or method\n        defined in the class body of a specific model.  If not defined then\n        this property just raises `NotImplementedError` by default (but may be\n        assigned a custom value by a user).  ``bounding_box`` can be set\n        manually to an array-like object of shape ``(model.n_inputs, 2)``. For\n        further usage, see :ref:`astropy:bounding-boxes`\n\n        The limits are ordered according to the `numpy` ``'C'`` indexing\n        convention, and are the reverse of the model input order,\n        e.g. for inputs ``('x', 'y', 'z')``, ``bounding_box`` is defined:\n\n        * for 1D: ``(x_low, x_high)``\n        * for 2D: ``((y_low, y_high), (x_low, x_high))``\n        * for 3D: ``((z_low, z_high), (y_low, y_high), (x_low, x_high))``\n\n        Examples\n        --------\n\n        Setting the ``bounding_box`` limits for a 1D and 2D model:\n\n        >>> from astropy.modeling.models import Gaussian1D, Gaussian2D\n        >>> model_1d = Gaussian1D()\n        >>> model_2d = Gaussian2D(x_stddev=1, y_stddev=1)\n        >>> model_1d.bounding_box = (-5, 5)\n        >>> model_2d.bounding_box = ((-6, 6), (-5, 5))\n\n        Setting the bounding_box limits for a user-defined 3D `custom_model`:\n\n        >>> from astropy.modeling.models import custom_model\n        >>> def const3d(x, y, z, amp=1):\n        ...    return amp\n        ...\n        >>> Const3D = custom_model(const3d)\n        >>> model_3d = Const3D()\n        >>> model_3d.bounding_box = ((-6, 6), (-5, 5), (-4, 4))\n\n        To reset ``bounding_box`` to its default limits just delete the\n        user-defined value--this will reset it back to the default defined\n        on the class:\n\n        >>> del model_1d.bounding_box\n\n        To disable the bounding box entirely (including the default),\n        set ``bounding_box`` to `None`:\n\n        >>> model_1d.bounding_box = None\n        >>> model_1d.bounding_box  # doctest: +IGNORE_EXCEPTION_DETAIL\n        Traceback (most recent call last):\n        NotImplementedError: No bounding box is defined for this model\n        (note: the bounding box was explicitly disabled for this model;\n        use `del model.bounding_box` to restore the default bounding box,\n        if one is defined for this model).\n        \"\"\"\n\n        if self._user_bounding_box is not None:\n            if self._user_bounding_box is NotImplemented:\n                raise NotImplementedError(\n                    \"No bounding box is defined for this model (note: the \"\n                    \"bounding box was explicitly disabled for this model; \"\n                    \"use `del model.bounding_box` to restore the default \"\n                    \"bounding box, if one is defined for this model).\")\n            return self._user_bounding_box\n        elif self._bounding_box is None:\n            raise NotImplementedError(\n                \"No bounding box is defined for this model.\")\n        elif isinstance(self._bounding_box, ModelBoundingBox):\n            # This typically implies a hard-coded bounding box.  This will\n            # probably be rare, but it is an option\n            return self._bounding_box\n        elif isinstance(self._bounding_box, types.MethodType):\n            return ModelBoundingBox.validate(self, self._bounding_box())\n        else:\n            # The only other allowed possibility is that it's a ModelBoundingBox\n            # subclass, so we call it with its default arguments and return an\n            # instance of it (that can be called to recompute the bounding box\n            # with any optional parameters)\n            # (In other words, in this case self._bounding_box is a *class*)\n            bounding_box = self._bounding_box((), model=self)()\n            return self._bounding_box(bounding_box, model=self)\n\n    @bounding_box.setter\n    def bounding_box(self, bounding_box):\n        \"\"\"\n        Assigns the bounding box limits.\n        \"\"\"\n\n        if bounding_box is None:\n            cls = None\n            # We use this to explicitly set an unimplemented bounding box (as\n            # opposed to no user bounding box defined)\n            bounding_box = NotImplemented\n        elif (isinstance(bounding_box, CompoundBoundingBox) or\n              isinstance(bounding_box, dict)):\n            cls = CompoundBoundingBox\n        elif (isinstance(self._bounding_box, type) and\n              issubclass(self._bounding_box, ModelBoundingBox)):\n            cls = self._bounding_box\n        else:\n            cls = ModelBoundingBox\n\n        if cls is not None:\n            try:\n                bounding_box = cls.validate(self, bounding_box, _preserve_ignore=True)\n            except ValueError as exc:\n                raise ValueError(exc.args[0])\n\n        self._user_bounding_box = bounding_box\n\n    def set_slice_args(self, *args):\n        if isinstance(self._user_bounding_box, CompoundBoundingBox):\n            self._user_bounding_box.slice_args = args\n        else:\n            raise RuntimeError('The bounding_box for this model is not compound')\n\n    @bounding_box.deleter\n    def bounding_box(self):\n        self._user_bounding_box = None\n\n    @property\n    def has_user_bounding_box(self):\n        \"\"\"\n        A flag indicating whether or not a custom bounding_box has been\n        assigned to this model by a user, via assignment to\n        ``model.bounding_box``.\n        \"\"\"\n\n        return self._user_bounding_box is not None\n\n    @property\n    def cov_matrix(self):\n        \"\"\"\n        Fitter should set covariance matrix, if available.\n        \"\"\"\n        return self._cov_matrix\n\n    @cov_matrix.setter\n    def cov_matrix(self, cov):\n\n        self._cov_matrix = cov\n\n        unfix_untied_params = [p for p in self.param_names if (self.fixed[p] is False)\n                               and (self.tied[p] is False)]\n        if type(cov) == list:  # model set\n            param_stds = []\n            for c in cov:\n                param_stds.append([np.sqrt(x) if x > 0 else None for x in np.diag(c.cov_matrix)])\n            for p, param_name in enumerate(unfix_untied_params):\n                par = getattr(self, param_name)\n                par.std = [item[p] for item in param_stds]\n                setattr(self, param_name, par)\n        else:\n            param_stds = [np.sqrt(x) if x > 0 else None for x in np.diag(cov.cov_matrix)]\n            for param_name in unfix_untied_params:\n                par = getattr(self, param_name)\n                par.std = param_stds.pop(0)\n                setattr(self, param_name, par)\n\n    @property\n    def stds(self):\n        \"\"\"\n        Standard deviation of parameters, if covariance matrix is available.\n        \"\"\"\n        return self._stds\n\n    @stds.setter\n    def stds(self, stds):\n        self._stds = stds\n\n    @property\n    def separable(self):\n        \"\"\" A flag indicating whether a model is separable.\"\"\"\n\n        if self._separable is not None:\n            return self._separable\n        raise NotImplementedError(\n            'The \"separable\" property is not defined for '\n            'model {}'.format(self.__class__.__name__))\n\n    # *** Public methods ***\n\n    def without_units_for_data(self, **kwargs):\n        \"\"\"\n        Return an instance of the model for which the parameter values have\n        been converted to the right units for the data, then the units have\n        been stripped away.\n\n        The input and output Quantity objects should be given as keyword\n        arguments.\n\n        Notes\n        -----\n\n        This method is needed in order to be able to fit models with units in\n        the parameters, since we need to temporarily strip away the units from\n        the model during the fitting (which might be done by e.g. scipy\n        functions).\n\n        The units that the parameters should be converted to are not\n        necessarily the units of the input data, but are derived from them.\n        Model subclasses that want fitting to work in the presence of\n        quantities need to define a ``_parameter_units_for_data_units`` method\n        that takes the input and output units (as two dictionaries) and\n        returns a dictionary giving the target units for each parameter.\n\n        \"\"\"\n        model = self.copy()\n\n        inputs_unit = {inp: getattr(kwargs[inp], 'unit', dimensionless_unscaled)\n                       for inp in self.inputs if kwargs[inp] is not None}\n\n        outputs_unit = {out: getattr(kwargs[out], 'unit', dimensionless_unscaled)\n                        for out in self.outputs if kwargs[out] is not None}\n        parameter_units = self._parameter_units_for_data_units(inputs_unit,\n                                                               outputs_unit)\n        for name, unit in parameter_units.items():\n            parameter = getattr(model, name)\n            if parameter.unit is not None:\n                parameter.value = parameter.quantity.to(unit).value\n                parameter._set_unit(None, force=True)\n\n        if isinstance(model, CompoundModel):\n            model.strip_units_from_tree()\n\n        return model\n\n    def output_units(self, **kwargs):\n        \"\"\"\n        Return a dictionary of output units for this model given a dictionary\n        of fitting inputs and outputs\n\n        The input and output Quantity objects should be given as keyword\n        arguments.\n\n        Notes\n        -----\n\n        This method is needed in order to be able to fit models with units in\n        the parameters, since we need to temporarily strip away the units from\n        the model during the fitting (which might be done by e.g. scipy\n        functions).\n\n        This method will force extra model evaluations, which maybe computationally\n        expensive. To avoid this, one can add a return_units property to the model,\n        see :ref:`astropy:models_return_units`.\n        \"\"\"\n        units = self.return_units\n\n        if units is None or units == {}:\n            inputs = {inp: kwargs[inp] for inp in self.inputs}\n\n            values = self(**inputs)\n            if self.n_outputs == 1:\n                values = (values,)\n\n            units = {out: getattr(values[index], 'unit', dimensionless_unscaled)\n                     for index, out in enumerate(self.outputs)}\n\n        return units\n\n    def strip_units_from_tree(self):\n        for item in self._leaflist:\n            for parname in item.param_names:\n                par = getattr(item, parname)\n                par._set_unit(None, force=True)\n\n    def with_units_from_data(self, **kwargs):\n        \"\"\"\n        Return an instance of the model which has units for which the parameter\n        values are compatible with the data units specified.\n\n        The input and output Quantity objects should be given as keyword\n        arguments.\n\n        Notes\n        -----\n\n        This method is needed in order to be able to fit models with units in\n        the parameters, since we need to temporarily strip away the units from\n        the model during the fitting (which might be done by e.g. scipy\n        functions).\n\n        The units that the parameters will gain are not necessarily the units\n        of the input data, but are derived from them. Model subclasses that\n        want fitting to work in the presence of quantities need to define a\n        ``_parameter_units_for_data_units`` method that takes the input and output\n        units (as two dictionaries) and returns a dictionary giving the target\n        units for each parameter.\n        \"\"\"\n        model = self.copy()\n        inputs_unit = {inp: getattr(kwargs[inp], 'unit', dimensionless_unscaled)\n                       for inp in self.inputs if kwargs[inp] is not None}\n\n        outputs_unit = {out: getattr(kwargs[out], 'unit', dimensionless_unscaled)\n                        for out in self.outputs if kwargs[out] is not None}\n\n        parameter_units = self._parameter_units_for_data_units(inputs_unit,\n                                                               outputs_unit)\n\n        # We are adding units to parameters that already have a value, but we\n        # don't want to convert the parameter, just add the unit directly,\n        # hence the call to ``_set_unit``.\n        for name, unit in parameter_units.items():\n            parameter = getattr(model, name)\n            parameter._set_unit(unit, force=True)\n\n        return model\n\n    @property\n    def _has_units(self):\n        # Returns True if any of the parameters have units\n        for param in self.param_names:\n            if getattr(self, param).unit is not None:\n                return True\n        else:\n            return False\n\n    @property\n    def _supports_unit_fitting(self):\n        # If the model has a ``_parameter_units_for_data_units`` method, this\n        # indicates that we have enough information to strip the units away\n        # and add them back after fitting, when fitting quantities\n        return hasattr(self, '_parameter_units_for_data_units')\n\n    @abc.abstractmethod\n    def evaluate(self, *args, **kwargs):\n        \"\"\"Evaluate the model on some input variables.\"\"\"\n\n    def sum_of_implicit_terms(self, *args, **kwargs):\n        \"\"\"\n        Evaluate the sum of any implicit model terms on some input variables.\n        This includes any fixed terms used in evaluating a linear model that\n        do not have corresponding parameters exposed to the user. The\n        prototypical case is `astropy.modeling.functional_models.Shift`, which\n        corresponds to a function y = a + bx, where b=1 is intrinsically fixed\n        by the type of model, such that sum_of_implicit_terms(x) == x. This\n        method is needed by linear fitters to correct the dependent variable\n        for the implicit term(s) when solving for the remaining terms\n        (ie. a = y - bx).\n        \"\"\"\n\n    def render(self, out=None, coords=None):\n        \"\"\"\n        Evaluate a model at fixed positions, respecting the ``bounding_box``.\n\n        The key difference relative to evaluating the model directly is that\n        this method is limited to a bounding box if the `Model.bounding_box`\n        attribute is set.\n\n        Parameters\n        ----------\n        out : `numpy.ndarray`, optional\n            An array that the evaluated model will be added to.  If this is not\n            given (or given as ``None``), a new array will be created.\n        coords : array-like, optional\n            An array to be used to translate from the model's input coordinates\n            to the ``out`` array. It should have the property that\n            ``self(coords)`` yields the same shape as ``out``.  If ``out`` is\n            not specified, ``coords`` will be used to determine the shape of\n            the returned array. If this is not provided (or None), the model\n            will be evaluated on a grid determined by `Model.bounding_box`.\n\n        Returns\n        -------\n        out : `numpy.ndarray`\n            The model added to ``out`` if  ``out`` is not ``None``, or else a\n            new array from evaluating the model over ``coords``.\n            If ``out`` and ``coords`` are both `None`, the returned array is\n            limited to the `Model.bounding_box` limits. If\n            `Model.bounding_box` is `None`, ``arr`` or ``coords`` must be\n            passed.\n\n        Raises\n        ------\n        ValueError\n            If ``coords`` are not given and the the `Model.bounding_box` of\n            this model is not set.\n\n        Examples\n        --------\n        :ref:`astropy:bounding-boxes`\n        \"\"\"\n\n        try:\n            bbox = self.bounding_box\n        except NotImplementedError:\n            bbox = None\n\n        if isinstance(bbox, ModelBoundingBox):\n            bbox = bbox.bounding_box()\n\n        ndim = self.n_inputs\n\n        if (coords is None) and (out is None) and (bbox is None):\n            raise ValueError('If no bounding_box is set, '\n                             'coords or out must be input.')\n\n        # for consistent indexing\n        if ndim == 1:\n            if coords is not None:\n                coords = [coords]\n            if bbox is not None:\n                bbox = [bbox]\n\n        if coords is not None:\n            coords = np.asanyarray(coords, dtype=float)\n            # Check dimensions match out and model\n            assert len(coords) == ndim\n            if out is not None:\n                if coords[0].shape != out.shape:\n                    raise ValueError('inconsistent shape of the output.')\n            else:\n                out = np.zeros(coords[0].shape)\n\n        if out is not None:\n            out = np.asanyarray(out)\n            if out.ndim != ndim:\n                raise ValueError('the array and model must have the same '\n                                 'number of dimensions.')\n\n        if bbox is not None:\n            # Assures position is at center pixel,\n            # important when using add_array.\n            pd = np.array([(np.mean(bb), np.ceil((bb[1] - bb[0]) / 2))\n                           for bb in bbox]).astype(int).T\n            pos, delta = pd\n\n            if coords is not None:\n                sub_shape = tuple(delta * 2 + 1)\n                sub_coords = np.array([extract_array(c, sub_shape, pos)\n                                       for c in coords])\n            else:\n                limits = [slice(p - d, p + d + 1, 1) for p, d in pd.T]\n                sub_coords = np.mgrid[limits]\n\n            sub_coords = sub_coords[::-1]\n\n            if out is None:\n                out = self(*sub_coords)\n            else:\n                try:\n                    out = add_array(out, self(*sub_coords), pos)\n                except ValueError:\n                    raise ValueError(\n                        'The `bounding_box` is larger than the input out in '\n                        'one or more dimensions. Set '\n                        '`model.bounding_box = None`.')\n        else:\n            if coords is None:\n                im_shape = out.shape\n                limits = [slice(i) for i in im_shape]\n                coords = np.mgrid[limits]\n\n            coords = coords[::-1]\n\n            out += self(*coords)\n\n        return out\n\n    @property\n    def input_units(self):\n        \"\"\"\n        This property is used to indicate what units or sets of units the\n        evaluate method expects, and returns a dictionary mapping inputs to\n        units (or `None` if any units are accepted).\n\n        Model sub-classes can also use function annotations in evaluate to\n        indicate valid input units, in which case this property should\n        not be overridden since it will return the input units based on the\n        annotations.\n        \"\"\"\n        if hasattr(self, '_input_units'):\n            return self._input_units\n        elif hasattr(self.evaluate, '__annotations__'):\n            annotations = self.evaluate.__annotations__.copy()\n            annotations.pop('return', None)\n            if annotations:\n                # If there are not annotations for all inputs this will error.\n                return dict((name, annotations[name]) for name in self.inputs)\n        else:\n            # None means any unit is accepted\n            return None\n\n    @property\n    def return_units(self):\n        \"\"\"\n        This property is used to indicate what units or sets of units the\n        output of evaluate should be in, and returns a dictionary mapping\n        outputs to units (or `None` if any units are accepted).\n\n        Model sub-classes can also use function annotations in evaluate to\n        indicate valid output units, in which case this property should not be\n        overridden since it will return the return units based on the\n        annotations.\n        \"\"\"\n        if hasattr(self, '_return_units'):\n            return self._return_units\n        elif hasattr(self.evaluate, '__annotations__'):\n            return self.evaluate.__annotations__.get('return', None)\n        else:\n            # None means any unit is accepted\n            return None\n\n    def _prepare_inputs_single_model(self, params, inputs, **kwargs):\n        broadcasts = []\n        for idx, _input in enumerate(inputs):\n            input_shape = _input.shape\n\n            # Ensure that array scalars are always upgrade to 1-D arrays for the\n            # sake of consistency with how parameters work.  They will be cast back\n            # to scalars at the end\n            if not input_shape:\n                inputs[idx] = _input.reshape((1,))\n\n            if not params:\n                max_broadcast = input_shape\n            else:\n                max_broadcast = ()\n\n            for param in params:\n                try:\n                    if self.standard_broadcasting:\n                        broadcast = check_broadcast(input_shape, param.shape)\n                    else:\n                        broadcast = input_shape\n                except IncompatibleShapeError:\n                    raise ValueError(\n                        \"self input argument {0!r} of shape {1!r} cannot be \"\n                        \"broadcast with parameter {2!r} of shape \"\n                        \"{3!r}.\".format(self.inputs[idx], input_shape,\n                                        param.name, param.shape))\n\n                if len(broadcast) > len(max_broadcast):\n                    max_broadcast = broadcast\n                elif len(broadcast) == len(max_broadcast):\n                    max_broadcast = max(max_broadcast, broadcast)\n\n            broadcasts.append(max_broadcast)\n\n        if self.n_outputs > self.n_inputs:\n            extra_outputs = self.n_outputs - self.n_inputs\n            if not broadcasts:\n                # If there were no inputs then the broadcasts list is empty\n                # just add a None since there is no broadcasting of outputs and\n                # inputs necessary (see _prepare_outputs_single_self)\n                broadcasts.append(None)\n            broadcasts.extend([broadcasts[0]] * extra_outputs)\n\n        return inputs, (broadcasts,)\n\n    @staticmethod\n    def _remove_axes_from_shape(shape, axis):\n        \"\"\"\n        Given a shape tuple as the first input, construct a new one by  removing\n        that particular axis from the shape and all preceeding axes. Negative axis\n        numbers are permittted, where the axis is relative to the last axis.\n        \"\"\"\n        if len(shape) == 0:\n            return shape\n        if axis < 0:\n            axis = len(shape) + axis\n            return shape[:axis] + shape[axis+1:]\n        if axis >= len(shape):\n            axis = len(shape)-1\n        shape = shape[axis+1:]\n        return shape\n\n    def _prepare_inputs_model_set(self, params, inputs, model_set_axis_input,\n                                  **kwargs):\n        reshaped = []\n        pivots = []\n\n        model_set_axis_param = self.model_set_axis  # needed to reshape param\n        for idx, _input in enumerate(inputs):\n            max_param_shape = ()\n            if self._n_models > 1 and model_set_axis_input is not False:\n                # Use the shape of the input *excluding* the model axis\n                input_shape = (_input.shape[:model_set_axis_input] +\n                               _input.shape[model_set_axis_input + 1:])\n            else:\n                input_shape = _input.shape\n\n            for param in params:\n                try:\n                    check_broadcast(input_shape,\n                                    self._remove_axes_from_shape(param.shape,\n                                                                 model_set_axis_param))\n                except IncompatibleShapeError:\n                    raise ValueError(\n                        \"Model input argument {0!r} of shape {1!r} cannot be \"\n                        \"broadcast with parameter {2!r} of shape \"\n                        \"{3!r}.\".format(self.inputs[idx], input_shape,\n                                        param.name,\n                                        self._remove_axes_from_shape(param.shape,\n                                                                     model_set_axis_param)))\n\n                if len(param.shape) - 1 > len(max_param_shape):\n                    max_param_shape = self._remove_axes_from_shape(param.shape,\n                                                                   model_set_axis_param)\n\n            # We've now determined that, excluding the model_set_axis, the\n            # input can broadcast with all the parameters\n            input_ndim = len(input_shape)\n            if model_set_axis_input is False:\n                if len(max_param_shape) > input_ndim:\n                    # Just needs to prepend new axes to the input\n                    n_new_axes = 1 + len(max_param_shape) - input_ndim\n                    new_axes = (1,) * n_new_axes\n                    new_shape = new_axes + _input.shape\n                    pivot = model_set_axis_param\n                else:\n                    pivot = input_ndim - len(max_param_shape)\n                    new_shape = (_input.shape[:pivot] + (1,) +\n                                 _input.shape[pivot:])\n                new_input = _input.reshape(new_shape)\n            else:\n                if len(max_param_shape) >= input_ndim:\n                    n_new_axes = len(max_param_shape) - input_ndim\n                    pivot = self.model_set_axis\n                    new_axes = (1,) * n_new_axes\n                    new_shape = (_input.shape[:pivot + 1] + new_axes +\n                                 _input.shape[pivot + 1:])\n                    new_input = _input.reshape(new_shape)\n                else:\n                    pivot = _input.ndim - len(max_param_shape) - 1\n                    new_input = np.rollaxis(_input, model_set_axis_input,\n                                            pivot + 1)\n            pivots.append(pivot)\n            reshaped.append(new_input)\n\n        if self.n_inputs < self.n_outputs:\n            pivots.extend([model_set_axis_input] * (self.n_outputs - self.n_inputs))\n\n        return reshaped, (pivots,)\n\n    def prepare_inputs(self, *inputs, model_set_axis=None, equivalencies=None,\n                       **kwargs):\n        \"\"\"\n        This method is used in `~astropy.modeling.Model.__call__` to ensure\n        that all the inputs to the model can be broadcast into compatible\n        shapes (if one or both of them are input as arrays), particularly if\n        there are more than one parameter sets. This also makes sure that (if\n        applicable) the units of the input will be compatible with the evaluate\n        method.\n        \"\"\"\n        # When we instantiate the model class, we make sure that __call__ can\n        # take the following two keyword arguments: model_set_axis and\n        # equivalencies.\n        if model_set_axis is None:\n            # By default the model_set_axis for the input is assumed to be the\n            # same as that for the parameters the model was defined with\n            # TODO: Ensure that negative model_set_axis arguments are respected\n            model_set_axis = self.model_set_axis\n\n        params = [getattr(self, name) for name in self.param_names]\n        inputs = [np.asanyarray(_input, dtype=float) for _input in inputs]\n\n        self._validate_input_shapes(inputs, self.inputs, model_set_axis)\n\n        inputs_map = kwargs.get('inputs_map', None)\n\n        inputs = self._validate_input_units(inputs, equivalencies, inputs_map)\n\n        # The input formatting required for single models versus a multiple\n        # model set are different enough that they've been split into separate\n        # subroutines\n        if self._n_models == 1:\n            return self._prepare_inputs_single_model(params, inputs, **kwargs)\n        else:\n            return self._prepare_inputs_model_set(params, inputs,\n                                                  model_set_axis, **kwargs)\n\n    def _validate_input_units(self, inputs, equivalencies=None, inputs_map=None):\n        inputs = list(inputs)\n        name = self.name or self.__class__.__name__\n        # Check that the units are correct, if applicable\n\n        if self.input_units is not None:\n            # If a leaflist is provided that means this is in the context of\n            # a compound model and it is necessary to create the appropriate\n            # alias for the input coordinate name for the equivalencies dict\n            if inputs_map:\n                edict = {}\n                for mod, mapping in inputs_map:\n                    if self is mod:\n                        edict[mapping[0]] = equivalencies[mapping[1]]\n            else:\n                edict = equivalencies\n            # We combine any instance-level input equivalencies with user\n            # specified ones at call-time.\n            input_units_equivalencies = _combine_equivalency_dict(self.inputs,\n                                                                  edict,\n                                                                  self.input_units_equivalencies)\n\n            # We now iterate over the different inputs and make sure that their\n            # units are consistent with those specified in input_units.\n            for i in range(len(inputs)):\n\n                input_name = self.inputs[i]\n                input_unit = self.input_units.get(input_name, None)\n\n                if input_unit is None:\n                    continue\n\n                if isinstance(inputs[i], Quantity):\n\n                    # We check for consistency of the units with input_units,\n                    # taking into account any equivalencies\n\n                    if inputs[i].unit.is_equivalent(\n                            input_unit,\n                            equivalencies=input_units_equivalencies[input_name]):\n\n                        # If equivalencies have been specified, we need to\n                        # convert the input to the input units - this is\n                        # because some equivalencies are non-linear, and\n                        # we need to be sure that we evaluate the model in\n                        # its own frame of reference. If input_units_strict\n                        # is set, we also need to convert to the input units.\n                        if len(input_units_equivalencies) > 0 or self.input_units_strict[input_name]:\n                            inputs[i] = inputs[i].to(input_unit,\n                                                     equivalencies=input_units_equivalencies[input_name])\n\n                    else:\n\n                        # We consider the following two cases separately so as\n                        # to be able to raise more appropriate/nicer exceptions\n\n                        if input_unit is dimensionless_unscaled:\n                            raise UnitsError(\"{0}: Units of input '{1}', {2} ({3}),\"\n                                             \"could not be converted to \"\n                                             \"required dimensionless \"\n                                             \"input\".format(name,\n                                                            self.inputs[i],\n                                                            inputs[i].unit,\n                                                            inputs[i].unit.physical_type))\n                        else:\n                            raise UnitsError(\"{0}: Units of input '{1}', {2} ({3}),\"\n                                             \" could not be \"\n                                             \"converted to required input\"\n                                             \" units of {4} ({5})\".format(\n                                                 name,\n                                                 self.inputs[i],\n                                                 inputs[i].unit,\n                                                 inputs[i].unit.physical_type,\n                                                 input_unit,\n                                                 input_unit.physical_type))\n                else:\n\n                    # If we allow dimensionless input, we add the units to the\n                    # input values without conversion, otherwise we raise an\n                    # exception.\n\n                    if (not self.input_units_allow_dimensionless[input_name] and\n                        input_unit is not dimensionless_unscaled and\n                        input_unit is not None):\n                        if np.any(inputs[i] != 0):\n                            raise UnitsError(\"{0}: Units of input '{1}', (dimensionless), could not be \"\n                                             \"converted to required input units of \"\n                                             \"{2} ({3})\".format(name, self.inputs[i], input_unit,\n                                                                input_unit.physical_type))\n        return inputs\n\n    def _process_output_units(self, inputs, outputs):\n        inputs_are_quantity = any([isinstance(i, Quantity) for i in inputs])\n        if self.return_units and inputs_are_quantity:\n            # We allow a non-iterable unit only if there is one output\n            if self.n_outputs == 1 and not isiterable(self.return_units):\n                return_units = {self.outputs[0]: self.return_units}\n            else:\n                return_units = self.return_units\n\n            outputs = tuple([Quantity(out, return_units.get(out_name, None), subok=True)\n                             for out, out_name in zip(outputs, self.outputs)])\n        return outputs\n\n    @staticmethod\n    def _prepare_output_single_model(output, broadcast_shape):\n        if broadcast_shape is not None:\n            if not broadcast_shape:\n                return output.item()\n            else:\n                try:\n                    return output.reshape(broadcast_shape)\n                except ValueError:\n                    try:\n                        return output.item()\n                    except ValueError:\n                        return output\n\n        return output\n\n    def _prepare_outputs_single_model(self, outputs, broadcasted_shapes):\n        outputs = list(outputs)\n        for idx, output in enumerate(outputs):\n            try:\n                broadcast_shape = check_broadcast(*broadcasted_shapes[0])\n            except (IndexError, TypeError):\n                broadcast_shape = broadcasted_shapes[0][idx]\n\n            outputs[idx] = self._prepare_output_single_model(output, broadcast_shape)\n\n        return tuple(outputs)\n\n    def _prepare_outputs_model_set(self, outputs, broadcasted_shapes, model_set_axis):\n        pivots = broadcasted_shapes[0]\n        # If model_set_axis = False was passed then use\n        # self._model_set_axis to format the output.\n        if model_set_axis is None or model_set_axis is False:\n            model_set_axis = self.model_set_axis\n        outputs = list(outputs)\n        for idx, output in enumerate(outputs):\n            pivot = pivots[idx]\n            if pivot < output.ndim and pivot != model_set_axis:\n                outputs[idx] = np.rollaxis(output, pivot,\n                                           model_set_axis)\n        return tuple(outputs)\n\n    def prepare_outputs(self, broadcasted_shapes, *outputs, **kwargs):\n        model_set_axis = kwargs.get('model_set_axis', None)\n\n        if len(self) == 1:\n            return self._prepare_outputs_single_model(outputs, broadcasted_shapes)\n        else:\n            return self._prepare_outputs_model_set(outputs, broadcasted_shapes, model_set_axis)\n\n    def copy(self):\n        \"\"\"\n        Return a copy of this model.\n\n        Uses a deep copy so that all model attributes, including parameter\n        values, are copied as well.\n        \"\"\"\n\n        return copy.deepcopy(self)\n\n    def deepcopy(self):\n        \"\"\"\n        Return a deep copy of this model.\n\n        \"\"\"\n\n        return self.copy()\n\n    @sharedmethod\n    def rename(self, name):\n        \"\"\"\n        Return a copy of this model with a new name.\n        \"\"\"\n        new_model = self.copy()\n        new_model._name = name\n        return new_model\n\n    def coerce_units(\n        self,\n        input_units=None,\n        return_units=None,\n        input_units_equivalencies=None,\n        input_units_allow_dimensionless=False\n    ):\n        \"\"\"\n        Attach units to this (unitless) model.\n\n        Parameters\n        ----------\n        input_units : dict or tuple, optional\n            Input units to attach.  If dict, each key is the name of a model input,\n            and the value is the unit to attach.  If tuple, the elements are units\n            to attach in order corresponding to `Model.inputs`.\n        return_units : dict or tuple, optional\n            Output units to attach.  If dict, each key is the name of a model output,\n            and the value is the unit to attach.  If tuple, the elements are units\n            to attach in order corresponding to `Model.outputs`.\n        input_units_equivalencies : dict, optional\n            Default equivalencies to apply to input values.  If set, this should be a\n            dictionary where each key is a string that corresponds to one of the\n            model inputs.\n        input_units_allow_dimensionless : bool or dict, optional\n            Allow dimensionless input. If this is True, input values to evaluate will\n            gain the units specified in input_units. If this is a dictionary then it\n            should map input name to a bool to allow dimensionless numbers for that\n            input.\n\n        Returns\n        -------\n        `CompoundModel`\n            A `CompoundModel` composed of the current model plus\n            `~astropy.modeling.mappings.UnitsMapping` model(s) that attach the units.\n\n        Raises\n        ------\n        ValueError\n            If the current model already has units.\n\n        Examples\n        --------\n\n        Wrapping a unitless model to require and convert units:\n\n        >>> from astropy.modeling.models import Polynomial1D\n        >>> from astropy import units as u\n        >>> poly = Polynomial1D(1, c0=1, c1=2)\n        >>> model = poly.coerce_units((u.m,), (u.s,))\n        >>> model(u.Quantity(10, u.m))  # doctest: +FLOAT_CMP\n        <Quantity 21. s>\n        >>> model(u.Quantity(1000, u.cm))  # doctest: +FLOAT_CMP\n        <Quantity 21. s>\n        >>> model(u.Quantity(10, u.cm))  # doctest: +FLOAT_CMP\n        <Quantity 1.2 s>\n\n        Wrapping a unitless model but still permitting unitless input:\n\n        >>> from astropy.modeling.models import Polynomial1D\n        >>> from astropy import units as u\n        >>> poly = Polynomial1D(1, c0=1, c1=2)\n        >>> model = poly.coerce_units((u.m,), (u.s,), input_units_allow_dimensionless=True)\n        >>> model(u.Quantity(10, u.m))  # doctest: +FLOAT_CMP\n        <Quantity 21. s>\n        >>> model(10)  # doctest: +FLOAT_CMP\n        <Quantity 21. s>\n        \"\"\"\n        from .mappings import UnitsMapping\n\n        result = self\n\n        if input_units is not None:\n            if self.input_units is not None:\n                model_units = self.input_units\n            else:\n                model_units = {}\n\n            for unit in [model_units.get(i) for i in self.inputs]:\n                if unit is not None and unit != dimensionless_unscaled:\n                    raise ValueError(\"Cannot specify input_units for model with existing input units\")\n\n            if isinstance(input_units, dict):\n                if input_units.keys() != set(self.inputs):\n                    message = (\n                        f\"\"\"input_units keys ({\", \".join(input_units.keys())}) \"\"\"\n                        f\"\"\"do not match model inputs ({\", \".join(self.inputs)})\"\"\"\n                    )\n                    raise ValueError(message)\n                input_units = [input_units[i] for i in self.inputs]\n\n            if len(input_units) != self.n_inputs:\n                message = (\n                    \"input_units length does not match n_inputs: \"\n                    f\"expected {self.n_inputs}, received {len(input_units)}\"\n                )\n                raise ValueError(message)\n\n            mapping = tuple((unit, model_units.get(i)) for i, unit in zip(self.inputs, input_units))\n            input_mapping = UnitsMapping(\n                mapping,\n                input_units_equivalencies=input_units_equivalencies,\n                input_units_allow_dimensionless=input_units_allow_dimensionless\n            )\n            input_mapping.inputs = self.inputs\n            input_mapping.outputs = self.inputs\n            result = input_mapping | result\n\n        if return_units is not None:\n            if self.return_units is not None:\n                model_units = self.return_units\n            else:\n                model_units = {}\n\n            for unit in [model_units.get(i) for i in self.outputs]:\n                if unit is not None and unit != dimensionless_unscaled:\n                    raise ValueError(\"Cannot specify return_units for model with existing output units\")\n\n            if isinstance(return_units, dict):\n                if return_units.keys() != set(self.outputs):\n                    message = (\n                        f\"\"\"return_units keys ({\", \".join(return_units.keys())}) \"\"\"\n                        f\"\"\"do not match model outputs ({\", \".join(self.outputs)})\"\"\"\n                    )\n                    raise ValueError(message)\n                return_units = [return_units[i] for i in self.outputs]\n\n            if len(return_units) != self.n_outputs:\n                message = (\n                    \"return_units length does not match n_outputs: \"\n                    f\"expected {self.n_outputs}, received {len(return_units)}\"\n                )\n                raise ValueError(message)\n\n            mapping = tuple((model_units.get(i), unit) for i, unit in zip(self.outputs, return_units))\n            return_mapping = UnitsMapping(mapping)\n            return_mapping.inputs = self.outputs\n            return_mapping.outputs = self.outputs\n            result = result | return_mapping\n\n        return result\n\n    @property\n    def n_submodels(self):\n        \"\"\"\n        Return the number of components in a single model, which is\n        obviously 1.\n        \"\"\"\n        return 1\n\n    def _initialize_constraints(self, kwargs):\n        \"\"\"\n        Pop parameter constraint values off the keyword arguments passed to\n        `Model.__init__` and store them in private instance attributes.\n        \"\"\"\n\n        # Pop any constraints off the keyword arguments\n        for constraint in self.parameter_constraints:\n            values = kwargs.pop(constraint, {})\n            for ckey, cvalue in values.items():\n                param = getattr(self, ckey)\n                setattr(param, constraint, cvalue)\n        self._mconstraints = {}\n        for constraint in self.model_constraints:\n            values = kwargs.pop(constraint, [])\n            self._mconstraints[constraint] = values\n\n    def _initialize_parameters(self, args, kwargs):\n        \"\"\"\n        Initialize the _parameters array that stores raw parameter values for\n        all parameter sets for use with vectorized fitting algorithms; on\n        FittableModels the _param_name attributes actually just reference\n        slices of this array.\n        \"\"\"\n        n_models = kwargs.pop('n_models', None)\n\n        if not (n_models is None or\n                (isinstance(n_models, (int, np.integer)) and n_models >= 1)):\n            raise ValueError(\n                \"n_models must be either None (in which case it is \"\n                \"determined from the model_set_axis of the parameter initial \"\n                \"values) or it must be a positive integer \"\n                \"(got {0!r})\".format(n_models))\n\n        model_set_axis = kwargs.pop('model_set_axis', None)\n        if model_set_axis is None:\n            if n_models is not None and n_models > 1:\n                # Default to zero\n                model_set_axis = 0\n            else:\n                # Otherwise disable\n                model_set_axis = False\n        else:\n            if not (model_set_axis is False or\n                    np.issubdtype(type(model_set_axis), np.integer)):\n                raise ValueError(\n                    \"model_set_axis must be either False or an integer \"\n                    \"specifying the parameter array axis to map to each \"\n                    \"model in a set of models (got {0!r}).\".format(\n                        model_set_axis))\n\n        # Process positional arguments by matching them up with the\n        # corresponding parameters in self.param_names--if any also appear as\n        # keyword arguments this presents a conflict\n        params = set()\n        if len(args) > len(self.param_names):\n            raise TypeError(\n                \"{0}.__init__() takes at most {1} positional arguments ({2} \"\n                \"given)\".format(self.__class__.__name__, len(self.param_names),\n                                len(args)))\n\n        self._model_set_axis = model_set_axis\n        self._param_metrics = defaultdict(dict)\n\n        for idx, arg in enumerate(args):\n            if arg is None:\n                # A value of None implies using the default value, if exists\n                continue\n            # We use quantity_asanyarray here instead of np.asanyarray because\n            # if any of the arguments are quantities, we need to return a\n            # Quantity object not a plain Numpy array.\n            param_name = self.param_names[idx]\n            params.add(param_name)\n            if not isinstance(arg, Parameter):\n                value = quantity_asanyarray(arg, dtype=float)\n            else:\n                value = arg\n            self._initialize_parameter_value(param_name, value)\n\n        # At this point the only remaining keyword arguments should be\n        # parameter names; any others are in error.\n        for param_name in self.param_names:\n            if param_name in kwargs:\n                if param_name in params:\n                    raise TypeError(\n                        \"{0}.__init__() got multiple values for parameter \"\n                        \"{1!r}\".format(self.__class__.__name__, param_name))\n                value = kwargs.pop(param_name)\n                if value is None:\n                    continue\n                # We use quantity_asanyarray here instead of np.asanyarray\n                # because if any of the arguments are quantities, we need\n                # to return a Quantity object not a plain Numpy array.\n                value = quantity_asanyarray(value, dtype=float)\n                params.add(param_name)\n                self._initialize_parameter_value(param_name, value)\n        # Now deal with case where param_name is not supplied by args or kwargs\n        for param_name in self.param_names:\n            if param_name not in params:\n                self._initialize_parameter_value(param_name, None)\n\n        if kwargs:\n            # If any keyword arguments were left over at this point they are\n            # invalid--the base class should only be passed the parameter\n            # values, constraints, and param_dim\n            for kwarg in kwargs:\n                # Just raise an error on the first unrecognized argument\n                raise TypeError(\n                    '{0}.__init__() got an unrecognized parameter '\n                    '{1!r}'.format(self.__class__.__name__, kwarg))\n\n        # Determine the number of model sets: If the model_set_axis is\n        # None then there is just one parameter set; otherwise it is determined\n        # by the size of that axis on the first parameter--if the other\n        # parameters don't have the right number of axes or the sizes of their\n        # model_set_axis don't match an error is raised\n        if model_set_axis is not False and n_models != 1 and params:\n            max_ndim = 0\n            if model_set_axis < 0:\n                min_ndim = abs(model_set_axis)\n            else:\n                min_ndim = model_set_axis + 1\n\n            for name in self.param_names:\n                value = getattr(self, name)\n                param_ndim = np.ndim(value)\n                if param_ndim < min_ndim:\n                    raise InputParameterError(\n                        \"All parameter values must be arrays of dimension \"\n                        \"at least {0} for model_set_axis={1} (the value \"\n                        \"given for {2!r} is only {3}-dimensional)\".format(\n                            min_ndim, model_set_axis, name, param_ndim))\n\n                max_ndim = max(max_ndim, param_ndim)\n\n                if n_models is None:\n                    # Use the dimensions of the first parameter to determine\n                    # the number of model sets\n                    n_models = value.shape[model_set_axis]\n                elif value.shape[model_set_axis] != n_models:\n                    raise InputParameterError(\n                        \"Inconsistent dimensions for parameter {0!r} for \"\n                        \"{1} model sets.  The length of axis {2} must be the \"\n                        \"same for all input parameter values\".format(\n                            name, n_models, model_set_axis))\n\n            self._check_param_broadcast(max_ndim)\n        else:\n            if n_models is None:\n                n_models = 1\n\n            self._check_param_broadcast(None)\n\n        self._n_models = n_models\n        # now validate parameters\n        for name in params:\n            param = getattr(self, name)\n            if param._validator is not None:\n                param._validator(self, param.value)\n\n    def _initialize_parameter_value(self, param_name, value):\n        \"\"\"Mostly deals with consistency checks and determining unit issues.\"\"\"\n        if isinstance(value, Parameter):\n            self.__dict__[param_name] = value\n            return\n        param = getattr(self, param_name)\n        # Use default if value is not provided\n        if value is None:\n            default = param.default\n            if default is None:\n                # No value was supplied for the parameter and the\n                # parameter does not have a default, therefore the model\n                # is underspecified\n                raise TypeError(\"{0}.__init__() requires a value for parameter \"\n                                \"{1!r}\".format(self.__class__.__name__, param_name))\n            value = default\n            unit = param.unit\n        else:\n            if isinstance(value, Quantity):\n                unit = value.unit\n                value = value.value\n            else:\n                unit = None\n        if unit is None and param.unit is not None:\n            raise InputParameterError(\n                \"{0}.__init__() requires a Quantity for parameter \"\n                \"{1!r}\".format(self.__class__.__name__, param_name))\n        param._unit = unit\n        param.internal_unit = None\n        if param._setter is not None:\n            if unit is not None:\n                _val = param._setter(value * unit)\n            else:\n                _val = param._setter(value)\n            if isinstance(_val, Quantity):\n                param.internal_unit = _val.unit\n                param._internal_value = np.array(_val.value)\n            else:\n                param.internal_unit = None\n                param._internal_value = np.array(_val)\n        else:\n            param._value = np.array(value)\n\n    def _initialize_slices(self):\n\n        param_metrics = self._param_metrics\n        total_size = 0\n\n        for name in self.param_names:\n            param = getattr(self, name)\n            value = param.value\n            param_size = np.size(value)\n            param_shape = np.shape(value)\n            param_slice = slice(total_size, total_size + param_size)\n            param_metrics[name]['slice'] = param_slice\n            param_metrics[name]['shape'] = param_shape\n            param_metrics[name]['size'] = param_size\n            total_size += param_size\n        self._parameters = np.empty(total_size, dtype=np.float64)\n\n    def _parameters_to_array(self):\n        # Now set the parameter values (this will also fill\n        # self._parameters)\n        param_metrics = self._param_metrics\n        for name in self.param_names:\n            param = getattr(self, name)\n            value = param.value\n            if not isinstance(value, np.ndarray):\n                value = np.array([value])\n            self._parameters[param_metrics[name]['slice']] = value.ravel()\n\n        # Finally validate all the parameters; we do this last so that\n        # validators that depend on one of the other parameters' values will\n        # work\n\n    def _array_to_parameters(self):\n        param_metrics = self._param_metrics\n        for name in self.param_names:\n            param = getattr(self, name)\n            value = self._parameters[param_metrics[name]['slice']]\n            value.shape = param_metrics[name]['shape']\n            param.value = value\n\n    def _check_param_broadcast(self, max_ndim):\n        \"\"\"\n        This subroutine checks that all parameter arrays can be broadcast\n        against each other, and determines the shapes parameters must have in\n        order to broadcast correctly.\n\n        If model_set_axis is None this merely checks that the parameters\n        broadcast and returns an empty dict if so.  This mode is only used for\n        single model sets.\n        \"\"\"\n        all_shapes = []\n        model_set_axis = self._model_set_axis\n\n        for name in self.param_names:\n            param = getattr(self, name)\n            value = param.value\n            param_shape = np.shape(value)\n            param_ndim = len(param_shape)\n            if max_ndim is not None and param_ndim < max_ndim:\n                # All arrays have the same number of dimensions up to the\n                # model_set_axis dimension, but after that they may have a\n                # different number of trailing axes.  The number of trailing\n                # axes must be extended for mutual compatibility.  For example\n                # if max_ndim = 3 and model_set_axis = 0, an array with the\n                # shape (2, 2) must be extended to (2, 1, 2).  However, an\n                # array with shape (2,) is extended to (2, 1).\n                new_axes = (1,) * (max_ndim - param_ndim)\n\n                if model_set_axis < 0:\n                    # Just need to prepend axes to make up the difference\n                    broadcast_shape = new_axes + param_shape\n                else:\n                    broadcast_shape = (param_shape[:model_set_axis + 1] +\n                                       new_axes +\n                                       param_shape[model_set_axis + 1:])\n                self._param_metrics[name]['broadcast_shape'] = broadcast_shape\n                all_shapes.append(broadcast_shape)\n            else:\n                all_shapes.append(param_shape)\n\n        # Now check mutual broadcastability of all shapes\n        try:\n            check_broadcast(*all_shapes)\n        except IncompatibleShapeError as exc:\n            shape_a, shape_a_idx, shape_b, shape_b_idx = exc.args\n            param_a = self.param_names[shape_a_idx]\n            param_b = self.param_names[shape_b_idx]\n\n            raise InputParameterError(\n                \"Parameter {0!r} of shape {1!r} cannot be broadcast with \"\n                \"parameter {2!r} of shape {3!r}.  All parameter arrays \"\n                \"must have shapes that are mutually compatible according \"\n                \"to the broadcasting rules.\".format(param_a, shape_a,\n                                                    param_b, shape_b))\n\n    def _param_sets(self, raw=False, units=False):\n        \"\"\"\n        Implementation of the Model.param_sets property.\n\n        This internal implementation has a ``raw`` argument which controls\n        whether or not to return the raw parameter values (i.e. the values that\n        are actually stored in the ._parameters array, as opposed to the values\n        displayed to users.  In most cases these are one in the same but there\n        are currently a few exceptions.\n\n        Note: This is notably an overcomplicated device and may be removed\n        entirely in the near future.\n        \"\"\"\n\n        values = []\n        shapes = []\n        for name in self.param_names:\n            param = getattr(self, name)\n\n            if raw and param._setter:\n                value = param._internal_value\n            else:\n                value = param.value\n\n            broadcast_shape = self._param_metrics[name].get('broadcast_shape')\n            if broadcast_shape is not None:\n                value = value.reshape(broadcast_shape)\n\n            shapes.append(np.shape(value))\n\n            if len(self) == 1:\n                # Add a single param set axis to the parameter's value (thus\n                # converting scalars to shape (1,) array values) for\n                # consistency\n                value = np.array([value])\n\n            if units:\n                if raw and param.internal_unit is not None:\n                    unit = param.internal_unit\n                else:\n                    unit = param.unit\n                if unit is not None:\n                    value = Quantity(value, unit)\n\n            values.append(value)\n\n        if len(set(shapes)) != 1 or units:\n            # If the parameters are not all the same shape, converting to an\n            # array is going to produce an object array\n            # However the way Numpy creates object arrays is tricky in that it\n            # will recurse into array objects in the list and break them up\n            # into separate objects.  Doing things this way ensures a 1-D\n            # object array the elements of which are the individual parameter\n            # arrays.  There's not much reason to do this over returning a list\n            # except for consistency\n            psets = np.empty(len(values), dtype=object)\n            psets[:] = values\n            return psets\n\n        return np.array(values)\n\n    def _format_repr(self, args=[], kwargs={}, defaults={}):\n        \"\"\"\n        Internal implementation of ``__repr__``.\n\n        This is separated out for ease of use by subclasses that wish to\n        override the default ``__repr__`` while keeping the same basic\n        formatting.\n        \"\"\"\n\n        parts = [repr(a) for a in args]\n\n        parts.extend(\n            f\"{name}={param_repr_oneline(getattr(self, name))}\"\n            for name in self.param_names)\n\n        if self.name is not None:\n            parts.append(f'name={self.name!r}')\n\n        for kwarg, value in kwargs.items():\n            if kwarg in defaults and defaults[kwarg] == value:\n                continue\n            parts.append(f'{kwarg}={value!r}')\n\n        if len(self) > 1:\n            parts.append(f\"n_models={len(self)}\")\n\n        return f\"<{self.__class__.__name__}({', '.join(parts)})>\"\n\n    def _format_str(self, keywords=[], defaults={}):\n        \"\"\"\n        Internal implementation of ``__str__``.\n\n        This is separated out for ease of use by subclasses that wish to\n        override the default ``__str__`` while keeping the same basic\n        formatting.\n        \"\"\"\n\n        default_keywords = [\n            ('Model', self.__class__.__name__),\n            ('Name', self.name),\n            ('Inputs', self.inputs),\n            ('Outputs', self.outputs),\n            ('Model set size', len(self))\n        ]\n\n        parts = [f'{keyword}: {value}'\n                 for keyword, value in default_keywords\n                 if value is not None]\n\n        for keyword, value in keywords:\n            if keyword.lower() in defaults and defaults[keyword.lower()] == value:\n                continue\n            parts.append(f'{keyword}: {value}')\n        parts.append('Parameters:')\n\n        if len(self) == 1:\n            columns = [[getattr(self, name).value]\n                       for name in self.param_names]\n        else:\n            columns = [getattr(self, name).value\n                       for name in self.param_names]\n\n        if columns:\n            param_table = Table(columns, names=self.param_names)\n            # Set units on the columns\n            for name in self.param_names:\n                param_table[name].unit = getattr(self, name).unit\n            parts.append(indent(str(param_table), width=4))\n\n        return '\\n'.join(parts)\n\n\nclass FittableModel(Model):\n    \"\"\"\n    Base class for models that can be fitted using the built-in fitting\n    algorithms.\n    \"\"\"\n\n    linear = False\n    # derivative with respect to parameters\n    fit_deriv = None\n    \"\"\"\n    Function (similar to the model's `~Model.evaluate`) to compute the\n    derivatives of the model with respect to its parameters, for use by fitting\n    algorithms.  In other words, this computes the Jacobian matrix with respect\n    to the model's parameters.\n    \"\"\"\n    # Flag that indicates if the model derivatives with respect to parameters\n    # are given in columns or rows\n    col_fit_deriv = True\n    fittable = True\n\n\nclass Fittable1DModel(FittableModel):\n    \"\"\"\n    Base class for one-dimensional fittable models.\n\n    This class provides an easier interface to defining new models.\n    Examples can be found in `astropy.modeling.functional_models`.\n    \"\"\"\n    n_inputs = 1\n    n_outputs = 1\n    _separable = True\n\n\nclass Fittable2DModel(FittableModel):\n    \"\"\"\n    Base class for two-dimensional fittable models.\n\n    This class provides an easier interface to defining new models.\n    Examples can be found in `astropy.modeling.functional_models`.\n    \"\"\"\n\n    n_inputs = 2\n    n_outputs = 1\n\n\ndef _make_arithmetic_operator(oper):\n    # We don't bother with tuple unpacking here for efficiency's sake, but for\n    # documentation purposes:\n    #\n    #     f_eval, f_n_inputs, f_n_outputs = f\n    #\n    # and similarly for g\n    def op(f, g):\n        return (make_binary_operator_eval(oper, f[0], g[0]), f[1], f[2])\n\n    return op\n\n\ndef _composition_operator(f, g):\n    # We don't bother with tuple unpacking here for efficiency's sake, but for\n    # documentation purposes:\n    #\n    #     f_eval, f_n_inputs, f_n_outputs = f\n    #\n    # and similarly for g\n    return (lambda inputs, params: g[0](f[0](inputs, params), params),\n            f[1], g[2])\n\n\ndef _join_operator(f, g):\n    # We don't bother with tuple unpacking here for efficiency's sake, but for\n    # documentation purposes:\n    #\n    #     f_eval, f_n_inputs, f_n_outputs = f\n    #\n    # and similarly for g\n    return (lambda inputs, params: (f[0](inputs[:f[1]], params) +\n                                    g[0](inputs[f[1]:], params)),\n            f[1] + g[1], f[2] + g[2])\n\n\nBINARY_OPERATORS = {\n    '+': _make_arithmetic_operator(operator.add),\n    '-': _make_arithmetic_operator(operator.sub),\n    '*': _make_arithmetic_operator(operator.mul),\n    '/': _make_arithmetic_operator(operator.truediv),\n    '**': _make_arithmetic_operator(operator.pow),\n    '|': _composition_operator,\n    '&': _join_operator\n}\n\nSPECIAL_OPERATORS = _SpecialOperatorsDict()\n\n\ndef _add_special_operator(sop_name, sop):\n    return SPECIAL_OPERATORS.add(sop_name, sop)\n\n\nclass CompoundModel(Model):\n    '''\n    Base class for compound models.\n\n    While it can be used directly, the recommended way\n    to combine models is through the model operators.\n    '''\n\n    def __init__(self, op, left, right, name=None):\n        self.__dict__['_param_names'] = None\n        self._n_submodels = None\n        self.op = op\n        self.left = left\n        self.right = right\n        self._bounding_box = None\n        self._user_bounding_box = None\n        self._leaflist = None\n        self._tdict = None\n        self._parameters = None\n        self._parameters_ = None\n        self._param_metrics = None\n\n        if op != 'fix_inputs' and len(left) != len(right):\n            raise ValueError(\n                'Both operands must have equal values for n_models')\n        self._n_models = len(left)\n\n        if op != 'fix_inputs' and ((left.model_set_axis != right.model_set_axis)\n                                   or left.model_set_axis):  # not False and not 0\n            raise ValueError(\"model_set_axis must be False or 0 and consistent for operands\")\n        self._model_set_axis = left.model_set_axis\n\n        if op in ['+', '-', '*', '/', '**'] or op in SPECIAL_OPERATORS:\n            if (left.n_inputs != right.n_inputs) or \\\n               (left.n_outputs != right.n_outputs):\n                raise ModelDefinitionError(\n                    'Both operands must match numbers of inputs and outputs')\n            self.n_inputs = left.n_inputs\n            self.n_outputs = left.n_outputs\n            self.inputs = left.inputs\n            self.outputs = left.outputs\n        elif op == '&':\n            self.n_inputs = left.n_inputs + right.n_inputs\n            self.n_outputs = left.n_outputs + right.n_outputs\n            self.inputs = combine_labels(left.inputs, right.inputs)\n            self.outputs = combine_labels(left.outputs, right.outputs)\n        elif op == '|':\n            if left.n_outputs != right.n_inputs:\n                raise ModelDefinitionError(\n                    \"Unsupported operands for |: {0} (n_inputs={1}, \"\n                    \"n_outputs={2}) and {3} (n_inputs={4}, n_outputs={5}); \"\n                    \"n_outputs for the left-hand model must match n_inputs \"\n                    \"for the right-hand model.\".format(\n                        left.name, left.n_inputs, left.n_outputs, right.name,\n                        right.n_inputs, right.n_outputs))\n\n            self.n_inputs = left.n_inputs\n            self.n_outputs = right.n_outputs\n            self.inputs = left.inputs\n            self.outputs = right.outputs\n        elif op == 'fix_inputs':\n            if not isinstance(left, Model):\n                raise ValueError('First argument to \"fix_inputs\" must be an instance of an astropy Model.')\n            if not isinstance(right, dict):\n                raise ValueError('Expected a dictionary for second argument of \"fix_inputs\".')\n\n            # Dict keys must match either possible indices\n            # for model on left side, or names for inputs.\n            self.n_inputs = left.n_inputs - len(right)\n            # Assign directly to the private attribute (instead of using the setter)\n            # to avoid asserting the new number of outputs matches the old one.\n            self._outputs = left.outputs\n            self.n_outputs = left.n_outputs\n            newinputs = list(left.inputs)\n            keys = right.keys()\n            input_ind = []\n            for key in keys:\n                if np.issubdtype(type(key), np.integer):\n                    if key >= left.n_inputs or key < 0:\n                        raise ValueError(\n                            'Substitution key integer value '\n                            'not among possible input choices.')\n                    if key in input_ind:\n                        raise ValueError(\"Duplicate specification of \"\n                                         \"same input (index/name).\")\n                    input_ind.append(key)\n                elif isinstance(key, str):\n                    if key not in left.inputs:\n                        raise ValueError(\n                            'Substitution key string not among possible '\n                            'input choices.')\n                    # Check to see it doesn't match positional\n                    # specification.\n                    ind = left.inputs.index(key)\n                    if ind in input_ind:\n                        raise ValueError(\"Duplicate specification of \"\n                                         \"same input (index/name).\")\n                    input_ind.append(ind)\n            # Remove substituted inputs\n            input_ind.sort()\n            input_ind.reverse()\n            for ind in input_ind:\n                del newinputs[ind]\n            self.inputs = tuple(newinputs)\n            # Now check to see if the input model has bounding_box defined.\n            # If so, remove the appropriate dimensions and set it for this\n            # instance.\n            try:\n                self.bounding_box = \\\n                    self.left.bounding_box.fix_inputs(self, right)\n            except NotImplementedError:\n                pass\n\n        else:\n            raise ModelDefinitionError('Illegal operator: ', self.op)\n        self.name = name\n        self._fittable = None\n        self.fit_deriv = None\n        self.col_fit_deriv = None\n        if op in ('|', '+', '-'):\n            self.linear = left.linear and right.linear\n        else:\n            self.linear = False\n        self.eqcons = []\n        self.ineqcons = []\n        self.n_left_params = len(self.left.parameters)\n        self._map_parameters()\n\n    def _get_left_inputs_from_args(self, args):\n        return args[:self.left.n_inputs]\n\n    def _get_right_inputs_from_args(self, args):\n        op = self.op\n        if op == '&':\n            # Args expected to look like (*left inputs, *right inputs, *left params, *right params)\n            return args[self.left.n_inputs: self.left.n_inputs + self.right.n_inputs]\n        elif op == '|' or  op == 'fix_inputs':\n            return None\n        else:\n            return args[:self.left.n_inputs]\n\n    def _get_left_params_from_args(self, args):\n        op = self.op\n        if op == '&':\n            # Args expected to look like (*left inputs, *right inputs, *left params, *right params)\n            n_inputs = self.left.n_inputs + self.right.n_inputs\n            return args[n_inputs: n_inputs + self.n_left_params]\n        else:\n            return args[self.left.n_inputs: self.left.n_inputs + self.n_left_params]\n\n    def _get_right_params_from_args(self, args):\n        op = self.op\n        if op == 'fix_inputs':\n            return None\n        if op == '&':\n            # Args expected to look like (*left inputs, *right inputs, *left params, *right params)\n            return args[self.left.n_inputs + self.right.n_inputs + self.n_left_params:]\n        else:\n            return args[self.left.n_inputs + self.n_left_params:]\n\n    def _get_kwarg_model_parameters_as_positional(self, args, kwargs):\n        # could do it with inserts but rebuilding seems like simpilist way\n\n        #TODO: Check if any param names are in kwargs maybe as an intersection of sets?\n        if self.op == \"&\":\n            new_args = list(args[:self.left.n_inputs + self.right.n_inputs])\n            args_pos = self.left.n_inputs + self.right.n_inputs\n        else:\n            new_args = list(args[:self.left.n_inputs])\n            args_pos = self.left.n_inputs\n\n        for param_name in self.param_names:\n            kw_value = kwargs.pop(param_name, None)\n            if kw_value is not None:\n                value = kw_value\n            else:\n                try:\n                    value = args[args_pos]\n                except IndexError:\n                    raise IndexError(\"Missing parameter or input\")\n\n                args_pos += 1\n            new_args.append(value)\n\n        return new_args, kwargs\n\n    def _apply_operators_to_value_lists(self, leftval, rightval, **kw):\n        op = self.op\n        if op == '+':\n            return binary_operation(operator.add, leftval, rightval)\n        elif op == '-':\n            return binary_operation(operator.sub, leftval, rightval)\n        elif op == '*':\n            return binary_operation(operator.mul, leftval, rightval)\n        elif op == '/':\n            return binary_operation(operator.truediv, leftval, rightval)\n        elif op == '**':\n            return binary_operation(operator.pow, leftval, rightval)\n        elif op == '&':\n            if not isinstance(leftval, tuple):\n                leftval = (leftval,)\n            if not isinstance(rightval, tuple):\n                rightval = (rightval,)\n            return leftval + rightval\n        elif op in SPECIAL_OPERATORS:\n            return binary_operation(SPECIAL_OPERATORS[op], leftval, rightval)\n        else:\n            raise ModelDefinitionError('Unrecognized operator {op}')\n\n    def evaluate(self, *args, **kw):\n        op = self.op\n        args, kw = self._get_kwarg_model_parameters_as_positional(args, kw)\n        left_inputs = self._get_left_inputs_from_args(args)\n        left_params = self._get_left_params_from_args(args)\n\n        if op == 'fix_inputs':\n            pos_index = dict(zip(self.left.inputs, range(self.left.n_inputs)))\n            fixed_inputs = {\n                key if np.issubdtype(type(key), np.integer) else pos_index[key]: value\n                for key, value in self.right.items()\n            }\n            left_inputs = [\n                fixed_inputs[ind] if ind in fixed_inputs.keys() else inp\n                for ind, inp in enumerate(left_inputs)\n            ]\n\n        leftval = self.left.evaluate(*itertools.chain(left_inputs, left_params))\n\n        if op == 'fix_inputs':\n            return leftval\n\n        right_inputs = self._get_right_inputs_from_args(args)\n        right_params = self._get_right_params_from_args(args)\n\n        if op == \"|\":\n            if isinstance(leftval, tuple):\n                return self.right.evaluate(*itertools.chain(leftval, right_params))\n            else:\n                return self.right.evaluate(leftval, *right_params)\n        else:\n            rightval = self.right.evaluate(*itertools.chain(right_inputs, right_params))\n\n        return self._apply_operators_to_value_lists(leftval, rightval, **kw)\n\n    @property\n    def n_submodels(self):\n        if self._leaflist is None:\n            self._make_leaflist()\n        return len(self._leaflist)\n\n    @property\n    def submodel_names(self):\n        \"\"\" Return the names of submodels in a ``CompoundModel``.\"\"\"\n        if self._leaflist is None:\n            self._make_leaflist()\n        names = [item.name for item in self._leaflist]\n        nonecount = 0\n        newnames = []\n        for item in names:\n            if item is None:\n                newnames.append(f'None_{nonecount}')\n                nonecount += 1\n            else:\n                newnames.append(item)\n        return tuple(newnames)\n\n    def both_inverses_exist(self):\n        '''\n        if both members of this compound model have inverses return True\n        '''\n        warnings.warn(\n            \"CompoundModel.both_inverses_exist is deprecated. \"\n            \"Use has_inverse instead.\",\n            AstropyDeprecationWarning\n        )\n\n        try:\n            linv = self.left.inverse\n            rinv = self.right.inverse\n        except NotImplementedError:\n            return False\n\n        return True\n\n    def _pre_evaluate(self, *args, **kwargs):\n        \"\"\"\n        CompoundModel specific input setup that needs to occur prior to\n            model evaluation.\n\n        Note\n        ----\n            All of the _pre_evaluate for each component model will be\n            performed at the time that the individual model is evaluated.\n        \"\"\"\n\n        # If equivalencies are provided, necessary to map parameters and pass\n        # the leaflist as a keyword input for use by model evaluation so that\n        # the compound model input names can be matched to the model input\n        # names.\n        if 'equivalencies' in kwargs:\n            # Restructure to be useful for the individual model lookup\n            kwargs['inputs_map'] = [(value[0], (value[1], key)) for\n                                    key, value in self.inputs_map().items()]\n\n        # Setup actual model evaluation method\n        def evaluate(_inputs):\n            return self._evaluate(*_inputs, **kwargs)\n\n        return evaluate, args, None, kwargs\n\n    @property\n    def _argnames(self):\n        \"\"\"No inputs should be used to determine input_shape when handling compound models\"\"\"\n        return ()\n\n    def _post_evaluate(self, inputs, outputs, broadcasted_shapes, with_bbox, **kwargs):\n        \"\"\"\n        CompoundModel specific post evaluation processing of outputs\n\n        Note\n        ----\n            All of the _post_evaluate for each component model will be\n            performed at the time that the individual model is evaluated.\n        \"\"\"\n        if self.get_bounding_box(with_bbox) is not None and self.n_outputs == 1:\n            return outputs[0]\n        return outputs\n\n    def _evaluate(self, *args, **kw):\n        op = self.op\n        if op != 'fix_inputs':\n            if op != '&':\n                leftval = self.left(*args, **kw)\n                if op != '|':\n                    rightval = self.right(*args, **kw)\n                else:\n                    rightval = None\n\n            else:\n                leftval = self.left(*(args[:self.left.n_inputs]), **kw)\n                rightval = self.right(*(args[self.left.n_inputs:]), **kw)\n\n            if op != \"|\":\n                return self._apply_operators_to_value_lists(leftval, rightval, **kw)\n\n            elif op == '|':\n                if isinstance(leftval, tuple):\n                    return self.right(*leftval, **kw)\n                else:\n                    return self.right(leftval, **kw)\n\n        else:\n            subs = self.right\n            newargs = list(args)\n            subinds = []\n            subvals = []\n            for key in subs.keys():\n                if np.issubdtype(type(key), np.integer):\n                    subinds.append(key)\n                elif isinstance(key, str):\n                    ind = self.left.inputs.index(key)\n                    subinds.append(ind)\n                subvals.append(subs[key])\n            # Turn inputs specified in kw into positional indices.\n            # Names for compound inputs do not propagate to sub models.\n            kwind = []\n            kwval = []\n            for kwkey in list(kw.keys()):\n                if kwkey in self.inputs:\n                    ind = self.inputs.index(kwkey)\n                    if ind < len(args):\n                        raise ValueError(\"Keyword argument duplicates \"\n                                         \"positional value supplied.\")\n                    kwind.append(ind)\n                    kwval.append(kw[kwkey])\n                    del kw[kwkey]\n            # Build new argument list\n            # Append keyword specified args first\n            if kwind:\n                kwargs = list(zip(kwind, kwval))\n                kwargs.sort()\n                kwindsorted, kwvalsorted = list(zip(*kwargs))\n                newargs = newargs + list(kwvalsorted)\n            if subinds:\n                subargs = list(zip(subinds, subvals))\n                subargs.sort()\n                # subindsorted, subvalsorted = list(zip(*subargs))\n                # The substitutions must be inserted in order\n                for ind, val in subargs:\n                    newargs.insert(ind, val)\n            return self.left(*newargs, **kw)\n\n    @property\n    def param_names(self):\n        \"\"\" An ordered list of parameter names.\"\"\"\n        return self._param_names\n\n    def _make_leaflist(self):\n        tdict = {}\n        leaflist = []\n        make_subtree_dict(self, '', tdict, leaflist)\n        self._leaflist = leaflist\n        self._tdict = tdict\n\n    def __getattr__(self, name):\n        \"\"\"\n        If someone accesses an attribute not already defined, map the\n        parameters, and then see if the requested attribute is one of\n        the parameters\n        \"\"\"\n        # The following test is needed to avoid infinite recursion\n        # caused by deepcopy. There may be other such cases discovered.\n        if name == '__setstate__':\n            raise AttributeError\n        if name in self._param_names:\n            return self.__dict__[name]\n        else:\n            raise AttributeError(f'Attribute \"{name}\" not found')\n\n    def __getitem__(self, index):\n        if self._leaflist is None:\n            self._make_leaflist()\n        leaflist = self._leaflist\n        tdict = self._tdict\n        if isinstance(index, slice):\n            if index.step:\n                raise ValueError('Steps in slices not supported '\n                                 'for compound models')\n            if index.start is not None:\n                if isinstance(index.start, str):\n                    start = self._str_index_to_int(index.start)\n                else:\n                    start = index.start\n            else:\n                start = 0\n            if index.stop is not None:\n                if isinstance(index.stop, str):\n                    stop = self._str_index_to_int(index.stop)\n                else:\n                    stop = index.stop - 1\n            else:\n                stop = len(leaflist) - 1\n            if index.stop == 0:\n                raise ValueError(\"Slice endpoint cannot be 0\")\n            if start < 0:\n                start = len(leaflist) + start\n            if stop < 0:\n                stop = len(leaflist) + stop\n            # now search for matching node:\n            if stop == start:  # only single value, get leaf instead in code below\n                index = start\n            else:\n                for key in tdict:\n                    node, leftind, rightind = tdict[key]\n                    if leftind == start and rightind == stop:\n                        return node\n                raise IndexError(\"No appropriate subtree matches slice\")\n        if isinstance(index, type(0)):\n            return leaflist[index]\n        elif isinstance(index, type('')):\n            return leaflist[self._str_index_to_int(index)]\n        else:\n            raise TypeError('index must be integer, slice, or model name string')\n\n    def _str_index_to_int(self, str_index):\n        # Search through leaflist for item with that name\n        found = []\n        for nleaf, leaf in enumerate(self._leaflist):\n            if getattr(leaf, 'name', None) == str_index:\n                found.append(nleaf)\n        if len(found) == 0:\n            raise IndexError(f\"No component with name '{str_index}' found\")\n        if len(found) > 1:\n            raise IndexError(\"Multiple components found using '{}' as name\\n\"\n                             \"at indices {}\".format(str_index, found))\n        return found[0]\n\n    @property\n    def n_inputs(self):\n        \"\"\" The number of inputs of a model.\"\"\"\n        return self._n_inputs\n\n    @n_inputs.setter\n    def n_inputs(self, value):\n        self._n_inputs = value\n\n    @property\n    def n_outputs(self):\n        \"\"\" The number of outputs of a model.\"\"\"\n        return self._n_outputs\n\n    @n_outputs.setter\n    def n_outputs(self, value):\n        self._n_outputs = value\n\n    @property\n    def eqcons(self):\n        return self._eqcons\n\n    @eqcons.setter\n    def eqcons(self, value):\n        self._eqcons = value\n\n    @property\n    def ineqcons(self):\n        return self._eqcons\n\n    @ineqcons.setter\n    def ineqcons(self, value):\n        self._eqcons = value\n\n    def traverse_postorder(self, include_operator=False):\n        \"\"\" Postorder traversal of the CompoundModel tree.\"\"\"\n        res = []\n        if isinstance(self.left, CompoundModel):\n            res = res + self.left.traverse_postorder(include_operator)\n        else:\n            res = res + [self.left]\n        if isinstance(self.right, CompoundModel):\n            res = res + self.right.traverse_postorder(include_operator)\n        else:\n            res = res + [self.right]\n        if include_operator:\n            res.append(self.op)\n        else:\n            res.append(self)\n        return res\n\n    def _format_expression(self, format_leaf=None):\n        leaf_idx = 0\n        operands = deque()\n\n        if format_leaf is None:\n            format_leaf = lambda i, l: f'[{i}]'\n\n        for node in self.traverse_postorder():\n            if not isinstance(node, CompoundModel):\n                operands.append(format_leaf(leaf_idx, node))\n                leaf_idx += 1\n                continue\n\n            right = operands.pop()\n            left = operands.pop()\n            if node.op in OPERATOR_PRECEDENCE:\n                oper_order = OPERATOR_PRECEDENCE[node.op]\n\n                if isinstance(node, CompoundModel):\n                    if (isinstance(node.left, CompoundModel) and\n                            OPERATOR_PRECEDENCE[node.left.op] < oper_order):\n                        left = f'({left})'\n                    if (isinstance(node.right, CompoundModel) and\n                            OPERATOR_PRECEDENCE[node.right.op] < oper_order):\n                        right = f'({right})'\n\n                operands.append(' '.join((left, node.op, right)))\n            else:\n                left = f'(({left}),'\n                right = f'({right}))'\n                operands.append(' '.join((node.op[0], left, right)))\n\n        return ''.join(operands)\n\n    def _format_components(self):\n        if self._parameters_ is None:\n            self._map_parameters()\n        return '\\n\\n'.join('[{0}]: {1!r}'.format(idx, m)\n                           for idx, m in enumerate(self._leaflist))\n\n    def __str__(self):\n        expression = self._format_expression()\n        components = self._format_components()\n        keywords = [\n            ('Expression', expression),\n            ('Components', '\\n' + indent(components))\n        ]\n        return super()._format_str(keywords=keywords)\n\n    def rename(self, name):\n        self.name = name\n        return self\n\n    @property\n    def isleaf(self):\n        return False\n\n    @property\n    def inverse(self):\n        if self.op == '|':\n            return self.right.inverse | self.left.inverse\n        elif self.op == '&':\n            return self.left.inverse & self.right.inverse\n        else:\n            return NotImplemented\n\n    @property\n    def fittable(self):\n        \"\"\" Set the fittable attribute on a compound model.\"\"\"\n        if self._fittable is None:\n            if self._leaflist is None:\n                self._map_parameters()\n            self._fittable = all(m.fittable for m in self._leaflist)\n        return self._fittable\n\n    __add__ = _model_oper('+')\n    __sub__ = _model_oper('-')\n    __mul__ = _model_oper('*')\n    __truediv__ = _model_oper('/')\n    __pow__ = _model_oper('**')\n    __or__ = _model_oper('|')\n    __and__ = _model_oper('&')\n\n    def _map_parameters(self):\n        \"\"\"\n        Map all the constituent model parameters to the compound object,\n        renaming as necessary by appending a suffix number.\n\n        This can be an expensive operation, particularly for a complex\n        expression tree.\n\n        All the corresponding parameter attributes are created that one\n        expects for the Model class.\n\n        The parameter objects that the attributes point to are the same\n        objects as in the constiutent models. Changes made to parameter\n        values to either are seen by both.\n\n        Prior to calling this, none of the associated attributes will\n        exist. This method must be called to make the model usable by\n        fitting engines.\n\n        If oldnames=True, then parameters are named as in the original\n        implementation of compound models.\n        \"\"\"\n        if self._parameters is not None:\n            # do nothing\n            return\n        if self._leaflist is None:\n            self._make_leaflist()\n        self._parameters_ = {}\n        param_map = {}\n        self._param_names = []\n        for lindex, leaf in enumerate(self._leaflist):\n            if not isinstance(leaf, dict):\n                for param_name in leaf.param_names:\n                    param = getattr(leaf, param_name)\n                    new_param_name = f\"{param_name}_{lindex}\"\n                    self.__dict__[new_param_name] = param\n                    self._parameters_[new_param_name] = param\n                    self._param_names.append(new_param_name)\n                    param_map[new_param_name] = (lindex, param_name)\n        self._param_metrics = {}\n        self._param_map = param_map\n        self._param_map_inverse = dict((v, k) for k, v in param_map.items())\n        self._initialize_slices()\n        self._param_names = tuple(self._param_names)\n\n    def _initialize_slices(self):\n        param_metrics = self._param_metrics\n        total_size = 0\n\n        for name in self.param_names:\n            param = getattr(self, name)\n            value = param.value\n            param_size = np.size(value)\n            param_shape = np.shape(value)\n            param_slice = slice(total_size, total_size + param_size)\n            param_metrics[name] = {}\n            param_metrics[name]['slice'] = param_slice\n            param_metrics[name]['shape'] = param_shape\n            param_metrics[name]['size'] = param_size\n            total_size += param_size\n        self._parameters = np.empty(total_size, dtype=np.float64)\n\n    @staticmethod\n    def _recursive_lookup(branch, adict, key):\n        if isinstance(branch, CompoundModel):\n            return adict[key]\n        return branch, key\n\n    def inputs_map(self):\n        \"\"\"\n        Map the names of the inputs to this ExpressionTree to the inputs to the leaf models.\n        \"\"\"\n        inputs_map = {}\n        if not isinstance(self.op, str):  # If we don't have an operator the mapping is trivial\n            return {inp: (self, inp) for inp in self.inputs}\n\n        elif self.op == '|':\n            if isinstance(self.left, CompoundModel):\n                l_inputs_map = self.left.inputs_map()\n            for inp in self.inputs:\n                if isinstance(self.left, CompoundModel):\n                    inputs_map[inp] = l_inputs_map[inp]\n                else:\n                    inputs_map[inp] = self.left, inp\n        elif self.op == '&':\n            if isinstance(self.left, CompoundModel):\n                l_inputs_map = self.left.inputs_map()\n            if isinstance(self.right, CompoundModel):\n                r_inputs_map = self.right.inputs_map()\n            for i, inp in enumerate(self.inputs):\n                if i < len(self.left.inputs):  # Get from left\n                    if isinstance(self.left, CompoundModel):\n                        inputs_map[inp] = l_inputs_map[self.left.inputs[i]]\n                    else:\n                        inputs_map[inp] = self.left, self.left.inputs[i]\n                else:  # Get from right\n                    if isinstance(self.right, CompoundModel):\n                        inputs_map[inp] = r_inputs_map[self.right.inputs[i - len(self.left.inputs)]]\n                    else:\n                        inputs_map[inp] = self.right, self.right.inputs[i - len(self.left.inputs)]\n        elif self.op == 'fix_inputs':\n            fixed_ind = list(self.right.keys())\n            ind = [list(self.left.inputs).index(i) if isinstance(i, str) else i for i in fixed_ind]\n            inp_ind = list(range(self.left.n_inputs))\n            for i in ind:\n                inp_ind.remove(i)\n            for i in inp_ind:\n                inputs_map[self.left.inputs[i]] = self.left, self.left.inputs[i]\n        else:\n            if isinstance(self.left, CompoundModel):\n                l_inputs_map = self.left.inputs_map()\n            for inp in self.left.inputs:\n                if isinstance(self.left, CompoundModel):\n                    inputs_map[inp] = l_inputs_map[inp]\n                else:\n                    inputs_map[inp] = self.left, inp\n        return inputs_map\n\n    def _parameter_units_for_data_units(self, input_units, output_units):\n        if self._leaflist is None:\n            self._map_parameters()\n        units_for_data = {}\n        for imodel, model in enumerate(self._leaflist):\n            units_for_data_leaf = model._parameter_units_for_data_units(input_units, output_units)\n            for param_leaf in units_for_data_leaf:\n                param = self._param_map_inverse[(imodel, param_leaf)]\n                units_for_data[param] = units_for_data_leaf[param_leaf]\n        return units_for_data\n\n    @property\n    def input_units(self):\n        inputs_map = self.inputs_map()\n        input_units_dict = {key: inputs_map[key][0].input_units[orig_key]\n                            for key, (mod, orig_key) in inputs_map.items()\n                            if inputs_map[key][0].input_units is not None}\n        if input_units_dict:\n            return input_units_dict\n        return None\n\n    @property\n    def input_units_equivalencies(self):\n        inputs_map = self.inputs_map()\n        input_units_equivalencies_dict = {\n            key: inputs_map[key][0].input_units_equivalencies[orig_key]\n            for key, (mod, orig_key) in inputs_map.items()\n            if inputs_map[key][0].input_units_equivalencies is not None\n        }\n        if not input_units_equivalencies_dict:\n            return None\n\n        return input_units_equivalencies_dict\n\n    @property\n    def input_units_allow_dimensionless(self):\n        inputs_map = self.inputs_map()\n        return {key: inputs_map[key][0].input_units_allow_dimensionless[orig_key]\n                for key, (mod, orig_key) in inputs_map.items()}\n\n    @property\n    def input_units_strict(self):\n        inputs_map = self.inputs_map()\n        return {key: inputs_map[key][0].input_units_strict[orig_key]\n                for key, (mod, orig_key) in inputs_map.items()}\n\n    @property\n    def return_units(self):\n        outputs_map = self.outputs_map()\n        return {key: outputs_map[key][0].return_units[orig_key]\n                for key, (mod, orig_key) in outputs_map.items()\n                if outputs_map[key][0].return_units is not None}\n\n    def outputs_map(self):\n        \"\"\"\n        Map the names of the outputs to this ExpressionTree to the outputs to the leaf models.\n        \"\"\"\n        outputs_map = {}\n        if not isinstance(self.op, str):  # If we don't have an operator the mapping is trivial\n            return {out: (self, out) for out in self.outputs}\n\n        elif self.op == '|':\n            if isinstance(self.right, CompoundModel):\n                r_outputs_map = self.right.outputs_map()\n            for out in self.outputs:\n                if isinstance(self.right, CompoundModel):\n                    outputs_map[out] = r_outputs_map[out]\n                else:\n                    outputs_map[out] = self.right, out\n\n        elif self.op == '&':\n            if isinstance(self.left, CompoundModel):\n                l_outputs_map = self.left.outputs_map()\n            if isinstance(self.right, CompoundModel):\n                r_outputs_map = self.right.outputs_map()\n            for i, out in enumerate(self.outputs):\n                if i < len(self.left.outputs):  # Get from left\n                    if isinstance(self.left, CompoundModel):\n                        outputs_map[out] = l_outputs_map[self.left.outputs[i]]\n                    else:\n                        outputs_map[out] = self.left, self.left.outputs[i]\n                else:  # Get from right\n                    if isinstance(self.right, CompoundModel):\n                        outputs_map[out] = r_outputs_map[self.right.outputs[i - len(self.left.outputs)]]\n                    else:\n                        outputs_map[out] = self.right, self.right.outputs[i - len(self.left.outputs)]\n        elif self.op == 'fix_inputs':\n            return self.left.outputs_map()\n        else:\n            if isinstance(self.left, CompoundModel):\n                l_outputs_map = self.left.outputs_map()\n            for out in self.left.outputs:\n                if isinstance(self.left, CompoundModel):\n                    outputs_map[out] = l_outputs_map()[out]\n                else:\n                    outputs_map[out] = self.left, out\n        return outputs_map\n\n    @property\n    def has_user_bounding_box(self):\n        \"\"\"\n        A flag indicating whether or not a custom bounding_box has been\n        assigned to this model by a user, via assignment to\n        ``model.bounding_box``.\n        \"\"\"\n\n        return self._user_bounding_box is not None\n\n    def render(self, out=None, coords=None):\n        \"\"\"\n        Evaluate a model at fixed positions, respecting the ``bounding_box``.\n\n        The key difference relative to evaluating the model directly is that\n        this method is limited to a bounding box if the `Model.bounding_box`\n        attribute is set.\n\n        Parameters\n        ----------\n        out : `numpy.ndarray`, optional\n            An array that the evaluated model will be added to.  If this is not\n            given (or given as ``None``), a new array will be created.\n        coords : array-like, optional\n            An array to be used to translate from the model's input coordinates\n            to the ``out`` array. It should have the property that\n            ``self(coords)`` yields the same shape as ``out``.  If ``out`` is\n            not specified, ``coords`` will be used to determine the shape of\n            the returned array. If this is not provided (or None), the model\n            will be evaluated on a grid determined by `Model.bounding_box`.\n\n        Returns\n        -------\n        out : `numpy.ndarray`\n            The model added to ``out`` if  ``out`` is not ``None``, or else a\n            new array from evaluating the model over ``coords``.\n            If ``out`` and ``coords`` are both `None`, the returned array is\n            limited to the `Model.bounding_box` limits. If\n            `Model.bounding_box` is `None`, ``arr`` or ``coords`` must be\n            passed.\n\n        Raises\n        ------\n        ValueError\n            If ``coords`` are not given and the the `Model.bounding_box` of\n            this model is not set.\n\n        Examples\n        --------\n        :ref:`astropy:bounding-boxes`\n        \"\"\"\n\n        bbox = self.get_bounding_box()\n\n        ndim = self.n_inputs\n\n        if (coords is None) and (out is None) and (bbox is None):\n            raise ValueError('If no bounding_box is set, '\n                             'coords or out must be input.')\n\n        # for consistent indexing\n        if ndim == 1:\n            if coords is not None:\n                coords = [coords]\n            if bbox is not None:\n                bbox = [bbox]\n\n        if coords is not None:\n            coords = np.asanyarray(coords, dtype=float)\n            # Check dimensions match out and model\n            assert len(coords) == ndim\n            if out is not None:\n                if coords[0].shape != out.shape:\n                    raise ValueError('inconsistent shape of the output.')\n            else:\n                out = np.zeros(coords[0].shape)\n\n        if out is not None:\n            out = np.asanyarray(out)\n            if out.ndim != ndim:\n                raise ValueError('the array and model must have the same '\n                                 'number of dimensions.')\n\n        if bbox is not None:\n            # Assures position is at center pixel, important when using\n            # add_array.\n            pd = np.array([(np.mean(bb), np.ceil((bb[1] - bb[0]) / 2))\n                           for bb in bbox]).astype(int).T\n            pos, delta = pd\n\n            if coords is not None:\n                sub_shape = tuple(delta * 2 + 1)\n                sub_coords = np.array([extract_array(c, sub_shape, pos)\n                                       for c in coords])\n            else:\n                limits = [slice(p - d, p + d + 1, 1) for p, d in pd.T]\n                sub_coords = np.mgrid[limits]\n\n            sub_coords = sub_coords[::-1]\n\n            if out is None:\n                out = self(*sub_coords)\n            else:\n                try:\n                    out = add_array(out, self(*sub_coords), pos)\n                except ValueError:\n                    raise ValueError(\n                        'The `bounding_box` is larger than the input out in '\n                        'one or more dimensions. Set '\n                        '`model.bounding_box = None`.')\n        else:\n            if coords is None:\n                im_shape = out.shape\n                limits = [slice(i) for i in im_shape]\n                coords = np.mgrid[limits]\n\n            coords = coords[::-1]\n\n            out += self(*coords)\n\n        return out\n\n    def replace_submodel(self, name, model):\n        \"\"\"\n        Construct a new `~astropy.modeling.CompoundModel` instance from an\n        existing CompoundModel, replacing the named submodel with a new model.\n\n        In order to ensure that inverses and names are kept/reconstructed, it's\n        necessary to rebuild the CompoundModel from the replaced node all the\n        way back to the base. The original CompoundModel is left untouched.\n\n        Parameters\n        ----------\n        name : str\n            name of submodel to be replaced\n        model : `~astropy.modeling.Model`\n            replacement model\n        \"\"\"\n        submodels = [m for m in self.traverse_postorder()\n                     if getattr(m, 'name', None) == name]\n        if submodels:\n            if len(submodels) > 1:\n                raise ValueError(f\"More than one submodel named {name}\")\n\n            old_model = submodels.pop()\n            if len(old_model) != len(model):\n                raise ValueError(\"New and old models must have equal values \"\n                                 \"for n_models\")\n\n            # Do this check first in order to raise a more helpful Exception,\n            # although it would fail trying to construct the new CompoundModel\n            if (old_model.n_inputs != model.n_inputs or\n                        old_model.n_outputs != model.n_outputs):\n                raise ValueError(\"New model must match numbers of inputs and \"\n                                 \"outputs of existing model\")\n\n            tree = _get_submodel_path(self, name)\n            while tree:\n                branch = self.copy()\n                for node in tree[:-1]:\n                    branch = getattr(branch, node)\n                setattr(branch, tree[-1], model)\n                model = CompoundModel(branch.op, branch.left, branch.right,\n                                      name=branch.name)\n                tree = tree[:-1]\n            return model\n\n        else:\n            raise ValueError(f\"No submodels found named {name}\")\n\n    def _set_sub_models_and_parameter_units(self, left, right):\n        \"\"\"\n        Provides a work-around to properly set the sub models and respective\n        parameters's units/values when using ``without_units_for_data``\n        or ``without_units_for_data`` methods.\n        \"\"\"\n        model = CompoundModel(self.op, left, right)\n\n        self.left = left\n        self.right = right\n\n        for name in model.param_names:\n            model_parameter = getattr(model, name)\n            parameter = getattr(self, name)\n\n            parameter.value = model_parameter.value\n            parameter._set_unit(model_parameter.unit, force=True)\n\n    def without_units_for_data(self, **kwargs):\n        \"\"\"\n        See `~astropy.modeling.Model.without_units_for_data` for overview\n        of this method.\n\n        Notes\n        -----\n        This modifies the behavior of the base method to account for the\n        case where the sub-models of a compound model have different output\n        units. This is only valid for compound * and / compound models as\n        in that case it is reasonable to mix the output units. It does this\n        by modifying the output units of each sub model by using the output\n        units of the other sub model so that we can apply the original function\n        and get the desired result.\n\n        Additional data has to be output in the mixed output unit case\n        so that the units can be properly rebuilt by\n        `~astropy.modeling.CompoundModel.with_units_from_data`.\n\n        Outside the mixed output units, this method is identical to the\n        base method.\n        \"\"\"\n        if self.op in ['*', '/']:\n            model = self.copy()\n            inputs = {inp: kwargs[inp] for inp in self.inputs}\n\n            left_units = self.left.output_units(**kwargs)\n            right_units = self.right.output_units(**kwargs)\n\n            if self.op == '*':\n                left_kwargs = {out: kwargs[out] / right_units[out]\n                               for out in self.left.outputs if kwargs[out] is not None}\n                right_kwargs = {out: kwargs[out] / left_units[out]\n                                for out in self.right.outputs if kwargs[out] is not None}\n            else:\n                left_kwargs = {out: kwargs[out] * right_units[out]\n                               for out in self.left.outputs if kwargs[out] is not None}\n                right_kwargs = {out: 1 / kwargs[out] * left_units[out]\n                                for out in self.right.outputs if kwargs[out] is not None}\n\n            left_kwargs.update(inputs.copy())\n            right_kwargs.update(inputs.copy())\n\n            left = self.left.without_units_for_data(**left_kwargs)\n            if isinstance(left, tuple):\n                left_kwargs['_left_kwargs'] = left[1]\n                left_kwargs['_right_kwargs'] = left[2]\n                left = left[0]\n\n            right = self.right.without_units_for_data(**right_kwargs)\n            if isinstance(right, tuple):\n                right_kwargs['_left_kwargs'] = right[1]\n                right_kwargs['_right_kwargs'] = right[2]\n                right = right[0]\n\n            model._set_sub_models_and_parameter_units(left, right)\n\n            return model, left_kwargs, right_kwargs\n        else:\n            return super().without_units_for_data(**kwargs)\n\n    def with_units_from_data(self, **kwargs):\n        \"\"\"\n        See `~astropy.modeling.Model.with_units_from_data` for overview\n        of this method.\n\n        Notes\n        -----\n        This modifies the behavior of the base method to account for the\n        case where the sub-models of a compound model have different output\n        units. This is only valid for compound * and / compound models as\n        in that case it is reasonable to mix the output units. In order to\n        do this it requires some additional information output by\n        `~astropy.modeling.CompoundModel.without_units_for_data` passed as\n        keyword arguments under the keywords ``_left_kwargs`` and ``_right_kwargs``.\n\n        Outside the mixed output units, this method is identical to the\n        base method.\n        \"\"\"\n\n        if self.op in ['*', '/']:\n            left_kwargs = kwargs.pop('_left_kwargs')\n            right_kwargs = kwargs.pop('_right_kwargs')\n\n            left = self.left.with_units_from_data(**left_kwargs)\n            right = self.right.with_units_from_data(**right_kwargs)\n\n            model = self.copy()\n            model._set_sub_models_and_parameter_units(left, right)\n\n            return model\n        else:\n            return super().with_units_from_data(**kwargs)\n\n\ndef _get_submodel_path(model, name):\n    \"\"\"Find the route down a CompoundModel's tree to the model with the\n    specified name (whether it's a leaf or not)\"\"\"\n    if getattr(model, 'name', None) == name:\n        return []\n    try:\n        return ['left'] + _get_submodel_path(model.left, name)\n    except (AttributeError, TypeError):\n        pass\n    try:\n        return ['right'] + _get_submodel_path(model.right, name)\n    except (AttributeError, TypeError):\n        pass\n\n\ndef binary_operation(binoperator, left, right):\n    '''\n    Perform binary operation. Operands may be matching tuples of operands.\n    '''\n    if isinstance(left, tuple) and isinstance(right, tuple):\n        return tuple([binoperator(item[0], item[1])\n                      for item in zip(left, right)])\n    return binoperator(left, right)\n\n\ndef get_ops(tree, opset):\n    \"\"\"\n    Recursive function to collect operators used.\n    \"\"\"\n    if isinstance(tree, CompoundModel):\n        opset.add(tree.op)\n        get_ops(tree.left, opset)\n        get_ops(tree.right, opset)\n    else:\n        return\n\n\ndef make_subtree_dict(tree, nodepath, tdict, leaflist):\n    '''\n    Traverse a tree noting each node by a key that indicates all the\n    left/right choices necessary to reach that node. Each key will\n    reference a tuple that contains:\n\n    - reference to the compound model for that node.\n    - left most index contained within that subtree\n       (relative to all indices for the whole tree)\n    - right most index contained within that subtree\n    '''\n    # if this is a leaf, just append it to the leaflist\n    if not hasattr(tree, 'isleaf'):\n        leaflist.append(tree)\n    else:\n        leftmostind = len(leaflist)\n        make_subtree_dict(tree.left, nodepath+'l', tdict, leaflist)\n        make_subtree_dict(tree.right, nodepath+'r', tdict, leaflist)\n        rightmostind = len(leaflist)-1\n        tdict[nodepath] = (tree, leftmostind, rightmostind)\n\n\n_ORDER_OF_OPERATORS = [('fix_inputs',), ('|',), ('&',), ('+', '-'), ('*', '/'), ('**',)]\nOPERATOR_PRECEDENCE = {}\nfor idx, ops in enumerate(_ORDER_OF_OPERATORS):\n    for op in ops:\n        OPERATOR_PRECEDENCE[op] = idx\ndel idx, op, ops\n\n\ndef fix_inputs(modelinstance, values, bounding_boxes=None, selector_args=None):\n    \"\"\"\n    This function creates a compound model with one or more of the input\n    values of the input model assigned fixed values (scalar or array).\n\n    Parameters\n    ----------\n    modelinstance : `~astropy.modeling.Model` instance\n        This is the model that one or more of the\n        model input values will be fixed to some constant value.\n    values : dict\n        A dictionary where the key identifies which input to fix\n        and its value is the value to fix it at. The key may either be the\n        name of the input or a number reflecting its order in the inputs.\n\n    Examples\n    --------\n\n    >>> from astropy.modeling.models import Gaussian2D\n    >>> g = Gaussian2D(1, 2, 3, 4, 5)\n    >>> gv = fix_inputs(g, {0: 2.5})\n\n    Results in a 1D function equivalent to Gaussian2D(1, 2, 3, 4, 5)(x=2.5, y)\n    \"\"\"\n    model = CompoundModel('fix_inputs', modelinstance, values)\n    if bounding_boxes is not None:\n        if selector_args is None:\n            selector_args = tuple([(key, True) for key in values.keys()])\n        bbox = CompoundBoundingBox.validate(modelinstance, bounding_boxes, selector_args)\n        _selector = bbox.selector_args.get_fixed_values(modelinstance, values)\n\n        new_bbox = bbox[_selector]\n        new_bbox = new_bbox.__class__.validate(model, new_bbox)\n\n        model.bounding_box = new_bbox\n    return model\n\n\ndef bind_bounding_box(modelinstance, bounding_box, ignored=None, order='C'):\n    \"\"\"\n    Set a validated bounding box to a model instance.\n\n    Parameters\n    ----------\n    modelinstance : `~astropy.modeling.Model` instance\n        This is the model that the validated bounding box will be set on.\n    bounding_box : tuple\n        A bounding box tuple, see :ref:`astropy:bounding-boxes` for details\n    ignored : list\n        List of the inputs to be ignored by the bounding box.\n    order : str, optional\n        The ordering of the bounding box tuple, can be either ``'C'`` or\n        ``'F'``.\n    \"\"\"\n    modelinstance.bounding_box = ModelBoundingBox.validate(modelinstance,\n                                                           bounding_box,\n                                                           ignored=ignored,\n                                                           order=order)\n\n\ndef bind_compound_bounding_box(modelinstance, bounding_boxes, selector_args,\n                               create_selector=None, ignored=None, order='C'):\n    \"\"\"\n    Add a validated compound bounding box to a model instance.\n\n    Parameters\n    ----------\n    modelinstance : `~astropy.modeling.Model` instance\n        This is the model that the validated compound bounding box will be set on.\n    bounding_boxes : dict\n        A dictionary of bounding box tuples, see :ref:`astropy:bounding-boxes`\n        for details.\n    selector_args : list\n        List of selector argument tuples to define selection for compound\n        bounding box, see :ref:`astropy:bounding-boxes` for details.\n    create_selector : callable, optional\n        An optional callable with interface (selector_value, model) which\n        can generate a bounding box based on a selector value and model if\n        there is no bounding box in the compound bounding box listed under\n        that selector value. Default is ``None``, meaning new bounding\n        box entries will not be automatically generated.\n    ignored : list\n        List of the inputs to be ignored by the bounding box.\n    order : str, optional\n        The ordering of the bounding box tuple, can be either ``'C'`` or\n        ``'F'``.\n    \"\"\"\n    modelinstance.bounding_box = CompoundBoundingBox.validate(modelinstance,\n                                                              bounding_boxes, selector_args,\n                                                              create_selector=create_selector,\n                                                              ignored=ignored,\n                                                              order=order)\n\n\ndef custom_model(*args, fit_deriv=None):\n    \"\"\"\n    Create a model from a user defined function. The inputs and parameters of\n    the model will be inferred from the arguments of the function.\n\n    This can be used either as a function or as a decorator.  See below for\n    examples of both usages.\n\n    The model is separable only if there is a single input.\n\n    .. note::\n\n        All model parameters have to be defined as keyword arguments with\n        default values in the model function.  Use `None` as a default argument\n        value if you do not want to have a default value for that parameter.\n\n        The standard settable model properties can be configured by default\n        using keyword arguments matching the name of the property; however,\n        these values are not set as model \"parameters\". Moreover, users\n        cannot use keyword arguments matching non-settable model properties,\n        with the exception of ``n_outputs`` which should be set to the number of\n        outputs of your function.\n\n    Parameters\n    ----------\n    func : function\n        Function which defines the model.  It should take N positional\n        arguments where ``N`` is dimensions of the model (the number of\n        independent variable in the model), and any number of keyword arguments\n        (the parameters).  It must return the value of the model (typically as\n        an array, but can also be a scalar for scalar inputs).  This\n        corresponds to the `~astropy.modeling.Model.evaluate` method.\n    fit_deriv : function, optional\n        Function which defines the Jacobian derivative of the model. I.e., the\n        derivative with respect to the *parameters* of the model.  It should\n        have the same argument signature as ``func``, but should return a\n        sequence where each element of the sequence is the derivative\n        with respect to the corresponding argument. This corresponds to the\n        :meth:`~astropy.modeling.FittableModel.fit_deriv` method.\n\n    Examples\n    --------\n    Define a sinusoidal model function as a custom 1D model::\n\n        >>> from astropy.modeling.models import custom_model\n        >>> import numpy as np\n        >>> def sine_model(x, amplitude=1., frequency=1.):\n        ...     return amplitude * np.sin(2 * np.pi * frequency * x)\n        >>> def sine_deriv(x, amplitude=1., frequency=1.):\n        ...     return 2 * np.pi * amplitude * np.cos(2 * np.pi * frequency * x)\n        >>> SineModel = custom_model(sine_model, fit_deriv=sine_deriv)\n\n    Create an instance of the custom model and evaluate it::\n\n        >>> model = SineModel()\n        >>> model(0.25)\n        1.0\n\n    This model instance can now be used like a usual astropy model.\n\n    The next example demonstrates a 2D Moffat function model, and also\n    demonstrates the support for docstrings (this example could also include\n    a derivative, but it has been omitted for simplicity)::\n\n        >>> @custom_model\n        ... def Moffat2D(x, y, amplitude=1.0, x_0=0.0, y_0=0.0, gamma=1.0,\n        ...            alpha=1.0):\n        ...     \\\"\\\"\\\"Two dimensional Moffat function.\\\"\\\"\\\"\n        ...     rr_gg = ((x - x_0) ** 2 + (y - y_0) ** 2) / gamma ** 2\n        ...     return amplitude * (1 + rr_gg) ** (-alpha)\n        ...\n        >>> print(Moffat2D.__doc__)\n        Two dimensional Moffat function.\n        >>> model = Moffat2D()\n        >>> model(1, 1)  # doctest: +FLOAT_CMP\n        0.3333333333333333\n    \"\"\"\n\n    if len(args) == 1 and callable(args[0]):\n        return _custom_model_wrapper(args[0], fit_deriv=fit_deriv)\n    elif not args:\n        return functools.partial(_custom_model_wrapper, fit_deriv=fit_deriv)\n    else:\n        raise TypeError(\n            \"{0} takes at most one positional argument (the callable/\"\n            \"function to be turned into a model.  When used as a decorator \"\n            \"it should be passed keyword arguments only (if \"\n            \"any).\".format(__name__))\n\n\ndef _custom_model_inputs(func):\n    \"\"\"\n    Processes the inputs to the `custom_model`'s function into the appropriate\n    categories.\n\n    Parameters\n    ----------\n    func : callable\n\n    Returns\n    -------\n    inputs : list\n        list of evaluation inputs\n    special_params : dict\n        dictionary of model properties which require special treatment\n    settable_params : dict\n        dictionary of defaults for settable model properties\n    params : dict\n        dictionary of model parameters set by `custom_model`'s function\n    \"\"\"\n    inputs, parameters = get_inputs_and_params(func)\n\n    special = ['n_outputs']\n    settable = [attr for attr, value in vars(Model).items()\n                if isinstance(value, property) and value.fset is not None]\n    properties = [attr for attr, value in vars(Model).items()\n                  if isinstance(value, property) and value.fset is None and attr not in special]\n\n    special_params = {}\n    settable_params = {}\n    params = {}\n    for param in parameters:\n        if param.name in special:\n            special_params[param.name] = param.default\n        elif param.name in settable:\n            settable_params[param.name] = param.default\n        elif param.name in properties:\n            raise ValueError(f\"Parameter '{param.name}' cannot be a model property: {properties}.\")\n        else:\n            params[param.name] = param.default\n\n    return inputs, special_params, settable_params, params\n\n\ndef _custom_model_wrapper(func, fit_deriv=None):\n    \"\"\"\n    Internal implementation `custom_model`.\n\n    When `custom_model` is called as a function its arguments are passed to\n    this function, and the result of this function is returned.\n\n    When `custom_model` is used as a decorator a partial evaluation of this\n    function is returned by `custom_model`.\n    \"\"\"\n\n    if not callable(func):\n        raise ModelDefinitionError(\n            \"func is not callable; it must be a function or other callable \"\n            \"object\")\n\n    if fit_deriv is not None and not callable(fit_deriv):\n        raise ModelDefinitionError(\n            \"fit_deriv not callable; it must be a function or other \"\n            \"callable object\")\n\n    model_name = func.__name__\n\n    inputs, special_params, settable_params, params = _custom_model_inputs(func)\n\n    if (fit_deriv is not None and\n            len(fit_deriv.__defaults__) != len(params)):\n        raise ModelDefinitionError(\"derivative function should accept \"\n                                   \"same number of parameters as func.\")\n\n    params = {param: Parameter(param, default=default)\n              for param, default in params.items()}\n\n    mod = find_current_module(2)\n    if mod:\n        modname = mod.__name__\n    else:\n        modname = '__main__'\n\n    members = {\n        '__module__': str(modname),\n        '__doc__': func.__doc__,\n        'n_inputs': len(inputs),\n        'n_outputs': special_params.pop('n_outputs', 1),\n        'evaluate': staticmethod(func),\n        '_settable_properties': settable_params\n    }\n\n    if fit_deriv is not None:\n        members['fit_deriv'] = staticmethod(fit_deriv)\n\n    members.update(params)\n\n    cls = type(model_name, (FittableModel,), members)\n    cls._separable = True if (len(inputs) == 1) else False\n    return cls\n\n\ndef render_model(model, arr=None, coords=None):\n    \"\"\"\n    Evaluates a model on an input array. Evaluation is limited to\n    a bounding box if the `Model.bounding_box` attribute is set.\n\n    Parameters\n    ----------\n    model : `Model`\n        Model to be evaluated.\n    arr : `numpy.ndarray`, optional\n        Array on which the model is evaluated.\n    coords : array-like, optional\n        Coordinate arrays mapping to ``arr``, such that\n        ``arr[coords] == arr``.\n\n    Returns\n    -------\n    array : `numpy.ndarray`\n        The model evaluated on the input ``arr`` or a new array from\n        ``coords``.\n        If ``arr`` and ``coords`` are both `None`, the returned array is\n        limited to the `Model.bounding_box` limits. If\n        `Model.bounding_box` is `None`, ``arr`` or ``coords`` must be passed.\n\n    Examples\n    --------\n    :ref:`astropy:bounding-boxes`\n    \"\"\"\n\n    bbox = model.bounding_box\n\n    if (coords is None) & (arr is None) & (bbox is None):\n        raise ValueError('If no bounding_box is set,'\n                         'coords or arr must be input.')\n\n    # for consistent indexing\n    if model.n_inputs == 1:\n        if coords is not None:\n            coords = [coords]\n        if bbox is not None:\n            bbox = [bbox]\n\n    if arr is not None:\n        arr = arr.copy()\n        # Check dimensions match model\n        if arr.ndim != model.n_inputs:\n            raise ValueError('number of array dimensions inconsistent with '\n                             'number of model inputs.')\n    if coords is not None:\n        # Check dimensions match arr and model\n        coords = np.array(coords)\n        if len(coords) != model.n_inputs:\n            raise ValueError('coordinate length inconsistent with the number '\n                             'of model inputs.')\n        if arr is not None:\n            if coords[0].shape != arr.shape:\n                raise ValueError('coordinate shape inconsistent with the '\n                                 'array shape.')\n        else:\n            arr = np.zeros(coords[0].shape)\n\n    if bbox is not None:\n        # assures position is at center pixel, important when using add_array\n        pd = pos, delta = np.array([(np.mean(bb), np.ceil((bb[1] - bb[0]) / 2))\n                                    for bb in bbox]).astype(int).T\n\n        if coords is not None:\n            sub_shape = tuple(delta * 2 + 1)\n            sub_coords = np.array([extract_array(c, sub_shape, pos)\n                                   for c in coords])\n        else:\n            limits = [slice(p - d, p + d + 1, 1) for p, d in pd.T]\n            sub_coords = np.mgrid[limits]\n\n        sub_coords = sub_coords[::-1]\n\n        if arr is None:\n            arr = model(*sub_coords)\n        else:\n            try:\n                arr = add_array(arr, model(*sub_coords), pos)\n            except ValueError:\n                raise ValueError('The `bounding_box` is larger than the input'\n                                 ' arr in one or more dimensions. Set '\n                                 '`model.bounding_box = None`.')\n    else:\n\n        if coords is None:\n            im_shape = arr.shape\n            limits = [slice(i) for i in im_shape]\n            coords = np.mgrid[limits]\n\n        arr += model(*coords[::-1])\n\n    return arr\n\n\ndef hide_inverse(model):\n    \"\"\"\n    This is a convenience function intended to disable automatic generation\n    of the inverse in compound models by disabling one of the constituent\n    model's inverse. This is to handle cases where user provided inverse\n    functions are not compatible within an expression.\n\n    Example:\n        compound_model.inverse = hide_inverse(m1) + m2 + m3\n\n    This will insure that the defined inverse itself won't attempt to\n    build its own inverse, which would otherwise fail in this example\n    (e.g., m = m1 + m2 + m3 happens to raises an exception for this\n    reason.)\n\n    Note that this permanently disables it. To prevent that either copy\n    the model or restore the inverse later.\n    \"\"\"\n    del model.inverse\n    return model\n", 4473], "/astropy__astropy/astropy/modeling/parameters.py": ["# Licensed under a 3-clause BSD style license - see LICENSE.rst\n# pylint: disable=invalid-name\n\n\"\"\"\nThis module defines classes that deal with parameters.\n\nIt is unlikely users will need to work with these classes directly,\nunless they define their own models.\n\"\"\"\n\n\nimport functools\nimport numbers\nimport operator\n\nimport numpy as np\n\nfrom astropy.units import Quantity\nfrom astropy.utils import isiterable\nfrom .utils import array_repr_oneline\nfrom .utils import get_inputs_and_params\n\n\n__all__ = ['Parameter', 'InputParameterError', 'ParameterError']\n\n\nclass ParameterError(Exception):\n    \"\"\"Generic exception class for all exceptions pertaining to Parameters.\"\"\"\n\n\nclass InputParameterError(ValueError, ParameterError):\n    \"\"\"Used for incorrect input parameter values and definitions.\"\"\"\n\n\nclass ParameterDefinitionError(ParameterError):\n    \"\"\"Exception in declaration of class-level Parameters.\"\"\"\n\n\ndef _tofloat(value):\n    \"\"\"Convert a parameter to float or float array\"\"\"\n\n    if isiterable(value):\n        try:\n            value = np.asanyarray(value, dtype=float)\n        except (TypeError, ValueError):\n            # catch arrays with strings or user errors like different\n            # types of parameters in a parameter set\n            raise InputParameterError(\n                f\"Parameter of {type(value)} could not be converted to float\")\n    elif isinstance(value, Quantity):\n        # Quantities are fine as is\n        pass\n    elif isinstance(value, np.ndarray):\n        # A scalar/dimensionless array\n        value = float(value.item())\n    elif isinstance(value, (numbers.Number, np.number)) and not isinstance(value, bool):\n        value = float(value)\n    elif isinstance(value, bool):\n        raise InputParameterError(\n            \"Expected parameter to be of numerical type, not boolean\")\n    else:\n        raise InputParameterError(\n            f\"Don't know how to convert parameter of {type(value)} to float\")\n    return value\n\n\n# Helpers for implementing operator overloading on Parameter\n\ndef _binary_arithmetic_operation(op, reflected=False):\n    @functools.wraps(op)\n    def wrapper(self, val):\n\n        if self.unit is not None:\n            self_value = Quantity(self.value, self.unit)\n        else:\n            self_value = self.value\n\n        if reflected:\n            return op(val, self_value)\n        else:\n            return op(self_value, val)\n\n    return wrapper\n\n\ndef _binary_comparison_operation(op):\n    @functools.wraps(op)\n    def wrapper(self, val):\n\n        if self.unit is not None:\n            self_value = Quantity(self.value, self.unit)\n        else:\n            self_value = self.value\n\n        return op(self_value, val)\n\n    return wrapper\n\n\ndef _unary_arithmetic_operation(op):\n    @functools.wraps(op)\n    def wrapper(self):\n\n        if self.unit is not None:\n            self_value = Quantity(self.value, self.unit)\n        else:\n            self_value = self.value\n\n        return op(self_value)\n\n    return wrapper\n\n\nclass Parameter:\n    \"\"\"\n    Wraps individual parameters.\n\n    Since 4.0 Parameters are no longer descriptors and are based on a new\n    implementation of the Parameter class. Parameters now  (as of 4.0) store\n    values locally (as instead previously in the associated model)\n\n    This class represents a model's parameter (in a somewhat broad sense). It\n    serves a number of purposes:\n\n    1) A type to be recognized by models and treated specially at class\n    initialization (i.e., if it is found that there is a class definition\n    of a Parameter, the model initializer makes a copy at the instance level).\n\n    2) Managing the handling of allowable parameter values and once defined,\n    ensuring updates are consistent with the Parameter definition. This\n    includes the optional use of units and quantities as well as transforming\n    values to an internally consistent representation (e.g., from degrees to\n    radians through the use of getters and setters).\n\n    3) Holding attributes of parameters relevant to fitting, such as whether\n    the parameter may be varied in fitting, or whether there are constraints\n    that must be satisfied.\n\n\n\n    See :ref:`astropy:modeling-parameters` for more details.\n\n    Parameters\n    ----------\n    name : str\n        parameter name\n\n        .. warning::\n\n            The fact that `Parameter` accepts ``name`` as an argument is an\n            implementation detail, and should not be used directly.  When\n            defining a new `Model` class, parameter names are always\n            automatically defined by the class attribute they're assigned to.\n    description : str\n        parameter description\n    default : float or array\n        default value to use for this parameter\n    unit : `~astropy.units.Unit`\n        if specified, the parameter will be in these units, and when the\n        parameter is updated in future, it should be set to a\n        :class:`~astropy.units.Quantity` that has equivalent units.\n    getter : callable\n        a function that wraps the raw (internal) value of the parameter\n        when returning the value through the parameter proxy (eg. a\n        parameter may be stored internally as radians but returned to the\n        user as degrees)\n    setter : callable\n        a function that wraps any values assigned to this parameter; should\n        be the inverse of getter\n    fixed : bool\n        if True the parameter is not varied during fitting\n    tied : callable or False\n        if callable is supplied it provides a way to link the value of this\n        parameter to another parameter (or some other arbitrary function)\n    min : float\n        the lower bound of a parameter\n    max : float\n        the upper bound of a parameter\n    bounds : tuple\n        specify min and max as a single tuple--bounds may not be specified\n        simultaneously with min or max\n    \"\"\"\n\n    constraints = ('fixed', 'tied', 'bounds')\n    \"\"\"\n    Types of constraints a parameter can have.  Excludes 'min' and 'max'\n    which are just aliases for the first and second elements of the 'bounds'\n    constraint (which is represented as a 2-tuple). 'prior' and 'posterior'\n    are available for use by user fitters but are not used by any built-in\n    fitters as of this writing.\n    \"\"\"\n\n    def __init__(self, name='', description='', default=None, unit=None,\n                 getter=None, setter=None, fixed=False, tied=False, min=None,\n                 max=None, bounds=None, prior=None, posterior=None):\n        super().__init__()\n\n        self._model = None\n        self._model_required = False\n        self._setter = self._create_value_wrapper(setter, None)\n        self._getter = self._create_value_wrapper(getter, None)\n        self._name = name\n        self.__doc__ = self._description = description.strip()\n\n        # We only need to perform this check on unbound parameters\n        if isinstance(default, Quantity):\n            if unit is not None and not unit.is_equivalent(default.unit):\n                raise ParameterDefinitionError(\n                    \"parameter default {0} does not have units equivalent to \"\n                    \"the required unit {1}\".format(default, unit))\n            unit = default.unit\n            default = default.value\n\n        self._default = default\n        self._unit = unit\n        # Internal units correspond to raw_units held by the model in the\n        # previous implementation. The private _getter and _setter methods\n        # use this to convert to and from the public unit defined for the\n        # parameter.\n        self._internal_unit = None\n        if not self._model_required:\n            if self._default is not None:\n                self.value = self._default\n            else:\n                self._value = None\n\n        # NOTE: These are *default* constraints--on model instances constraints\n        # are taken from the model if set, otherwise the defaults set here are\n        # used\n        if bounds is not None:\n            if min is not None or max is not None:\n                raise ValueError(\n                    'bounds may not be specified simultaneously with min or '\n                    'max when instantiating Parameter {}'.format(name))\n        else:\n            bounds = (min, max)\n\n        self._fixed = fixed\n        self._tied = tied\n        self._bounds = bounds\n        self._order = None\n\n        self._validator = None\n        self._prior = prior\n        self._posterior = posterior\n\n        self._std = None\n\n    def __set_name__(self, owner, name):\n        self._name = name\n\n    def __len__(self):\n        val = self.value\n        if val.shape == ():\n            return 1\n        else:\n            return val.shape[0]\n\n    def __getitem__(self, key):\n        value = self.value\n        if len(value.shape) == 0:\n            # Wrap the value in a list so that getitem can work for sensible\n            # indices like [0] and [-1]\n            value = [value]\n        return value[key]\n\n    def __setitem__(self, key, value):\n        # Get the existing value and check whether it even makes sense to\n        # apply this index\n        oldvalue = self.value\n        if isinstance(key, slice):\n            if len(oldvalue[key]) == 0:\n                raise InputParameterError(\n                    \"Slice assignment outside the parameter dimensions for \"\n                    \"'{}'\".format(self.name))\n            for idx, val in zip(range(*key.indices(len(self))), value):\n                self.__setitem__(idx, val)\n        else:\n            try:\n                oldvalue[key] = value\n            except IndexError:\n                raise InputParameterError(\n                    \"Input dimension {} invalid for {!r} parameter with \"\n                    \"dimension {}\".format(key, self.name, value.shape[0]))  # likely wrong\n\n    def __repr__(self):\n        args = f\"'{self._name}'\"\n        args += f', value={self.value}'\n\n        if self.unit is not None:\n            args += f', unit={self.unit}'\n\n        for cons in self.constraints:\n            val = getattr(self, cons)\n            if val not in (None, False, (None, None)):\n                # Maybe non-obvious, but False is the default for the fixed and\n                # tied constraints\n                args += f', {cons}={val}'\n\n        return f\"{self.__class__.__name__}({args})\"\n\n    @property\n    def name(self):\n        \"\"\"Parameter name\"\"\"\n\n        return self._name\n\n    @property\n    def default(self):\n        \"\"\"Parameter default value\"\"\"\n        return self._default\n\n    @property\n    def value(self):\n        \"\"\"The unadorned value proxied by this parameter.\"\"\"\n        if self._getter is None and self._setter is None:\n            return np.float64(self._value)\n        else:\n            # This new implementation uses the names of internal_unit\n            # in place of raw_unit used previously. The contrast between\n            # internal values and units is that between the public\n            # units that the parameter advertises to what it actually\n            # uses internally.\n            if self.internal_unit:\n                return np.float64(self._getter(self._internal_value,\n                                               self.internal_unit,\n                                               self.unit).value)\n            elif self._getter:\n                return np.float64(self._getter(self._internal_value))\n            elif self._setter:\n                return np.float64(self._internal_value)\n\n    @value.setter\n    def value(self, value):\n        if isinstance(value, Quantity):\n            raise TypeError(\"The .value property on parameters should be set\"\n                            \" to unitless values, not Quantity objects. To set\"\n                            \"a parameter to a quantity simply set the \"\n                            \"parameter directly without using .value\")\n        if self._setter is None:\n            self._value = np.array(value, dtype=np.float64)\n        else:\n            self._internal_value = np.array(self._setter(value),\n                                            dtype=np.float64)\n\n    @property\n    def unit(self):\n        \"\"\"\n        The unit attached to this parameter, if any.\n\n        On unbound parameters (i.e. parameters accessed through the\n        model class, rather than a model instance) this is the required/\n        default unit for the parameter.\n        \"\"\"\n\n        return self._unit\n\n    @unit.setter\n    def unit(self, unit):\n        if self.unit is None:\n            raise ValueError('Cannot attach units to parameters that were '\n                             'not initially specified with units')\n        else:\n            raise ValueError('Cannot change the unit attribute directly, '\n                             'instead change the parameter to a new quantity')\n\n    def _set_unit(self, unit, force=False):\n        if force:\n            self._unit = unit\n        else:\n            self.unit = unit\n\n    @property\n    def internal_unit(self):\n        \"\"\"\n        Return the internal unit the parameter uses for the internal value stored\n        \"\"\"\n        return self._internal_unit\n\n    @internal_unit.setter\n    def internal_unit(self, internal_unit):\n        \"\"\"\n        Set the unit the parameter will convert the supplied value to the\n        representation used internally.\n        \"\"\"\n        self._internal_unit = internal_unit\n\n    @property\n    def quantity(self):\n        \"\"\"\n        This parameter, as a :class:`~astropy.units.Quantity` instance.\n        \"\"\"\n        if self.unit is None:\n            return None\n        return self.value * self.unit\n\n    @quantity.setter\n    def quantity(self, quantity):\n        if not isinstance(quantity, Quantity):\n            raise TypeError(\"The .quantity attribute should be set \"\n                            \"to a Quantity object\")\n        self.value = quantity.value\n        self._unit = quantity.unit\n\n    @property\n    def shape(self):\n        \"\"\"The shape of this parameter's value array.\"\"\"\n        if self._setter is None:\n            return self._value.shape\n        return self._internal_value.shape\n\n    @shape.setter\n    def shape(self, value):\n        if isinstance(self.value, np.generic):\n            if value not in ((), (1,)):\n                raise ValueError(\"Cannot assign this shape to a scalar quantity\")\n        else:\n            self.value.shape = value\n\n    @property\n    def size(self):\n        \"\"\"The size of this parameter's value array.\"\"\"\n\n        return np.size(self.value)\n\n    @property\n    def std(self):\n        \"\"\"Standard deviation, if available from fit.\"\"\"\n\n        return self._std\n\n    @std.setter\n    def std(self, value):\n\n        self._std = value\n\n    @property\n    def prior(self):\n        return self._prior\n\n    @prior.setter\n    def prior(self, val):\n        self._prior = val\n\n    @property\n    def posterior(self):\n        return self._posterior\n\n    @posterior.setter\n    def posterior(self, val):\n        self._posterior = val\n\n    @property\n    def fixed(self):\n        \"\"\"\n        Boolean indicating if the parameter is kept fixed during fitting.\n        \"\"\"\n        return self._fixed\n\n    @fixed.setter\n    def fixed(self, value):\n        \"\"\" Fix a parameter. \"\"\"\n        if not isinstance(value, bool):\n            raise ValueError(\"Value must be boolean\")\n        self._fixed = value\n\n    @property\n    def tied(self):\n        \"\"\"\n        Indicates that this parameter is linked to another one.\n\n        A callable which provides the relationship of the two parameters.\n        \"\"\"\n\n        return self._tied\n\n    @tied.setter\n    def tied(self, value):\n        \"\"\"Tie a parameter\"\"\"\n\n        if not callable(value) and value not in (False, None):\n            raise TypeError(\"Tied must be a callable or set to False or None\")\n        self._tied = value\n\n    @property\n    def bounds(self):\n        \"\"\"The minimum and maximum values of a parameter as a tuple\"\"\"\n\n        return self._bounds\n\n    @bounds.setter\n    def bounds(self, value):\n        \"\"\"Set the minimum and maximum values of a parameter from a tuple\"\"\"\n\n        _min, _max = value\n        if _min is not None:\n            if not isinstance(_min, (numbers.Number, Quantity)):\n                raise TypeError(\"Min value must be a number or a Quantity\")\n            if isinstance(_min, Quantity):\n                _min = float(_min.value)\n            else:\n                _min = float(_min)\n\n        if _max is not None:\n            if not isinstance(_max, (numbers.Number, Quantity)):\n                raise TypeError(\"Max value must be a number or a Quantity\")\n            if isinstance(_max, Quantity):\n                _max = float(_max.value)\n            else:\n                _max = float(_max)\n\n        self._bounds = (_min, _max)\n\n    @property\n    def min(self):\n        \"\"\"A value used as a lower bound when fitting a parameter\"\"\"\n\n        return self.bounds[0]\n\n    @min.setter\n    def min(self, value):\n        \"\"\"Set a minimum value of a parameter\"\"\"\n\n        self.bounds = (value, self.max)\n\n    @property\n    def max(self):\n        \"\"\"A value used as an upper bound when fitting a parameter\"\"\"\n\n        return self.bounds[1]\n\n    @max.setter\n    def max(self, value):\n        \"\"\"Set a maximum value of a parameter.\"\"\"\n\n        self.bounds = (self.min, value)\n\n    @property\n    def validator(self):\n        \"\"\"\n        Used as a decorator to set the validator method for a `Parameter`.\n        The validator method validates any value set for that parameter.\n        It takes two arguments--``self``, which refers to the `Model`\n        instance (remember, this is a method defined on a `Model`), and\n        the value being set for this parameter.  The validator method's\n        return value is ignored, but it may raise an exception if the value\n        set on the parameter is invalid (typically an `InputParameterError`\n        should be raised, though this is not currently a requirement).\n\n        \"\"\"\n\n        def validator(func, self=self):\n            if callable(func):\n                self._validator = func\n                return self\n            else:\n                raise ValueError(\"This decorator method expects a callable.\\n\"\n                                 \"The use of this method as a direct validator is\\n\"\n                                 \"deprecated; use the new validate method instead\\n\")\n        return validator\n\n    def validate(self, value):\n        \"\"\" Run the validator on this parameter\"\"\"\n        if self._validator is not None and self._model is not None:\n            self._validator(self._model, value)\n\n    def copy(self, name=None, description=None, default=None, unit=None,\n             getter=None, setter=None, fixed=False, tied=False, min=None,\n             max=None, bounds=None, prior=None, posterior=None):\n        \"\"\"\n        Make a copy of this `Parameter`, overriding any of its core attributes\n        in the process (or an exact copy).\n\n        The arguments to this method are the same as those for the `Parameter`\n        initializer.  This simply returns a new `Parameter` instance with any\n        or all of the attributes overridden, and so returns the equivalent of:\n\n        .. code:: python\n\n            Parameter(self.name, self.description, ...)\n\n        \"\"\"\n\n        kwargs = locals().copy()\n        del kwargs['self']\n\n        for key, value in kwargs.items():\n            if value is None:\n                # Annoying special cases for min/max where are just aliases for\n                # the components of bounds\n                if key in ('min', 'max'):\n                    continue\n                else:\n                    if hasattr(self, key):\n                        value = getattr(self, key)\n                    elif hasattr(self, '_' + key):\n                        value = getattr(self, '_' + key)\n                kwargs[key] = value\n\n        return self.__class__(**kwargs)\n\n    @property\n    def model(self):\n        \"\"\" Return the model this  parameter is associated with.\"\"\"\n        return self._model\n\n    @model.setter\n    def model(self, value):\n        self._model = value\n        self._setter = self._create_value_wrapper(self._setter, value)\n        self._getter = self._create_value_wrapper(self._getter, value)\n        if self._model_required:\n            if self._default is not None:\n                self.value = self._default\n            else:\n                self._value = None\n\n    @property\n    def _raw_value(self):\n        \"\"\"\n        Currently for internal use only.\n\n        Like Parameter.value but does not pass the result through\n        Parameter.getter.  By design this should only be used from bound\n        parameters.\n\n        This will probably be removed are retweaked at some point in the\n        process of rethinking how parameter values are stored/updated.\n        \"\"\"\n        if self._setter:\n            return self._internal_value\n        return self.value\n\n    def _create_value_wrapper(self, wrapper, model):\n        \"\"\"Wraps a getter/setter function to support optionally passing in\n        a reference to the model object as the second argument.\n        If a model is tied to this parameter and its getter/setter supports\n        a second argument then this creates a partial function using the model\n        instance as the second argument.\n        \"\"\"\n\n        if isinstance(wrapper, np.ufunc):\n            if wrapper.nin != 1:\n                raise TypeError(\"A numpy.ufunc used for Parameter \"\n                                \"getter/setter may only take one input \"\n                                \"argument\")\n        elif wrapper is None:\n            # Just allow non-wrappers to fall through silently, for convenience\n            return None\n        else:\n            inputs, _ = get_inputs_and_params(wrapper)\n            nargs = len(inputs)\n\n            if nargs == 1:\n                pass\n            elif nargs == 2:\n                self._model_required = True\n                if model is not None:\n                    # Don't make a partial function unless we're tied to a\n                    # specific model instance\n                    model_arg = inputs[1].name\n                    wrapper = functools.partial(wrapper, **{model_arg: model})\n            else:\n                raise TypeError(\"Parameter getter/setter must be a function \"\n                                \"of either one or two arguments\")\n\n        return wrapper\n\n    def __array__(self, dtype=None):\n        # Make np.asarray(self) work a little more straightforwardly\n        arr = np.asarray(self.value, dtype=dtype)\n\n        if self.unit is not None:\n            arr = Quantity(arr, self.unit, copy=False)\n\n        return arr\n\n    def __bool__(self):\n        return bool(np.all(self.value))\n\n    __add__ = _binary_arithmetic_operation(operator.add)\n    __radd__ = _binary_arithmetic_operation(operator.add, reflected=True)\n    __sub__ = _binary_arithmetic_operation(operator.sub)\n    __rsub__ = _binary_arithmetic_operation(operator.sub, reflected=True)\n    __mul__ = _binary_arithmetic_operation(operator.mul)\n    __rmul__ = _binary_arithmetic_operation(operator.mul, reflected=True)\n    __pow__ = _binary_arithmetic_operation(operator.pow)\n    __rpow__ = _binary_arithmetic_operation(operator.pow, reflected=True)\n    __truediv__ = _binary_arithmetic_operation(operator.truediv)\n    __rtruediv__ = _binary_arithmetic_operation(operator.truediv,\n                                                reflected=True)\n    __eq__ = _binary_comparison_operation(operator.eq)\n    __ne__ = _binary_comparison_operation(operator.ne)\n    __lt__ = _binary_comparison_operation(operator.lt)\n    __gt__ = _binary_comparison_operation(operator.gt)\n    __le__ = _binary_comparison_operation(operator.le)\n    __ge__ = _binary_comparison_operation(operator.ge)\n    __neg__ = _unary_arithmetic_operation(operator.neg)\n    __abs__ = _unary_arithmetic_operation(operator.abs)\n\n\ndef param_repr_oneline(param):\n    \"\"\"\n    Like array_repr_oneline but works on `Parameter` objects and supports\n    rendering parameters with units like quantities.\n    \"\"\"\n\n    out = array_repr_oneline(param.value)\n    if param.unit is not None:\n        out = f'{out} {param.unit!s}'\n    return out\n", 711], "/astropy__astropy/astropy/units/utils.py": ["# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\"\"\"\nMiscellaneous utilities for `astropy.units`.\n\nNone of the functions in the module are meant for use outside of the\npackage.\n\"\"\"\n\nimport io\nimport re\nfrom fractions import Fraction\n\nimport numpy as np\nfrom numpy import finfo\n\n\n_float_finfo = finfo(float)\n# take float here to ensure comparison with another float is fast\n# give a little margin since often multiple calculations happened\n_JUST_BELOW_UNITY = float(1.-4.*_float_finfo.epsneg)\n_JUST_ABOVE_UNITY = float(1.+4.*_float_finfo.eps)\n\n\ndef _get_first_sentence(s):\n    \"\"\"\n    Get the first sentence from a string and remove any carriage\n    returns.\n    \"\"\"\n\n    x = re.match(r\".*?\\S\\.\\s\", s)\n    if x is not None:\n        s = x.group(0)\n    return s.replace('\\n', ' ')\n\n\ndef _iter_unit_summary(namespace):\n    \"\"\"\n    Generates the ``(unit, doc, represents, aliases, prefixes)``\n    tuple used to format the unit summary docs in `generate_unit_summary`.\n    \"\"\"\n\n    from . import core\n\n    # Get all of the units, and keep track of which ones have SI\n    # prefixes\n    units = []\n    has_prefixes = set()\n    for key, val in namespace.items():\n        # Skip non-unit items\n        if not isinstance(val, core.UnitBase):\n            continue\n\n        # Skip aliases\n        if key != val.name:\n            continue\n\n        if isinstance(val, core.PrefixUnit):\n            # This will return the root unit that is scaled by the prefix\n            # attached to it\n            has_prefixes.add(val._represents.bases[0].name)\n        else:\n            units.append(val)\n\n    # Sort alphabetically, case insensitive\n    units.sort(key=lambda x: x.name.lower())\n\n    for unit in units:\n        doc = _get_first_sentence(unit.__doc__).strip()\n        represents = ''\n        if isinstance(unit, core.Unit):\n            represents = f\":math:`{unit._represents.to_string('latex')[1:-1]}`\"\n        aliases = ', '.join(f'``{x}``' for x in unit.aliases)\n\n        yield (unit, doc, represents, aliases, 'Yes' if unit.name in has_prefixes else 'No')\n\n\ndef generate_unit_summary(namespace):\n    \"\"\"\n    Generates a summary of units from a given namespace.  This is used\n    to generate the docstring for the modules that define the actual\n    units.\n\n    Parameters\n    ----------\n    namespace : dict\n        A namespace containing units.\n\n    Returns\n    -------\n    docstring : str\n        A docstring containing a summary table of the units.\n    \"\"\"\n\n    docstring = io.StringIO()\n\n    docstring.write(\"\"\"\n.. list-table:: Available Units\n   :header-rows: 1\n   :widths: 10 20 20 20 1\n\n   * - Unit\n     - Description\n     - Represents\n     - Aliases\n     - SI Prefixes\n\"\"\")\n\n    for unit_summary in _iter_unit_summary(namespace):\n        docstring.write(\"\"\"\n   * - ``{}``\n     - {}\n     - {}\n     - {}\n     - {}\n\"\"\".format(*unit_summary))\n\n    return docstring.getvalue()\n\n\ndef generate_prefixonly_unit_summary(namespace):\n    \"\"\"\n    Generates table entries for units in a namespace that are just prefixes\n    without the base unit.  Note that this is intended to be used *after*\n    `generate_unit_summary` and therefore does not include the table header.\n\n    Parameters\n    ----------\n    namespace : dict\n        A namespace containing units that are prefixes but do *not* have the\n        base unit in their namespace.\n\n    Returns\n    -------\n    docstring : str\n        A docstring containing a summary table of the units.\n    \"\"\"\n    from . import PrefixUnit\n\n    faux_namespace = {}\n    for nm, unit in namespace.items():\n        if isinstance(unit, PrefixUnit):\n            base_unit = unit.represents.bases[0]\n            faux_namespace[base_unit.name] = base_unit\n\n    docstring = io.StringIO()\n\n    for unit_summary in _iter_unit_summary(faux_namespace):\n        docstring.write(\"\"\"\n   * - Prefixes for ``{}``\n     - {} prefixes\n     - {}\n     - {}\n     - Only\n\"\"\".format(*unit_summary))\n\n    return docstring.getvalue()\n\n\ndef is_effectively_unity(value):\n    # value is *almost* always real, except, e.g., for u.mag**0.5, when\n    # it will be complex.  Use try/except to ensure normal case is fast\n    try:\n        return _JUST_BELOW_UNITY <= value <= _JUST_ABOVE_UNITY\n    except TypeError:  # value is complex\n        return (_JUST_BELOW_UNITY <= value.real <= _JUST_ABOVE_UNITY and\n                _JUST_BELOW_UNITY <= value.imag + 1 <= _JUST_ABOVE_UNITY)\n\n\ndef sanitize_scale(scale):\n    if is_effectively_unity(scale):\n        return 1.0\n\n    # Maximum speed for regular case where scale is a float.\n    if scale.__class__ is float:\n        return scale\n\n    # We cannot have numpy scalars, since they don't autoconvert to\n    # complex if necessary.  They are also slower.\n    if hasattr(scale, 'dtype'):\n        scale = scale.item()\n\n    # All classes that scale can be (int, float, complex, Fraction)\n    # have an \"imag\" attribute.\n    if scale.imag:\n        if abs(scale.real) > abs(scale.imag):\n            if is_effectively_unity(scale.imag/scale.real + 1):\n                return scale.real\n\n        elif is_effectively_unity(scale.real/scale.imag + 1):\n            return complex(0., scale.imag)\n\n        return scale\n\n    else:\n        return scale.real\n\n\ndef maybe_simple_fraction(p, max_denominator=100):\n    \"\"\"Fraction very close to x with denominator at most max_denominator.\n\n    The fraction has to be such that fraction/x is unity to within 4 ulp.\n    If such a fraction does not exist, returns the float number.\n\n    The algorithm is that of `fractions.Fraction.limit_denominator`, but\n    sped up by not creating a fraction to start with.\n    \"\"\"\n    if p == 0 or p.__class__ is int:\n        return p\n    n, d = p.as_integer_ratio()\n    a = n // d\n    # Normally, start with 0,1 and 1,0; here we have applied first iteration.\n    n0, d0 = 1, 0\n    n1, d1 = a, 1\n    while d1 <= max_denominator:\n        if _JUST_BELOW_UNITY <= n1/(d1*p) <= _JUST_ABOVE_UNITY:\n            return Fraction(n1, d1)\n        n, d = d, n-a*d\n        a = n // d\n        n0, n1 = n1, n0+a*n1\n        d0, d1 = d1, d0+a*d1\n\n    return p\n\n\ndef validate_power(p):\n    \"\"\"Convert a power to a floating point value, an integer, or a Fraction.\n\n    If a fractional power can be represented exactly as a floating point\n    number, convert it to a float, to make the math much faster; otherwise,\n    retain it as a `fractions.Fraction` object to avoid losing precision.\n    Conversely, if the value is indistinguishable from a rational number with a\n    low-numbered denominator, convert to a Fraction object.\n\n    Parameters\n    ----------\n    p : float, int, Rational, Fraction\n        Power to be converted\n    \"\"\"\n    denom = getattr(p, 'denominator', None)\n    if denom is None:\n        try:\n            p = float(p)\n        except Exception:\n            if not np.isscalar(p):\n                raise ValueError(\"Quantities and Units may only be raised \"\n                                 \"to a scalar power\")\n            else:\n                raise\n\n        # This returns either a (simple) Fraction or the same float.\n        p = maybe_simple_fraction(p)\n        # If still a float, nothing more to be done.\n        if isinstance(p, float):\n            return p\n\n        # Otherwise, check for simplifications.\n        denom = p.denominator\n\n    if denom == 1:\n        p = p.numerator\n\n    elif (denom & (denom - 1)) == 0:\n        # Above is a bit-twiddling hack to see if denom is a power of two.\n        # If so, float does not lose precision and will speed things up.\n        p = float(p)\n\n    return p\n\n\ndef resolve_fractions(a, b):\n    \"\"\"\n    If either input is a Fraction, convert the other to a Fraction\n    (at least if it does not have a ridiculous denominator).\n    This ensures that any operation involving a Fraction will use\n    rational arithmetic and preserve precision.\n    \"\"\"\n    # We short-circuit on the most common cases of int and float, since\n    # isinstance(a, Fraction) is very slow for any non-Fraction instances.\n    a_is_fraction = (a.__class__ is not int and a.__class__ is not float and\n                     isinstance(a, Fraction))\n    b_is_fraction = (b.__class__ is not int and b.__class__ is not float and\n                     isinstance(b, Fraction))\n    if a_is_fraction and not b_is_fraction:\n        b = maybe_simple_fraction(b)\n    elif not a_is_fraction and b_is_fraction:\n        a = maybe_simple_fraction(a)\n    return a, b\n\n\ndef quantity_asanyarray(a, dtype=None):\n    from .quantity import Quantity\n    if not isinstance(a, np.ndarray) and not np.isscalar(a) and any(isinstance(x, Quantity) for x in a):\n        return Quantity(a, dtype=dtype)\n    else:\n        return np.asanyarray(a, dtype=dtype)\n", 295], "/astropy__astropy/astropy/utils/shapes.py": ["# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\"\"\"The ShapedLikeNDArray mixin class and shape-related functions.\"\"\"\n\nimport abc\nfrom itertools import zip_longest\n\nimport numpy as np\n\n__all__ = ['NDArrayShapeMethods', 'ShapedLikeNDArray',\n           'check_broadcast', 'IncompatibleShapeError', 'unbroadcast']\n\n\nclass NDArrayShapeMethods:\n    \"\"\"Mixin class to provide shape-changing methods.\n\n    The class proper is assumed to have some underlying data, which are arrays\n    or array-like structures. It must define a ``shape`` property, which gives\n    the shape of those data, as well as an ``_apply`` method that creates a new\n    instance in which a `~numpy.ndarray` method has been applied to those.\n\n    Furthermore, for consistency with `~numpy.ndarray`, it is recommended to\n    define a setter for the ``shape`` property, which, like the\n    `~numpy.ndarray.shape` property allows in-place reshaping the internal data\n    (and, unlike the ``reshape`` method raises an exception if this is not\n    possible).\n\n    This class only provides the shape-changing methods and is meant in\n    particular for `~numpy.ndarray` subclasses that need to keep track of\n    other arrays.  For other classes, `~astropy.utils.shapes.ShapedLikeNDArray`\n    is recommended.\n\n    \"\"\"\n\n    # Note to developers: if new methods are added here, be sure to check that\n    # they work properly with the classes that use this, such as Time and\n    # BaseRepresentation, i.e., look at their ``_apply`` methods and add\n    # relevant tests.  This is particularly important for methods that imply\n    # copies rather than views of data (see the special-case treatment of\n    # 'flatten' in Time).\n\n    def __getitem__(self, item):\n        return self._apply('__getitem__', item)\n\n    def copy(self, *args, **kwargs):\n        \"\"\"Return an instance containing copies of the internal data.\n\n        Parameters are as for :meth:`~numpy.ndarray.copy`.\n        \"\"\"\n        return self._apply('copy', *args, **kwargs)\n\n    def reshape(self, *args, **kwargs):\n        \"\"\"Returns an instance containing the same data with a new shape.\n\n        Parameters are as for :meth:`~numpy.ndarray.reshape`.  Note that it is\n        not always possible to change the shape of an array without copying the\n        data (see :func:`~numpy.reshape` documentation). If you want an error\n        to be raise if the data is copied, you should assign the new shape to\n        the shape attribute (note: this may not be implemented for all classes\n        using ``NDArrayShapeMethods``).\n        \"\"\"\n        return self._apply('reshape', *args, **kwargs)\n\n    def ravel(self, *args, **kwargs):\n        \"\"\"Return an instance with the array collapsed into one dimension.\n\n        Parameters are as for :meth:`~numpy.ndarray.ravel`. Note that it is\n        not always possible to unravel an array without copying the data.\n        If you want an error to be raise if the data is copied, you should\n        should assign shape ``(-1,)`` to the shape attribute.\n        \"\"\"\n        return self._apply('ravel', *args, **kwargs)\n\n    def flatten(self, *args, **kwargs):\n        \"\"\"Return a copy with the array collapsed into one dimension.\n\n        Parameters are as for :meth:`~numpy.ndarray.flatten`.\n        \"\"\"\n        return self._apply('flatten', *args, **kwargs)\n\n    def transpose(self, *args, **kwargs):\n        \"\"\"Return an instance with the data transposed.\n\n        Parameters are as for :meth:`~numpy.ndarray.transpose`.  All internal\n        data are views of the data of the original.\n        \"\"\"\n        return self._apply('transpose', *args, **kwargs)\n\n    @property\n    def T(self):\n        \"\"\"Return an instance with the data transposed.\n\n        Parameters are as for :attr:`~numpy.ndarray.T`.  All internal\n        data are views of the data of the original.\n        \"\"\"\n        if self.ndim < 2:\n            return self\n        else:\n            return self.transpose()\n\n    def swapaxes(self, *args, **kwargs):\n        \"\"\"Return an instance with the given axes interchanged.\n\n        Parameters are as for :meth:`~numpy.ndarray.swapaxes`:\n        ``axis1, axis2``.  All internal data are views of the data of the\n        original.\n        \"\"\"\n        return self._apply('swapaxes', *args, **kwargs)\n\n    def diagonal(self, *args, **kwargs):\n        \"\"\"Return an instance with the specified diagonals.\n\n        Parameters are as for :meth:`~numpy.ndarray.diagonal`.  All internal\n        data are views of the data of the original.\n        \"\"\"\n        return self._apply('diagonal', *args, **kwargs)\n\n    def squeeze(self, *args, **kwargs):\n        \"\"\"Return an instance with single-dimensional shape entries removed\n\n        Parameters are as for :meth:`~numpy.ndarray.squeeze`.  All internal\n        data are views of the data of the original.\n        \"\"\"\n        return self._apply('squeeze', *args, **kwargs)\n\n    def take(self, indices, axis=None, out=None, mode='raise'):\n        \"\"\"Return a new instance formed from the elements at the given indices.\n\n        Parameters are as for :meth:`~numpy.ndarray.take`, except that,\n        obviously, no output array can be given.\n        \"\"\"\n        if out is not None:\n            return NotImplementedError(\"cannot pass 'out' argument to 'take.\")\n\n        return self._apply('take', indices, axis=axis, mode=mode)\n\n\nclass ShapedLikeNDArray(NDArrayShapeMethods, metaclass=abc.ABCMeta):\n    \"\"\"Mixin class to provide shape-changing methods.\n\n    The class proper is assumed to have some underlying data, which are arrays\n    or array-like structures. It must define a ``shape`` property, which gives\n    the shape of those data, as well as an ``_apply`` method that creates a new\n    instance in which a `~numpy.ndarray` method has been applied to those.\n\n    Furthermore, for consistency with `~numpy.ndarray`, it is recommended to\n    define a setter for the ``shape`` property, which, like the\n    `~numpy.ndarray.shape` property allows in-place reshaping the internal data\n    (and, unlike the ``reshape`` method raises an exception if this is not\n    possible).\n\n    This class also defines default implementations for ``ndim`` and ``size``\n    properties, calculating those from the ``shape``.  These can be overridden\n    by subclasses if there are faster ways to obtain those numbers.\n\n    \"\"\"\n\n    # Note to developers: if new methods are added here, be sure to check that\n    # they work properly with the classes that use this, such as Time and\n    # BaseRepresentation, i.e., look at their ``_apply`` methods and add\n    # relevant tests.  This is particularly important for methods that imply\n    # copies rather than views of data (see the special-case treatment of\n    # 'flatten' in Time).\n\n    @property\n    @abc.abstractmethod\n    def shape(self):\n        \"\"\"The shape of the underlying data.\"\"\"\n\n    @abc.abstractmethod\n    def _apply(method, *args, **kwargs):\n        \"\"\"Create a new instance, with ``method`` applied to underlying data.\n\n        The method is any of the shape-changing methods for `~numpy.ndarray`\n        (``reshape``, ``swapaxes``, etc.), as well as those picking particular\n        elements (``__getitem__``, ``take``, etc.). It will be applied to the\n        underlying arrays (e.g., ``jd1`` and ``jd2`` in `~astropy.time.Time`),\n        with the results used to create a new instance.\n\n        Parameters\n        ----------\n        method : str\n            Method to be applied to the instance's internal data arrays.\n        args : tuple\n            Any positional arguments for ``method``.\n        kwargs : dict\n            Any keyword arguments for ``method``.\n\n        \"\"\"\n\n    @property\n    def ndim(self):\n        \"\"\"The number of dimensions of the instance and underlying arrays.\"\"\"\n        return len(self.shape)\n\n    @property\n    def size(self):\n        \"\"\"The size of the object, as calculated from its shape.\"\"\"\n        size = 1\n        for sh in self.shape:\n            size *= sh\n        return size\n\n    @property\n    def isscalar(self):\n        return self.shape == ()\n\n    def __len__(self):\n        if self.isscalar:\n            raise TypeError(\"Scalar {!r} object has no len()\"\n                            .format(self.__class__.__name__))\n        return self.shape[0]\n\n    def __bool__(self):\n        \"\"\"Any instance should evaluate to True, except when it is empty.\"\"\"\n        return self.size > 0\n\n    def __getitem__(self, item):\n        try:\n            return self._apply('__getitem__', item)\n        except IndexError:\n            if self.isscalar:\n                raise TypeError('scalar {!r} object is not subscriptable.'\n                                .format(self.__class__.__name__))\n            else:\n                raise\n\n    def __iter__(self):\n        if self.isscalar:\n            raise TypeError('scalar {!r} object is not iterable.'\n                            .format(self.__class__.__name__))\n\n        # We cannot just write a generator here, since then the above error\n        # would only be raised once we try to use the iterator, rather than\n        # upon its definition using iter(self).\n        def self_iter():\n            for idx in range(len(self)):\n                yield self[idx]\n\n        return self_iter()\n\n    # Functions that change shape or essentially do indexing.\n    _APPLICABLE_FUNCTIONS = {\n        np.moveaxis, np.rollaxis,\n        np.atleast_1d, np.atleast_2d, np.atleast_3d, np.expand_dims,\n        np.broadcast_to, np.flip, np.fliplr, np.flipud, np.rot90,\n        np.roll, np.delete,\n        }\n\n    # Functions that themselves defer to a method. Those are all\n    # defined in np.core.fromnumeric, but exclude alen as well as\n    # sort and partition, which make copies before calling the method.\n    _METHOD_FUNCTIONS = {getattr(np, name):\n                         {'amax': 'max', 'amin': 'min', 'around': 'round',\n                          'round_': 'round', 'alltrue': 'all',\n                          'sometrue': 'any'}.get(name, name)\n                         for name in np.core.fromnumeric.__all__\n                         if name not in ['alen', 'sort', 'partition']}\n    # Add np.copy, which we may as well let defer to our method.\n    _METHOD_FUNCTIONS[np.copy] = 'copy'\n\n    # Could be made to work with a bit of effort:\n    # np.where, np.compress, np.extract,\n    # np.diag_indices_from, np.triu_indices_from, np.tril_indices_from\n    # np.tile, np.repeat (need .repeat method)\n    # TODO: create a proper implementation.\n    # Furthermore, some arithmetic functions such as np.mean, np.median,\n    # could work for Time, and many more for TimeDelta, so those should\n    # override __array_function__.\n    def __array_function__(self, function, types, args, kwargs):\n        \"\"\"Wrap numpy functions that make sense.\"\"\"\n        if function in self._APPLICABLE_FUNCTIONS:\n            if function is np.broadcast_to:\n                # Ensure that any ndarray subclasses used are\n                # properly propagated.\n                kwargs.setdefault('subok', True)\n            elif (function in {np.atleast_1d,\n                               np.atleast_2d,\n                               np.atleast_3d}\n                  and len(args) > 1):\n                return tuple(function(arg, **kwargs) for arg in args)\n\n            if self is not args[0]:\n                return NotImplemented\n\n            return self._apply(function, *args[1:], **kwargs)\n\n        # For functions that defer to methods, use the corresponding\n        # method/attribute if we have it.  Otherwise, fall through.\n        if self is args[0] and function in self._METHOD_FUNCTIONS:\n            method = getattr(self, self._METHOD_FUNCTIONS[function], None)\n            if method is not None:\n                if callable(method):\n                    return method(*args[1:], **kwargs)\n                else:\n                    # For np.shape, etc., just return the attribute.\n                    return method\n\n        # Fall-back, just pass the arguments on since perhaps the function\n        # works already (see above).\n        return function.__wrapped__(*args, **kwargs)\n\n\nclass IncompatibleShapeError(ValueError):\n    def __init__(self, shape_a, shape_a_idx, shape_b, shape_b_idx):\n        super().__init__(shape_a, shape_a_idx, shape_b, shape_b_idx)\n\n\ndef check_broadcast(*shapes):\n    \"\"\"\n    Determines whether two or more Numpy arrays can be broadcast with each\n    other based on their shape tuple alone.\n\n    Parameters\n    ----------\n    *shapes : tuple\n        All shapes to include in the comparison.  If only one shape is given it\n        is passed through unmodified.  If no shapes are given returns an empty\n        `tuple`.\n\n    Returns\n    -------\n    broadcast : `tuple`\n        If all shapes are mutually broadcastable, returns a tuple of the full\n        broadcast shape.\n    \"\"\"\n\n    if len(shapes) == 0:\n        return ()\n    elif len(shapes) == 1:\n        return shapes[0]\n\n    reversed_shapes = (reversed(shape) for shape in shapes)\n\n    full_shape = []\n\n    for dims in zip_longest(*reversed_shapes, fillvalue=1):\n        max_dim = 1\n        max_dim_idx = None\n        for idx, dim in enumerate(dims):\n            if dim == 1:\n                continue\n\n            if max_dim == 1:\n                # The first dimension of size greater than 1\n                max_dim = dim\n                max_dim_idx = idx\n            elif dim != max_dim:\n                raise IncompatibleShapeError(\n                    shapes[max_dim_idx], max_dim_idx, shapes[idx], idx)\n\n        full_shape.append(max_dim)\n\n    return tuple(full_shape[::-1])\n\n\ndef unbroadcast(array):\n    \"\"\"\n    Given an array, return a new array that is the smallest subset of the\n    original array that can be re-broadcasted back to the original array.\n\n    See https://stackoverflow.com/questions/40845769/un-broadcasting-numpy-arrays\n    for more details.\n    \"\"\"\n\n    if array.ndim == 0:\n        return array\n\n    array = array[tuple((slice(0, 1) if stride == 0 else slice(None))\n                        for stride in array.strides)]\n\n    # Remove leading ones, which are not needed in numpy broadcasting.\n    first_not_unity = next((i for (i, s) in enumerate(array.shape) if s > 1),\n                           array.ndim)\n\n    return array.reshape(array.shape[first_not_unity:])\n", 375], "/astropy__astropy/astropy/modeling/utils.py": ["# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\"\"\"\nThis module provides utility functions for the models package.\n\"\"\"\n# pylint: disable=invalid-name\nfrom collections import UserDict\nfrom collections.abc import MutableMapping\nfrom inspect import signature\n\nimport numpy as np\nimport warnings\n\nfrom astropy import units as u\nfrom astropy.utils.decorators import deprecated\n\n__doctest_skip__ = ['AliasDict']\n__all__ = ['AliasDict', 'poly_map_domain', 'comb', 'ellipse_extent']\n\n\ndeprecation_msg = \"\"\"\nAliasDict is deprecated because it no longer serves a function anywhere\ninside astropy.\n\"\"\"\n\n\n@deprecated('5.0', deprecation_msg)\nclass AliasDict(MutableMapping):\n    \"\"\"\n    Creates a `dict` like object that wraps an existing `dict` or other\n    `MutableMapping`, along with a `dict` of *key aliases* that translate\n    between specific keys in this dict to different keys in the underlying\n    dict.\n\n    In other words, keys that do not have an associated alias are accessed and\n    stored like a normal `dict`.  However, a key that has an alias is accessed\n    and stored to the \"parent\" dict via the alias.\n\n    Parameters\n    ----------\n    parent : dict-like\n        The parent `dict` that aliased keys and accessed from and stored to.\n\n    aliases : dict-like\n        Maps keys in this dict to their associated keys in the parent dict.\n\n    Examples\n    --------\n\n    >>> parent = {'a': 1, 'b': 2, 'c': 3}\n    >>> aliases = {'foo': 'a', 'bar': 'c'}\n    >>> alias_dict = AliasDict(parent, aliases)\n    >>> alias_dict['foo']\n    1\n    >>> alias_dict['bar']\n    3\n\n    Keys in the original parent dict are not visible if they were not\n    aliased:\n\n    >>> alias_dict['b']\n    Traceback (most recent call last):\n    ...\n    KeyError: 'b'\n\n    Likewise, updates to aliased keys are reflected back in the parent dict:\n\n    >>> alias_dict['foo'] = 42\n    >>> alias_dict['foo']\n    42\n    >>> parent['a']\n    42\n\n    However, updates/insertions to keys that are *not* aliased are not\n    reflected in the parent dict:\n\n    >>> alias_dict['qux'] = 99\n    >>> alias_dict['qux']\n    99\n    >>> 'qux' in parent\n    False\n\n    In particular, updates on the `AliasDict` to a key that is equal to\n    one of the aliased keys in the parent dict does *not* update the parent\n    dict.  For example, ``alias_dict`` aliases ``'foo'`` to ``'a'``.  But\n    assigning to a key ``'a'`` on the `AliasDict` does not impact the\n    parent:\n\n    >>> alias_dict['a'] = 'nope'\n    >>> alias_dict['a']\n    'nope'\n    >>> parent['a']\n    42\n    \"\"\"\n\n    _store_type = dict\n    \"\"\"\n    Subclasses may override this to use other mapping types as the underlying\n    storage, for example an `OrderedDict`.  However, even in this case\n    additional work may be needed to get things like the ordering right.\n    \"\"\"\n\n    def __init__(self, parent, aliases):\n        self._parent = parent\n        self._store = self._store_type()\n        self._aliases = dict(aliases)\n\n    def __getitem__(self, key):\n        if key in self._aliases:\n            try:\n                return self._parent[self._aliases[key]]\n            except KeyError:\n                raise KeyError(key)\n\n        return self._store[key]\n\n    def __setitem__(self, key, value):\n        if key in self._aliases:\n            self._parent[self._aliases[key]] = value\n        else:\n            self._store[key] = value\n\n    def __delitem__(self, key):\n        if key in self._aliases:\n            try:\n                del self._parent[self._aliases[key]]\n            except KeyError:\n                raise KeyError(key)\n        else:\n            del self._store[key]\n\n    def __iter__(self):\n        \"\"\"\n        First iterates over keys from the parent dict (if the aliased keys are\n        present in the parent), followed by any keys in the local store.\n        \"\"\"\n\n        for key, alias in self._aliases.items():\n            if alias in self._parent:\n                yield key\n\n        for key in self._store:\n            yield key\n\n    def __len__(self):\n        return len(list(iter(self)))\n\n    def __repr__(self):\n        # repr() just like any other dict--this should look transparent\n        store_copy = self._store_type()\n        for key, alias in self._aliases.items():\n            if alias in self._parent:\n                store_copy[key] = self._parent[alias]\n\n        store_copy.update(self._store)\n\n        return repr(store_copy)\n\n\ndef make_binary_operator_eval(oper, f, g):\n    \"\"\"\n    Given a binary operator (as a callable of two arguments) ``oper`` and\n    two callables ``f`` and ``g`` which accept the same arguments,\n    returns a *new* function that takes the same arguments as ``f`` and ``g``,\n    but passes the outputs of ``f`` and ``g`` in the given ``oper``.\n\n    ``f`` and ``g`` are assumed to return tuples (which may be 1-tuples).  The\n    given operator is applied element-wise to tuple outputs).\n\n    Example\n    -------\n\n    >>> from operator import add\n    >>> def prod(x, y):\n    ...     return (x * y,)\n    ...\n    >>> sum_of_prod = make_binary_operator_eval(add, prod, prod)\n    >>> sum_of_prod(3, 5)\n    (30,)\n    \"\"\"\n\n    return lambda inputs, params: \\\n            tuple(oper(x, y) for x, y in zip(f(inputs, params),\n                                             g(inputs, params)))\n\n\ndef poly_map_domain(oldx, domain, window):\n    \"\"\"\n    Map domain into window by shifting and scaling.\n\n    Parameters\n    ----------\n    oldx : array\n          original coordinates\n    domain : list or tuple of length 2\n          function domain\n    window : list or tuple of length 2\n          range into which to map the domain\n    \"\"\"\n    domain = np.array(domain, dtype=np.float64)\n    window = np.array(window, dtype=np.float64)\n    if domain.shape != (2,) or window.shape != (2,):\n        raise ValueError('Expected \"domain\" and \"window\" to be a tuple of size 2.')\n    scl = (window[1] - window[0]) / (domain[1] - domain[0])\n    off = (window[0] * domain[1] - window[1] * domain[0]) / (domain[1] - domain[0])\n    return off + scl * oldx\n\n\ndef _validate_domain_window(value):\n    if value is not None:\n        if np.asanyarray(value).shape != (2, ):\n            raise ValueError('domain and window should be tuples of size 2.')\n        return tuple(value)\n    return value\n\n\ndef comb(N, k):\n    \"\"\"\n    The number of combinations of N things taken k at a time.\n\n    Parameters\n    ----------\n    N : int, array\n        Number of things.\n    k : int, array\n        Number of elements taken.\n\n    \"\"\"\n    if (k > N) or (N < 0) or (k < 0):\n        return 0\n    val = 1\n    for j in range(min(k, N - k)):\n        val = (val * (N - j)) / (j + 1)\n    return val\n\n\ndef array_repr_oneline(array):\n    \"\"\"\n    Represents a multi-dimensional Numpy array flattened onto a single line.\n    \"\"\"\n    r = np.array2string(array, separator=', ', suppress_small=True)\n    return ' '.join(l.strip() for l in r.splitlines())\n\n\ndef combine_labels(left, right):\n    \"\"\"\n    For use with the join operator &: Combine left input/output labels with\n    right input/output labels.\n\n    If none of the labels conflict then this just returns a sum of tuples.\n    However if *any* of the labels conflict, this appends '0' to the left-hand\n    labels and '1' to the right-hand labels so there is no ambiguity).\n    \"\"\"\n\n    if set(left).intersection(right):\n        left = tuple(l + '0' for l in left)\n        right = tuple(r + '1' for r in right)\n\n    return left + right\n\n\ndef ellipse_extent(a, b, theta):\n    \"\"\"\n    Calculates the extent of a box encapsulating a rotated 2D ellipse.\n\n    Parameters\n    ----------\n    a : float or `~astropy.units.Quantity`\n        Major axis.\n    b : float or `~astropy.units.Quantity`\n        Minor axis.\n    theta : float or `~astropy.units.Quantity` ['angle']\n        Rotation angle. If given as a floating-point value, it is assumed to be\n        in radians.\n\n    Returns\n    -------\n    offsets : tuple\n        The absolute value of the offset distances from the ellipse center that\n        define its bounding box region, ``(dx, dy)``.\n\n    Examples\n    --------\n    .. plot::\n        :include-source:\n\n        import numpy as np\n        import matplotlib.pyplot as plt\n        from astropy.modeling.models import Ellipse2D\n        from astropy.modeling.utils import ellipse_extent, render_model\n\n        amplitude = 1\n        x0 = 50\n        y0 = 50\n        a = 30\n        b = 10\n        theta = np.pi/4\n\n        model = Ellipse2D(amplitude, x0, y0, a, b, theta)\n\n        dx, dy = ellipse_extent(a, b, theta)\n\n        limits = [x0 - dx, x0 + dx, y0 - dy, y0 + dy]\n\n        model.bounding_box = limits\n\n        image = render_model(model)\n\n        plt.imshow(image, cmap='binary', interpolation='nearest', alpha=.5,\n                  extent = limits)\n        plt.show()\n    \"\"\"\n\n    t = np.arctan2(-b * np.tan(theta), a)\n    dx = a * np.cos(t) * np.cos(theta) - b * np.sin(t) * np.sin(theta)\n\n    t = np.arctan2(b, a * np.tan(theta))\n    dy = b * np.sin(t) * np.cos(theta) + a * np.cos(t) * np.sin(theta)\n\n    if isinstance(dx, u.Quantity) or isinstance(dy, u.Quantity):\n        return np.abs(u.Quantity([dx, dy]))\n    return np.abs([dx, dy])\n\n\ndef get_inputs_and_params(func):\n    \"\"\"\n    Given a callable, determine the input variables and the\n    parameters.\n\n    Parameters\n    ----------\n    func : callable\n\n    Returns\n    -------\n    inputs, params : tuple\n        Each entry is a list of inspect.Parameter objects\n    \"\"\"\n    sig = signature(func)\n\n    inputs = []\n    params = []\n    for param in sig.parameters.values():\n        if param.kind in (param.VAR_POSITIONAL, param.VAR_KEYWORD):\n            raise ValueError(\"Signature must not have *args or **kwargs\")\n        if param.default == param.empty:\n            inputs.append(param)\n        else:\n            params.append(param)\n\n    return inputs, params\n\n\ndef _combine_equivalency_dict(keys, eq1=None, eq2=None):\n    # Given two dictionaries that give equivalencies for a set of keys, for\n    # example input value names, return a dictionary that includes all the\n    # equivalencies\n    eq = {}\n    for key in keys:\n        eq[key] = []\n        if eq1 is not None and key in eq1:\n            eq[key].extend(eq1[key])\n        if eq2 is not None and key in eq2:\n            eq[key].extend(eq2[key])\n    return eq\n\n\ndef _to_radian(value):\n    \"\"\" Convert ``value`` to radian. \"\"\"\n    if isinstance(value, u.Quantity):\n        return value.to(u.rad)\n    return np.deg2rad(value)\n\n\ndef _to_orig_unit(value, raw_unit=None, orig_unit=None):\n    \"\"\" Convert value with ``raw_unit`` to ``orig_unit``. \"\"\"\n    if raw_unit is not None:\n        return (value * raw_unit).to(orig_unit)\n    return np.rad2deg(value)\n\n\nclass _ConstraintsDict(UserDict):\n    \"\"\"\n    Wrapper around UserDict to allow updating the constraints\n    on a Parameter when the dictionary is updated.\n    \"\"\"\n    def __init__(self, model, constraint_type):\n        self._model = model\n        self.constraint_type = constraint_type\n        c = {}\n        for name in model.param_names:\n            param = getattr(model, name)\n            c[name] = getattr(param, constraint_type)\n        super().__init__(c)\n\n    def __setitem__(self, key, val):\n        super().__setitem__(key, val)\n        param = getattr(self._model, key)\n        setattr(param, self.constraint_type, val)\n\n\nclass _SpecialOperatorsDict(UserDict):\n    \"\"\"\n    Wrapper around UserDict to allow for better tracking of the Special\n    Operators for CompoundModels. This dictionary is structured so that\n    one cannot inadvertently overwrite an existing special operator.\n\n    Parameters\n    ----------\n    unique_id: int\n        the last used unique_id for a SPECIAL OPERATOR\n    special_operators: dict\n        a dictionary containing the special_operators\n\n    Notes\n    -----\n    Direct setting of operators (`dict[key] = value`) into the\n    dictionary has been deprecated in favor of the `.add(name, value)`\n    method, so that unique dictionary keys can be generated and tracked\n    consistently.\n    \"\"\"\n\n    def __init__(self, unique_id=0, special_operators={}):\n        super().__init__(special_operators)\n        self._unique_id = unique_id\n\n    def _set_value(self, key, val):\n        if key in self:\n            raise ValueError(f'Special operator \"{key}\" already exists')\n        else:\n            super().__setitem__(key, val)\n\n    def __setitem__(self, key, val):\n        self._set_value(key, val)\n        warnings.warn(DeprecationWarning(\n            \"\"\"\n            Special operator dictionary assignment has been deprecated.\n            Please use `.add` instead, so that you can capture a unique\n            key for your operator.\n            \"\"\"\n        ))\n\n    def _get_unique_id(self):\n        self._unique_id += 1\n\n        return self._unique_id\n\n    def add(self, operator_name, operator):\n        \"\"\"\n        Adds a special operator to the dictionary, and then returns the\n        unique key that the operator is stored under for later reference.\n\n        Parameters\n        ----------\n        operator_name: str\n            the name for the operator\n        operator: function\n            the actual operator function which will be used\n\n        Returns\n        -------\n        the unique operator key for the dictionary\n            `(operator_name, unique_id)`\n        \"\"\"\n        key = (operator_name, self._get_unique_id())\n\n        self._set_value(key, operator)\n\n        return key\n", 469], "/astropy__astropy/astropy/modeling/separable.py": ["# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\"\"\"\nFunctions to determine if a model is separable, i.e.\nif the model outputs are independent.\n\nIt analyzes ``n_inputs``, ``n_outputs`` and the operators\nin a compound model by stepping through the transforms\nand creating a ``coord_matrix`` of shape (``n_outputs``, ``n_inputs``).\n\n\nEach modeling operator is represented by a function which\ntakes two simple models (or two ``coord_matrix`` arrays) and\nreturns an array of shape (``n_outputs``, ``n_inputs``).\n\n\"\"\"\n\nimport numpy as np\n\nfrom .core import Model, ModelDefinitionError, CompoundModel\nfrom .mappings import Mapping\n\n\n__all__ = [\"is_separable\", \"separability_matrix\"]\n\n\ndef is_separable(transform):\n    \"\"\"\n    A separability test for the outputs of a transform.\n\n    Parameters\n    ----------\n    transform : `~astropy.modeling.core.Model`\n        A (compound) model.\n\n    Returns\n    -------\n    is_separable : ndarray\n        A boolean array with size ``transform.n_outputs`` where\n        each element indicates whether the output is independent\n        and the result of a separable transform.\n\n    Examples\n    --------\n    >>> from astropy.modeling.models import Shift, Scale, Rotation2D, Polynomial2D\n    >>> is_separable(Shift(1) & Shift(2) | Scale(1) & Scale(2))\n        array([ True,  True]...)\n    >>> is_separable(Shift(1) & Shift(2) | Rotation2D(2))\n        array([False, False]...)\n    >>> is_separable(Shift(1) & Shift(2) | Mapping([0, 1, 0, 1]) | \\\n        Polynomial2D(1) & Polynomial2D(2))\n        array([False, False]...)\n    >>> is_separable(Shift(1) & Shift(2) | Mapping([0, 1, 0, 1]))\n        array([ True,  True,  True,  True]...)\n\n    \"\"\"\n    if transform.n_inputs == 1 and transform.n_outputs > 1:\n        is_separable = np.array([False] * transform.n_outputs).T\n        return is_separable\n    separable_matrix = _separable(transform)\n    is_separable = separable_matrix.sum(1)\n    is_separable = np.where(is_separable != 1, False, True)\n    return is_separable\n\n\ndef separability_matrix(transform):\n    \"\"\"\n    Compute the correlation between outputs and inputs.\n\n    Parameters\n    ----------\n    transform : `~astropy.modeling.core.Model`\n        A (compound) model.\n\n    Returns\n    -------\n    separable_matrix : ndarray\n        A boolean correlation matrix of shape (n_outputs, n_inputs).\n        Indicates the dependence of outputs on inputs. For completely\n        independent outputs, the diagonal elements are True and\n        off-diagonal elements are False.\n\n    Examples\n    --------\n    >>> from astropy.modeling.models import Shift, Scale, Rotation2D, Polynomial2D\n    >>> separability_matrix(Shift(1) & Shift(2) | Scale(1) & Scale(2))\n        array([[ True, False], [False,  True]]...)\n    >>> separability_matrix(Shift(1) & Shift(2) | Rotation2D(2))\n        array([[ True,  True], [ True,  True]]...)\n    >>> separability_matrix(Shift(1) & Shift(2) | Mapping([0, 1, 0, 1]) | \\\n        Polynomial2D(1) & Polynomial2D(2))\n        array([[ True,  True], [ True,  True]]...)\n    >>> separability_matrix(Shift(1) & Shift(2) | Mapping([0, 1, 0, 1]))\n        array([[ True, False], [False,  True], [ True, False], [False,  True]]...)\n\n    \"\"\"\n    if transform.n_inputs == 1 and transform.n_outputs > 1:\n        return np.ones((transform.n_outputs, transform.n_inputs),\n                       dtype=np.bool_)\n    separable_matrix = _separable(transform)\n    separable_matrix = np.where(separable_matrix != 0, True, False)\n    return separable_matrix\n\n\ndef _compute_n_outputs(left, right):\n    \"\"\"\n    Compute the number of outputs of two models.\n\n    The two models are the left and right model to an operation in\n    the expression tree of a compound model.\n\n    Parameters\n    ----------\n    left, right : `astropy.modeling.Model` or ndarray\n        If input is of an array, it is the output of `coord_matrix`.\n\n    \"\"\"\n    if isinstance(left, Model):\n        lnout = left.n_outputs\n    else:\n        lnout = left.shape[0]\n    if isinstance(right, Model):\n        rnout = right.n_outputs\n    else:\n        rnout = right.shape[0]\n    noutp = lnout + rnout\n    return noutp\n\n\ndef _arith_oper(left, right):\n    \"\"\"\n    Function corresponding to one of the arithmetic operators\n    ['+', '-'. '*', '/', '**'].\n\n    This always returns a nonseparable output.\n\n\n    Parameters\n    ----------\n    left, right : `astropy.modeling.Model` or ndarray\n        If input is of an array, it is the output of `coord_matrix`.\n\n    Returns\n    -------\n    result : ndarray\n        Result from this operation.\n    \"\"\"\n    # models have the same number of inputs and outputs\n    def _n_inputs_outputs(input):\n        if isinstance(input, Model):\n            n_outputs, n_inputs = input.n_outputs, input.n_inputs\n        else:\n            n_outputs, n_inputs = input.shape\n        return n_inputs, n_outputs\n\n    left_inputs, left_outputs = _n_inputs_outputs(left)\n    right_inputs, right_outputs = _n_inputs_outputs(right)\n\n    if left_inputs != right_inputs or left_outputs != right_outputs:\n        raise ModelDefinitionError(\n            \"Unsupported operands for arithmetic operator: left (n_inputs={}, \"\n            \"n_outputs={}) and right (n_inputs={}, n_outputs={}); \"\n            \"models must have the same n_inputs and the same \"\n            \"n_outputs for this operator.\".format(\n                left_inputs, left_outputs, right_inputs, right_outputs))\n\n    result = np.ones((left_outputs, left_inputs))\n    return result\n\n\ndef _coord_matrix(model, pos, noutp):\n    \"\"\"\n    Create an array representing inputs and outputs of a simple model.\n\n    The array has a shape (noutp, model.n_inputs).\n\n    Parameters\n    ----------\n    model : `astropy.modeling.Model`\n        model\n    pos : str\n        Position of this model in the expression tree.\n        One of ['left', 'right'].\n    noutp : int\n        Number of outputs of the compound model of which the input model\n        is a left or right child.\n\n    \"\"\"\n    if isinstance(model, Mapping):\n        axes = []\n        for i in model.mapping:\n            axis = np.zeros((model.n_inputs,))\n            axis[i] = 1\n            axes.append(axis)\n        m = np.vstack(axes)\n        mat = np.zeros((noutp, model.n_inputs))\n        if pos == 'left':\n            mat[: model.n_outputs, :model.n_inputs] = m\n        else:\n            mat[-model.n_outputs:, -model.n_inputs:] = m\n        return mat\n    if not model.separable:\n        # this does not work for more than 2 coordinates\n        mat = np.zeros((noutp, model.n_inputs))\n        if pos == 'left':\n            mat[:model.n_outputs, : model.n_inputs] = 1\n        else:\n            mat[-model.n_outputs:, -model.n_inputs:] = 1\n    else:\n        mat = np.zeros((noutp, model.n_inputs))\n\n        for i in range(model.n_inputs):\n            mat[i, i] = 1\n        if pos == 'right':\n            mat = np.roll(mat, (noutp - model.n_outputs))\n    return mat\n\n\ndef _cstack(left, right):\n    \"\"\"\n    Function corresponding to '&' operation.\n\n    Parameters\n    ----------\n    left, right : `astropy.modeling.Model` or ndarray\n        If input is of an array, it is the output of `coord_matrix`.\n\n    Returns\n    -------\n    result : ndarray\n        Result from this operation.\n\n    \"\"\"\n    noutp = _compute_n_outputs(left, right)\n\n    if isinstance(left, Model):\n        cleft = _coord_matrix(left, 'left', noutp)\n    else:\n        cleft = np.zeros((noutp, left.shape[1]))\n        cleft[: left.shape[0], : left.shape[1]] = left\n    if isinstance(right, Model):\n        cright = _coord_matrix(right, 'right', noutp)\n    else:\n        cright = np.zeros((noutp, right.shape[1]))\n        cright[-right.shape[0]:, -right.shape[1]:] = 1\n\n    return np.hstack([cleft, cright])\n\n\ndef _cdot(left, right):\n    \"\"\"\n    Function corresponding to \"|\" operation.\n\n    Parameters\n    ----------\n    left, right : `astropy.modeling.Model` or ndarray\n        If input is of an array, it is the output of `coord_matrix`.\n\n    Returns\n    -------\n    result : ndarray\n        Result from this operation.\n    \"\"\"\n\n    left, right = right, left\n\n    def _n_inputs_outputs(input, position):\n        \"\"\"\n        Return ``n_inputs``, ``n_outputs`` for a model or coord_matrix.\n        \"\"\"\n        if isinstance(input, Model):\n            coords = _coord_matrix(input, position, input.n_outputs)\n        else:\n            coords = input\n        return coords\n\n    cleft = _n_inputs_outputs(left, 'left')\n    cright = _n_inputs_outputs(right, 'right')\n\n    try:\n        result = np.dot(cleft, cright)\n    except ValueError:\n        raise ModelDefinitionError(\n            'Models cannot be combined with the \"|\" operator; '\n            'left coord_matrix is {}, right coord_matrix is {}'.format(\n                cright, cleft))\n    return result\n\n\ndef _separable(transform):\n    \"\"\"\n    Calculate the separability of outputs.\n\n    Parameters\n    ----------\n    transform : `astropy.modeling.Model`\n        A transform (usually a compound model).\n\n    Returns :\n    is_separable : ndarray of dtype np.bool\n        An array of shape (transform.n_outputs,) of boolean type\n        Each element represents the separablity of the corresponding output.\n    \"\"\"\n    if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n        return transform_matrix\n    elif isinstance(transform, CompoundModel):\n        sepleft = _separable(transform.left)\n        sepright = _separable(transform.right)\n        return _operators[transform.op](sepleft, sepright)\n    elif isinstance(transform, Model):\n        return _coord_matrix(transform, 'left', transform.n_outputs)\n\n\n# Maps modeling operators to a function computing and represents the\n# relationship of axes as an array of 0-es and 1-s\n_operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,\n              '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n", 317], "/astropy__astropy/astropy/modeling/projections.py": ["# Licensed under a 3-clause BSD style license - see LICENSE.rst\n# -*- coding: utf-8 -*-\n# pylint: disable=invalid-name\n\"\"\"\nImplements projections--particularly sky projections defined in WCS Paper II\n[1]_.\n\nAll angles are set and and displayed in degrees but internally computations are\nperformed in radians. All functions expect inputs and outputs degrees.\n\nReferences\n----------\n.. [1] Calabretta, M.R., Greisen, E.W., 2002, A&A, 395, 1077 (Paper II)\n\"\"\"\n\n\nimport abc\nfrom itertools import chain, product\n\nimport numpy as np\n\nfrom astropy import units as u\nfrom astropy import wcs\n\nfrom .core import Model\nfrom .parameters import Parameter, InputParameterError\nfrom .utils import _to_radian, _to_orig_unit\n\n\n# List of tuples of the form\n# (long class name without suffix, short WCSLIB projection code):\n_PROJ_NAME_CODE = [\n    ('ZenithalPerspective', 'AZP'),\n    ('SlantZenithalPerspective', 'SZP'),\n    ('Gnomonic', 'TAN'),\n    ('Stereographic', 'STG'),\n    ('SlantOrthographic', 'SIN'),\n    ('ZenithalEquidistant', 'ARC'),\n    ('ZenithalEqualArea', 'ZEA'),\n    ('Airy', 'AIR'),\n    ('CylindricalPerspective', 'CYP'),\n    ('CylindricalEqualArea', 'CEA'),\n    ('PlateCarree', 'CAR'),\n    ('Mercator', 'MER'),\n    ('SansonFlamsteed', 'SFL'),\n    ('Parabolic', 'PAR'),\n    ('Molleweide', 'MOL'),\n    ('HammerAitoff', 'AIT'),\n    ('ConicPerspective', 'COP'),\n    ('ConicEqualArea', 'COE'),\n    ('ConicEquidistant', 'COD'),\n    ('ConicOrthomorphic', 'COO'),\n    ('BonneEqualArea', 'BON'),\n    ('Polyconic', 'PCO'),\n    ('TangentialSphericalCube', 'TSC'),\n    ('COBEQuadSphericalCube', 'CSC'),\n    ('QuadSphericalCube', 'QSC'),\n    ('HEALPix', 'HPX'),\n    ('HEALPixPolar', 'XPH'),\n]\n\n_NOT_SUPPORTED_PROJ_CODES = ['ZPN']\n\n_PROJ_NAME_CODE_MAP = dict(_PROJ_NAME_CODE)\n\nprojcodes = [code for _, code in _PROJ_NAME_CODE]\n\n\n__all__ = [\n    'Projection', 'Pix2SkyProjection', 'Sky2PixProjection', 'Zenithal',\n    'Cylindrical', 'PseudoCylindrical', 'Conic', 'PseudoConic', 'QuadCube',\n    'HEALPix', 'AffineTransformation2D', 'projcodes'\n] + list(map('_'.join, product(['Pix2Sky', 'Sky2Pix'], chain(*_PROJ_NAME_CODE))))\n\n\nclass _ParameterDS(Parameter):\n    \"\"\"\n    Same as `Parameter` but can indicate its modified status via the ``dirty``\n    property. This flag also gets set automatically when a parameter is\n    modified.\n\n    This ability to track parameter's modified status is needed for automatic\n    update of WCSLIB's prjprm structure (which may be a more-time intensive\n    operation) *only as required*.\n\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.dirty = True\n\n    def validate(self, value):\n        super().validate(value)\n        self.dirty = True\n\n\nclass Projection(Model):\n    \"\"\"Base class for all sky projections.\"\"\"\n\n    # Radius of the generating sphere.\n    # This sets the circumference to 360 deg so that arc length is measured in deg.\n    r0 = 180 * u.deg / np.pi\n\n    _separable = False\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._prj = wcs.Prjprm()\n\n    @property\n    @abc.abstractmethod\n    def inverse(self):\n        \"\"\"\n        Inverse projection--all projection models must provide an inverse.\n        \"\"\"\n\n    @property\n    def prjprm(self):\n        \"\"\" WCSLIB ``prjprm`` structure. \"\"\"\n        self._update_prj()\n        return self._prj\n\n    def _update_prj(self):\n        \"\"\"\n        A default updater for projection's pv.\n\n        .. warning::\n            This method assumes that PV0 is never modified. If a projection\n            that uses PV0 is ever implemented in this module, that projection\n            class should override this method.\n\n        .. warning::\n            This method assumes that the order in which PVi values (i>0)\n            are to be asigned is identical to the order of model parameters\n            in ``param_names``. That is, pv[1] = model.parameters[0], ...\n\n        \"\"\"\n        if not self.param_names:\n            return\n\n        pv = []\n        dirty = False\n\n        for p in self.param_names:\n            param = getattr(self, p)\n            pv.append(float(param.value))\n            dirty |= param.dirty\n            param.dirty = False\n\n        if dirty:\n            self._prj.pv = None, *pv\n            self._prj.set()\n\n\nclass Pix2SkyProjection(Projection):\n    \"\"\"Base class for all Pix2Sky projections.\"\"\"\n\n    n_inputs = 2\n    n_outputs = 2\n\n    _input_units_strict = True\n    _input_units_allow_dimensionless = True\n\n    def __new__(cls, *args, **kwargs):\n        long_name = cls.name.split('_')[1]\n        cls.prj_code = _PROJ_NAME_CODE_MAP[long_name]\n        return super(Pix2SkyProjection, cls).__new__(cls)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self._prj.code = self.prj_code\n        self._update_prj()\n        if not self.param_names:\n            # force initial call to Prjprm.set() for projections\n            # with no parameters:\n            self._prj.set()\n\n        self.inputs = ('x', 'y')\n        self.outputs = ('phi', 'theta')\n\n    @property\n    def input_units(self):\n        return {self.inputs[0]: u.deg,\n                self.inputs[1]: u.deg}\n\n    @property\n    def return_units(self):\n        return {self.outputs[0]: u.deg,\n                self.outputs[1]: u.deg}\n\n    def evaluate(self, x, y, *args, **kwargs):\n        self._update_prj()\n        return self._prj.prjx2s(x, y)\n\n    @property\n    def inverse(self):\n        pv = [getattr(self, param).value for param in self.param_names]\n        return self._inv_cls(*pv)\n\n\nclass Sky2PixProjection(Projection):\n    \"\"\"Base class for all Sky2Pix projections.\"\"\"\n\n    n_inputs = 2\n    n_outputs = 2\n\n    _input_units_strict = True\n    _input_units_allow_dimensionless = True\n\n    def __new__(cls, *args, **kwargs):\n        long_name = cls.name.split('_')[1]\n        cls.prj_code = _PROJ_NAME_CODE_MAP[long_name]\n        return super(Sky2PixProjection, cls).__new__(cls)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self._prj.code = self.prj_code\n        self._update_prj()\n        if not self.param_names:\n            # force initial call to Prjprm.set() for projections\n            # without parameters:\n            self._prj.set()\n\n        self.inputs = ('phi', 'theta')\n        self.outputs = ('x', 'y')\n\n    @property\n    def input_units(self):\n        return {self.inputs[0]: u.deg,\n                self.inputs[1]: u.deg}\n\n    @property\n    def return_units(self):\n        return {self.outputs[0]: u.deg,\n                self.outputs[1]: u.deg}\n\n    def evaluate(self, phi, theta, *args, **kwargs):\n        self._update_prj()\n        return self._prj.prjs2x(phi, theta)\n\n    @property\n    def inverse(self):\n        pv = [getattr(self, param).value for param in self.param_names]\n        return self._inv_cls(*pv)\n\n\nclass Zenithal(Projection):\n    r\"\"\"Base class for all Zenithal projections.\n\n    Zenithal (or azimuthal) projections map the sphere directly onto a\n    plane.  All zenithal projections are specified by defining the\n    radius as a function of native latitude, :math:`R_\\theta`.\n\n    The pixel-to-sky transformation is defined as:\n\n    .. math::\n        \\phi &= \\arg(-y, x) \\\\\n        R_\\theta &= \\sqrt{x^2 + y^2}\n\n    and the inverse (sky-to-pixel) is defined as:\n\n    .. math::\n        x &= R_\\theta \\sin \\phi \\\\\n        y &= R_\\theta \\cos \\phi\n    \"\"\"\n\n\nclass Pix2Sky_ZenithalPerspective(Pix2SkyProjection, Zenithal):\n    r\"\"\"\n    Zenithal perspective projection - pixel to sky.\n\n    Corresponds to the ``AZP`` projection in FITS WCS.\n\n    .. math::\n        \\phi &= \\arg(-y \\cos \\gamma, x) \\\\\n        \\theta &= \\left\\{\\genfrac{}{}{0pt}{}{\\psi - \\omega}{\\psi + \\omega + 180^{\\circ}}\\right.\n\n    where:\n\n    .. math::\n        \\psi &= \\arg(\\rho, 1) \\\\\n        \\omega &= \\sin^{-1}\\left(\\frac{\\rho \\mu}{\\sqrt{\\rho^2 + 1}}\\right) \\\\\n        \\rho &= \\frac{R}{\\frac{180^{\\circ}}{\\pi}(\\mu + 1) + y \\sin \\gamma} \\\\\n        R &= \\sqrt{x^2 + y^2 \\cos^2 \\gamma}\n\n    Parameters\n    ----------\n    mu : float\n        Distance from point of projection to center of sphere\n        in spherical radii, \u03bc.  Default is 0.\n\n    gamma : float\n        Look angle \u03b3 in degrees.  Default is 0\u00b0.\n\n    \"\"\"\n    mu = _ParameterDS(\n        default=0.0, description=\"Distance from point of projection to center of sphere\"\n    )\n    gamma = _ParameterDS(default=0.0, getter=_to_orig_unit, setter=_to_radian,\n                         description=\"Look angle \u03b3 in degrees (Default = 0\u00b0)\")\n\n    @mu.validator\n    def mu(self, value):\n        if np.any(np.equal(value, -1.0)):\n            raise InputParameterError(\n                \"Zenithal perspective projection is not defined for mu = -1\")\n\n\nclass Sky2Pix_ZenithalPerspective(Sky2PixProjection, Zenithal):\n    r\"\"\"\n    Zenithal perspective projection - sky to pixel.\n\n    Corresponds to the ``AZP`` projection in FITS WCS.\n\n    .. math::\n        x &= R \\sin \\phi \\\\\n        y &= -R \\sec \\gamma \\cos \\theta\n\n    where:\n\n    .. math::\n        R = \\frac{180^{\\circ}}{\\pi} \\frac{(\\mu + 1) \\cos \\theta}{(\\mu + \\sin \\theta) + \\cos \\theta \\cos \\phi \\tan \\gamma}\n\n    Parameters\n    ----------\n    mu : float\n        Distance from point of projection to center of sphere\n        in spherical radii, \u03bc. Default is 0.\n\n    gamma : float\n        Look angle \u03b3 in degrees. Default is 0\u00b0.\n\n    \"\"\"\n    mu = _ParameterDS(\n        default=0.0,\n        description=\"Distance from point of projection to center of sphere\"\n    )\n    gamma = _ParameterDS(default=0.0, getter=_to_orig_unit, setter=_to_radian,\n                         description=\"Look angle \u03b3 in degrees (Default=0\u00b0)\")\n\n    @mu.validator\n    def mu(self, value):\n        if np.any(np.equal(value, -1.0)):\n            raise InputParameterError(\n                \"Zenithal perspective projection is not defined for mu = -1\")\n\n\nclass Pix2Sky_SlantZenithalPerspective(Pix2SkyProjection, Zenithal):\n    r\"\"\"\n    Slant zenithal perspective projection - pixel to sky.\n\n    Corresponds to the ``SZP`` projection in FITS WCS.\n\n    Parameters\n    ----------\n    mu : float\n        Distance from point of projection to center of sphere\n        in spherical radii, \u03bc.  Default is 0.\n\n    phi0 : float\n        The longitude \u03c6\u2080 of the reference point, in degrees.  Default\n        is 0\u00b0.\n\n    theta0 : float\n        The latitude \u03b8\u2080 of the reference point, in degrees.  Default\n        is 90\u00b0.\n\n    \"\"\"\n    mu = _ParameterDS(\n        default=0.0,\n        description=\"Distance from point of projection to center of sphere\"\n    )\n    phi0 = _ParameterDS(\n        default=0.0, getter=_to_orig_unit, setter=_to_radian,\n        description=\"The longitude \u03c6\u2080 of the reference point in degrees (Default=0\u00b0)\"\n    )\n    theta0 = _ParameterDS(\n        default=90.0, getter=_to_orig_unit, setter=_to_radian,\n        description=\"The latitude \u03b8\u2080 of the reference point, in degrees (Default=0\u00b0)\"\n    )\n\n    @mu.validator\n    def mu(self, value):\n        if np.any(np.equal(value, -1.0)):\n            raise InputParameterError(\n                \"Zenithal perspective projection is not defined for mu = -1\")\n\n\nclass Sky2Pix_SlantZenithalPerspective(Sky2PixProjection, Zenithal):\n    r\"\"\"\n    Zenithal perspective projection - sky to pixel.\n\n    Corresponds to the ``SZP`` projection in FITS WCS.\n\n    Parameters\n    ----------\n    mu : float\n        distance from point of projection to center of sphere\n        in spherical radii, \u03bc.  Default is 0.\n\n    phi0 : float\n        The longitude \u03c6\u2080 of the reference point, in degrees.  Default\n        is 0\u00b0.\n\n    theta0 : float\n        The latitude \u03b8\u2080 of the reference point, in degrees.  Default\n        is 90\u00b0.\n\n    \"\"\"\n    mu = _ParameterDS(\n        default=0.0, description=\"Distance from point of projection to center of sphere\"\n    )\n    phi0 = _ParameterDS(\n        default=0.0, getter=_to_orig_unit, setter=_to_radian,\n        description=\"The longitude \u03c6\u2080 of the reference point in degrees\"\n    )\n    theta0 = _ParameterDS(\n        default=0.0, getter=_to_orig_unit, setter=_to_radian,\n        description=\"The latitude \u03b8\u2080 of the reference point, in degrees\"\n    )\n\n    @mu.validator\n    def mu(self, value):\n        if np.any(np.equal(value, -1.0)):\n            raise InputParameterError(\n                \"Zenithal perspective projection is not defined for mu = -1\")\n\n\nclass Pix2Sky_Gnomonic(Pix2SkyProjection, Zenithal):\n    r\"\"\"\n    Gnomonic projection - pixel to sky.\n\n    Corresponds to the ``TAN`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    .. math::\n        \\theta = \\tan^{-1}\\left(\\frac{180^{\\circ}}{\\pi R_\\theta}\\right)\n    \"\"\"\n\n\nclass Sky2Pix_Gnomonic(Sky2PixProjection, Zenithal):\n    r\"\"\"\n    Gnomonic Projection - sky to pixel.\n\n    Corresponds to the ``TAN`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    .. math::\n        R_\\theta = \\frac{180^{\\circ}}{\\pi}\\cot \\theta\n    \"\"\"\n\n\nclass Pix2Sky_Stereographic(Pix2SkyProjection, Zenithal):\n    r\"\"\"\n    Stereographic Projection - pixel to sky.\n\n    Corresponds to the ``STG`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    .. math::\n        \\theta = 90^{\\circ} - 2 \\tan^{-1}\\left(\\frac{\\pi R_\\theta}{360^{\\circ}}\\right)\n    \"\"\"\n\n\nclass Sky2Pix_Stereographic(Sky2PixProjection, Zenithal):\n    r\"\"\"\n    Stereographic Projection - sky to pixel.\n\n    Corresponds to the ``STG`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    .. math::\n        R_\\theta = \\frac{180^{\\circ}}{\\pi}\\frac{2 \\cos \\theta}{1 + \\sin \\theta}\n    \"\"\"\n\n\nclass Pix2Sky_SlantOrthographic(Pix2SkyProjection, Zenithal):\n    r\"\"\"\n    Slant orthographic projection - pixel to sky.\n\n    Corresponds to the ``SIN`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    The following transformation applies when :math:`\\xi` and\n    :math:`\\eta` are both zero.\n\n    .. math::\n        \\theta = \\cos^{-1}\\left(\\frac{\\pi}{180^{\\circ}}R_\\theta\\right)\n\n    The parameters :math:`\\xi` and :math:`\\eta` are defined from the\n    reference point :math:`(\\phi_c, \\theta_c)` as:\n\n    .. math::\n        \\xi &= \\cot \\theta_c \\sin \\phi_c \\\\\n        \\eta &= - \\cot \\theta_c \\cos \\phi_c\n\n    Parameters\n    ----------\n    xi : float\n        Obliqueness parameter, \u03be.  Default is 0.0.\n\n    eta : float\n        Obliqueness parameter, \u03b7.  Default is 0.0.\n\n    \"\"\"\n    xi = _ParameterDS(default=0.0, description=\"Obliqueness parameter\")\n    eta = _ParameterDS(default=0.0, description=\"Obliqueness parameter\")\n\n\nclass Sky2Pix_SlantOrthographic(Sky2PixProjection, Zenithal):\n    r\"\"\"\n    Slant orthographic projection - sky to pixel.\n\n    Corresponds to the ``SIN`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    The following transformation applies when :math:`\\xi` and\n    :math:`\\eta` are both zero.\n\n    .. math::\n        R_\\theta = \\frac{180^{\\circ}}{\\pi}\\cos \\theta\n\n    But more specifically are:\n\n    .. math::\n        x &= \\frac{180^\\circ}{\\pi}[\\cos \\theta \\sin \\phi + \\xi(1 - \\sin \\theta)] \\\\\n        y &= \\frac{180^\\circ}{\\pi}[\\cos \\theta \\cos \\phi + \\eta(1 - \\sin \\theta)]\n\n    \"\"\"\n    xi = _ParameterDS(default=0.0)\n    eta = _ParameterDS(default=0.0)\n\n\nclass Pix2Sky_ZenithalEquidistant(Pix2SkyProjection, Zenithal):\n    r\"\"\"\n    Zenithal equidistant projection - pixel to sky.\n\n    Corresponds to the ``ARC`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    .. math::\n        \\theta = 90^\\circ - R_\\theta\n    \"\"\"\n\n\nclass Sky2Pix_ZenithalEquidistant(Sky2PixProjection, Zenithal):\n    r\"\"\"\n    Zenithal equidistant projection - sky to pixel.\n\n    Corresponds to the ``ARC`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    .. math::\n        R_\\theta = 90^\\circ - \\theta\n    \"\"\"\n\n\nclass Pix2Sky_ZenithalEqualArea(Pix2SkyProjection, Zenithal):\n    r\"\"\"\n    Zenithal equidistant projection - pixel to sky.\n\n    Corresponds to the ``ZEA`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    .. math::\n        \\theta = 90^\\circ - 2 \\sin^{-1} \\left(\\frac{\\pi R_\\theta}{360^\\circ}\\right)\n    \"\"\"\n\n\nclass Sky2Pix_ZenithalEqualArea(Sky2PixProjection, Zenithal):\n    r\"\"\"\n    Zenithal equidistant projection - sky to pixel.\n\n    Corresponds to the ``ZEA`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    .. math::\n        R_\\theta &= \\frac{180^\\circ}{\\pi} \\sqrt{2(1 - \\sin\\theta)} \\\\\n                 &= \\frac{360^\\circ}{\\pi} \\sin\\left(\\frac{90^\\circ - \\theta}{2}\\right)\n    \"\"\"\n\n\nclass Pix2Sky_Airy(Pix2SkyProjection, Zenithal):\n    r\"\"\"\n    Airy projection - pixel to sky.\n\n    Corresponds to the ``AIR`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    Parameters\n    ----------\n    theta_b : float\n        The latitude :math:`\\theta_b` at which to minimize the error,\n        in degrees.  Default is 90\u00b0.\n    \"\"\"\n    theta_b = _ParameterDS(default=90.0)\n\n\nclass Sky2Pix_Airy(Sky2PixProjection, Zenithal):\n    r\"\"\"\n    Airy - sky to pixel.\n\n    Corresponds to the ``AIR`` projection in FITS WCS.\n\n    See `Zenithal` for a definition of the full transformation.\n\n    .. math::\n        R_\\theta = -2 \\frac{180^\\circ}{\\pi}\\left(\\frac{\\ln(\\cos \\xi)}{\\tan \\xi} + \\frac{\\ln(\\cos \\xi_b)}{\\tan^2 \\xi_b} \\tan \\xi \\right)\n\n    where:\n\n    .. math::\n        \\xi &= \\frac{90^\\circ - \\theta}{2} \\\\\n        \\xi_b &= \\frac{90^\\circ - \\theta_b}{2}\n\n    Parameters\n    ----------\n    theta_b : float\n        The latitude :math:`\\theta_b` at which to minimize the error,\n        in degrees.  Default is 90\u00b0.\n\n    \"\"\"\n    theta_b = _ParameterDS(default=90.0, description=\"The latitude at which to minimize the error,in degrees\")\n\n\nclass Cylindrical(Projection):\n    r\"\"\"Base class for Cylindrical projections.\n\n    Cylindrical projections are so-named because the surface of\n    projection is a cylinder.\n    \"\"\"\n    _separable = True\n\n\nclass Pix2Sky_CylindricalPerspective(Pix2SkyProjection, Cylindrical):\n    r\"\"\"\n    Cylindrical perspective - pixel to sky.\n\n    Corresponds to the ``CYP`` projection in FITS WCS.\n\n    .. math::\n        \\phi &= \\frac{x}{\\lambda} \\\\\n        \\theta &= \\arg(1, \\eta) + \\sin{-1}\\left(\\frac{\\eta \\mu}{\\sqrt{\\eta^2 + 1}}\\right)\n\n    where:\n\n    .. math::\n        \\eta = \\frac{\\pi}{180^{\\circ}}\\frac{y}{\\mu + \\lambda}\n\n    Parameters\n    ----------\n    mu : float\n        Distance from center of sphere in the direction opposite the\n        projected surface, in spherical radii, \u03bc. Default is 1.\n\n    lam : float\n        Radius of the cylinder in spherical radii, \u03bb. Default is 1.\n\n    \"\"\"\n    mu = _ParameterDS(default=1.0)\n    lam = _ParameterDS(default=1.0)\n\n    @mu.validator\n    def mu(self, value):\n        if np.any(value == -self.lam):\n            raise InputParameterError(\n                \"CYP projection is not defined for mu = -lambda\")\n\n    @lam.validator\n    def lam(self, value):\n        if np.any(value == -self.mu):\n            raise InputParameterError(\n                \"CYP projection is not defined for lambda = -mu\")\n\n\nclass Sky2Pix_CylindricalPerspective(Sky2PixProjection, Cylindrical):\n    r\"\"\"\n    Cylindrical Perspective - sky to pixel.\n\n    Corresponds to the ``CYP`` projection in FITS WCS.\n\n    .. math::\n        x &= \\lambda \\phi \\\\\n        y &= \\frac{180^{\\circ}}{\\pi}\\left(\\frac{\\mu + \\lambda}{\\mu + \\cos \\theta}\\right)\\sin \\theta\n\n    Parameters\n    ----------\n    mu : float\n        Distance from center of sphere in the direction opposite the\n        projected surface, in spherical radii, \u03bc.  Default is 0.\n\n    lam : float\n        Radius of the cylinder in spherical radii, \u03bb.  Default is 0.\n\n    \"\"\"\n    mu = _ParameterDS(default=1.0, description=\"Distance from center of sphere in spherical radii\")\n    lam = _ParameterDS(default=1.0, description=\"Radius of the cylinder in spherical radii\")\n\n    @mu.validator\n    def mu(self, value):\n        if np.any(value == -self.lam):\n            raise InputParameterError(\n                \"CYP projection is not defined for mu = -lambda\")\n\n    @lam.validator\n    def lam(self, value):\n        if np.any(value == -self.mu):\n            raise InputParameterError(\n                \"CYP projection is not defined for lambda = -mu\")\n\n\nclass Pix2Sky_CylindricalEqualArea(Pix2SkyProjection, Cylindrical):\n    r\"\"\"\n    Cylindrical equal area projection - pixel to sky.\n\n    Corresponds to the ``CEA`` projection in FITS WCS.\n\n    .. math::\n        \\phi &= x \\\\\n        \\theta &= \\sin^{-1}\\left(\\frac{\\pi}{180^{\\circ}}\\lambda y\\right)\n\n    Parameters\n    ----------\n    lam : float\n        Radius of the cylinder in spherical radii, \u03bb.  Default is 1.\n    \"\"\"\n    lam = _ParameterDS(default=1)\n\n\nclass Sky2Pix_CylindricalEqualArea(Sky2PixProjection, Cylindrical):\n    r\"\"\"\n    Cylindrical equal area projection - sky to pixel.\n\n    Corresponds to the ``CEA`` projection in FITS WCS.\n\n    .. math::\n        x &= \\phi \\\\\n        y &= \\frac{180^{\\circ}}{\\pi}\\frac{\\sin \\theta}{\\lambda}\n\n    Parameters\n    ----------\n    lam : float\n        Radius of the cylinder in spherical radii, \u03bb.  Default is 0.\n    \"\"\"\n    lam = _ParameterDS(default=1)\n\n\nclass Pix2Sky_PlateCarree(Pix2SkyProjection, Cylindrical):\n    r\"\"\"\n    Plate carr\u00e9e projection - pixel to sky.\n\n    Corresponds to the ``CAR`` projection in FITS WCS.\n\n    .. math::\n        \\phi &= x \\\\\n        \\theta &= y\n    \"\"\"\n\n    @staticmethod\n    def evaluate(x, y):\n        # The intermediate variables are only used here for clarity\n        phi = np.array(x)\n        theta = np.array(y)\n        return phi, theta\n\n\nclass Sky2Pix_PlateCarree(Sky2PixProjection, Cylindrical):\n    r\"\"\"\n    Plate carr\u00e9e projection - sky to pixel.\n\n    Corresponds to the ``CAR`` projection in FITS WCS.\n\n    .. math::\n        x &= \\phi \\\\\n        y &= \\theta\n    \"\"\"\n\n    @staticmethod\n    def evaluate(phi, theta):\n        # The intermediate variables are only used here for clarity\n        x = np.array(phi)\n        y = np.array(theta)\n        return x, y\n\n\nclass Pix2Sky_Mercator(Pix2SkyProjection, Cylindrical):\n    r\"\"\"\n    Mercator - pixel to sky.\n\n    Corresponds to the ``MER`` projection in FITS WCS.\n\n    .. math::\n        \\phi &= x \\\\\n        \\theta &= 2 \\tan^{-1}\\left(e^{y \\pi / 180^{\\circ}}\\right)-90^{\\circ}\n    \"\"\"\n\n\nclass Sky2Pix_Mercator(Sky2PixProjection, Cylindrical):\n    r\"\"\"\n    Mercator - sky to pixel.\n\n    Corresponds to the ``MER`` projection in FITS WCS.\n\n    .. math::\n        x &= \\phi \\\\\n        y &= \\frac{180^{\\circ}}{\\pi}\\ln \\tan \\left(\\frac{90^{\\circ} + \\theta}{2}\\right)\n    \"\"\"\n\n\nclass PseudoCylindrical(Projection):\n    r\"\"\"Base class for pseudocylindrical projections.\n\n    Pseudocylindrical projections are like cylindrical projections\n    except the parallels of latitude are projected at diminishing\n    lengths toward the polar regions in order to reduce lateral\n    distortion there.  Consequently, the meridians are curved.\n    \"\"\"\n    _separable = True\n\n\nclass Pix2Sky_SansonFlamsteed(Pix2SkyProjection, PseudoCylindrical):\n    r\"\"\"\n    Sanson-Flamsteed projection - pixel to sky.\n\n    Corresponds to the ``SFL`` projection in FITS WCS.\n\n    .. math::\n        \\phi &= \\frac{x}{\\cos y} \\\\\n        \\theta &= y\n    \"\"\"\n\n\nclass Sky2Pix_SansonFlamsteed(Sky2PixProjection, PseudoCylindrical):\n    r\"\"\"\n    Sanson-Flamsteed projection - sky to pixel.\n\n    Corresponds to the ``SFL`` projection in FITS WCS.\n\n    .. math::\n        x &= \\phi \\cos \\theta \\\\\n        y &= \\theta\n    \"\"\"\n\n\nclass Pix2Sky_Parabolic(Pix2SkyProjection, PseudoCylindrical):\n    r\"\"\"\n    Parabolic projection - pixel to sky.\n\n    Corresponds to the ``PAR`` projection in FITS WCS.\n\n    .. math::\n        \\phi &= \\frac{180^\\circ}{\\pi} \\frac{x}{1 - 4(y / 180^\\circ)^2} \\\\\n        \\theta &= 3 \\sin^{-1}\\left(\\frac{y}{180^\\circ}\\right)\n    \"\"\"\n\n\nclass Sky2Pix_Parabolic(Sky2PixProjection, PseudoCylindrical):\n    r\"\"\"\n    Parabolic projection - sky to pixel.\n\n    Corresponds to the ``PAR`` projection in FITS WCS.\n\n    .. math::\n        x &= \\phi \\left(2\\cos\\frac{2\\theta}{3} - 1\\right) \\\\\n        y &= 180^\\circ \\sin \\frac{\\theta}{3}\n    \"\"\"\n\n\nclass Pix2Sky_Molleweide(Pix2SkyProjection, PseudoCylindrical):\n    r\"\"\"\n    Molleweide's projection - pixel to sky.\n\n    Corresponds to the ``MOL`` projection in FITS WCS.\n\n    .. math::\n        \\phi &= \\frac{\\pi x}{2 \\sqrt{2 - \\left(\\frac{\\pi}{180^\\circ}y\\right)^2}} \\\\\n        \\theta &= \\sin^{-1}\\left(\\frac{1}{90^\\circ}\\sin^{-1}\\left(\\frac{\\pi}{180^\\circ}\\frac{y}{\\sqrt{2}}\\right) + \\frac{y}{180^\\circ}\\sqrt{2 - \\left(\\frac{\\pi}{180^\\circ}y\\right)^2}\\right)\n    \"\"\"\n\n\nclass Sky2Pix_Molleweide(Sky2PixProjection, PseudoCylindrical):\n    r\"\"\"\n    Molleweide's projection - sky to pixel.\n\n    Corresponds to the ``MOL`` projection in FITS WCS.\n\n    .. math::\n        x &= \\frac{2 \\sqrt{2}}{\\pi} \\phi \\cos \\gamma \\\\\n        y &= \\sqrt{2} \\frac{180^\\circ}{\\pi} \\sin \\gamma\n\n    where :math:`\\gamma` is defined as the solution of the\n    transcendental equation:\n\n    .. math::\n\n        \\sin \\theta = \\frac{\\gamma}{90^\\circ} + \\frac{\\sin 2 \\gamma}{\\pi}\n    \"\"\"\n\n\nclass Pix2Sky_HammerAitoff(Pix2SkyProjection, PseudoCylindrical):\n    r\"\"\"\n    Hammer-Aitoff projection - pixel to sky.\n\n    Corresponds to the ``AIT`` projection in FITS WCS.\n\n    .. math::\n        \\phi &= 2 \\arg \\left(2Z^2 - 1, \\frac{\\pi}{180^\\circ} \\frac{Z}{2}x\\right) \\\\\n        \\theta &= \\sin^{-1}\\left(\\frac{\\pi}{180^\\circ}yZ\\right)\n    \"\"\"\n\n\nclass Sky2Pix_HammerAitoff(Sky2PixProjection, PseudoCylindrical):\n    r\"\"\"\n    Hammer-Aitoff projection - sky to pixel.\n\n    Corresponds to the ``AIT`` projection in FITS WCS.\n\n    .. math::\n        x &= 2 \\gamma \\cos \\theta \\sin \\frac{\\phi}{2} \\\\\n        y &= \\gamma \\sin \\theta\n\n    where:\n\n    .. math::\n        \\gamma = \\frac{180^\\circ}{\\pi} \\sqrt{\\frac{2}{1 + \\cos \\theta \\cos(\\phi / 2)}}\n    \"\"\"\n\n\nclass Conic(Projection):\n    r\"\"\"Base class for conic projections.\n\n    In conic projections, the sphere is thought to be projected onto\n    the surface of a cone which is then opened out.\n\n    In a general sense, the pixel-to-sky transformation is defined as:\n\n    .. math::\n\n        \\phi &= \\arg\\left(\\frac{Y_0 - y}{R_\\theta}, \\frac{x}{R_\\theta}\\right) / C \\\\\n        R_\\theta &= \\mathrm{sign} \\theta_a \\sqrt{x^2 + (Y_0 - y)^2}\n\n    and the inverse (sky-to-pixel) is defined as:\n\n    .. math::\n        x &= R_\\theta \\sin (C \\phi) \\\\\n        y &= R_\\theta \\cos (C \\phi) + Y_0\n\n    where :math:`C` is the \"constant of the cone\":\n\n    .. math::\n        C = \\frac{180^\\circ \\cos \\theta}{\\pi R_\\theta}\n    \"\"\"\n    sigma = _ParameterDS(default=90.0, getter=_to_orig_unit, setter=_to_radian)\n    delta = _ParameterDS(default=0.0, getter=_to_orig_unit, setter=_to_radian)\n\n\nclass Pix2Sky_ConicPerspective(Pix2SkyProjection, Conic):\n    r\"\"\"\n    Colles' conic perspective projection - pixel to sky.\n\n    Corresponds to the ``COP`` projection in FITS WCS.\n\n    See `Conic` for a description of the entire equation.\n\n    The projection formulae are:\n\n    .. math::\n        C &= \\sin \\theta_a \\\\\n        R_\\theta &= \\frac{180^\\circ}{\\pi} \\cos \\eta [ \\cot \\theta_a - \\tan(\\theta - \\theta_a)] \\\\\n        Y_0 &= \\frac{180^\\circ}{\\pi} \\cos \\eta \\cot \\theta_a\n\n    Parameters\n    ----------\n    sigma : float\n        :math:`(\\theta_1 + \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 90.\n\n    delta : float\n        :math:`(\\theta_1 - \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 0.\n    \"\"\"\n\n\nclass Sky2Pix_ConicPerspective(Sky2PixProjection, Conic):\n    r\"\"\"\n    Colles' conic perspective projection - sky to pixel.\n\n    Corresponds to the ``COP`` projection in FITS WCS.\n\n    See `Conic` for a description of the entire equation.\n\n    The projection formulae are:\n\n    .. math::\n        C &= \\sin \\theta_a \\\\\n        R_\\theta &= \\frac{180^\\circ}{\\pi} \\cos \\eta [ \\cot \\theta_a - \\tan(\\theta - \\theta_a)] \\\\\n        Y_0 &= \\frac{180^\\circ}{\\pi} \\cos \\eta \\cot \\theta_a\n\n    Parameters\n    ----------\n    sigma : float\n        :math:`(\\theta_1 + \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 90.\n\n    delta : float\n        :math:`(\\theta_1 - \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 0.\n    \"\"\"\n\n\nclass Pix2Sky_ConicEqualArea(Pix2SkyProjection, Conic):\n    r\"\"\"\n    Alber's conic equal area projection - pixel to sky.\n\n    Corresponds to the ``COE`` projection in FITS WCS.\n\n    See `Conic` for a description of the entire equation.\n\n    The projection formulae are:\n\n    .. math::\n        C &= \\gamma / 2 \\\\\n        R_\\theta &= \\frac{180^\\circ}{\\pi} \\frac{2}{\\gamma} \\sqrt{1 + \\sin \\theta_1 \\sin \\theta_2 - \\gamma \\sin \\theta} \\\\\n        Y_0 &= \\frac{180^\\circ}{\\pi} \\frac{2}{\\gamma} \\sqrt{1 + \\sin \\theta_1 \\sin \\theta_2 - \\gamma \\sin((\\theta_1 + \\theta_2)/2)}\n\n    where:\n\n    .. math::\n        \\gamma = \\sin \\theta_1 + \\sin \\theta_2\n\n    Parameters\n    ----------\n    sigma : float\n        :math:`(\\theta_1 + \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 90.\n\n    delta : float\n        :math:`(\\theta_1 - \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 0.\n    \"\"\"\n\n\nclass Sky2Pix_ConicEqualArea(Sky2PixProjection, Conic):\n    r\"\"\"\n    Alber's conic equal area projection - sky to pixel.\n\n    Corresponds to the ``COE`` projection in FITS WCS.\n\n    See `Conic` for a description of the entire equation.\n\n    The projection formulae are:\n\n    .. math::\n        C &= \\gamma / 2 \\\\\n        R_\\theta &= \\frac{180^\\circ}{\\pi} \\frac{2}{\\gamma} \\sqrt{1 + \\sin \\theta_1 \\sin \\theta_2 - \\gamma \\sin \\theta} \\\\\n        Y_0 &= \\frac{180^\\circ}{\\pi} \\frac{2}{\\gamma} \\sqrt{1 + \\sin \\theta_1 \\sin \\theta_2 - \\gamma \\sin((\\theta_1 + \\theta_2)/2)}\n\n    where:\n\n    .. math::\n        \\gamma = \\sin \\theta_1 + \\sin \\theta_2\n\n    Parameters\n    ----------\n    sigma : float\n        :math:`(\\theta_1 + \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 90.\n\n    delta : float\n        :math:`(\\theta_1 - \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 0.\n    \"\"\"\n\n\nclass Pix2Sky_ConicEquidistant(Pix2SkyProjection, Conic):\n    r\"\"\"\n    Conic equidistant projection - pixel to sky.\n\n    Corresponds to the ``COD`` projection in FITS WCS.\n\n    See `Conic` for a description of the entire equation.\n\n    The projection formulae are:\n\n    .. math::\n\n        C &= \\frac{180^\\circ}{\\pi} \\frac{\\sin\\theta_a\\sin\\eta}{\\eta} \\\\\n        R_\\theta &= \\theta_a - \\theta + \\eta\\cot\\eta\\cot\\theta_a \\\\\n        Y_0 = \\eta\\cot\\eta\\cot\\theta_a\n\n    Parameters\n    ----------\n    sigma : float\n        :math:`(\\theta_1 + \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 90.\n\n    delta : float\n        :math:`(\\theta_1 - \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 0.\n    \"\"\"\n\n\nclass Sky2Pix_ConicEquidistant(Sky2PixProjection, Conic):\n    r\"\"\"\n    Conic equidistant projection - sky to pixel.\n\n    Corresponds to the ``COD`` projection in FITS WCS.\n\n    See `Conic` for a description of the entire equation.\n\n    The projection formulae are:\n\n    .. math::\n\n        C &= \\frac{180^\\circ}{\\pi} \\frac{\\sin\\theta_a\\sin\\eta}{\\eta} \\\\\n        R_\\theta &= \\theta_a - \\theta + \\eta\\cot\\eta\\cot\\theta_a \\\\\n        Y_0 = \\eta\\cot\\eta\\cot\\theta_a\n\n    Parameters\n    ----------\n    sigma : float\n        :math:`(\\theta_1 + \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 90.\n\n    delta : float\n        :math:`(\\theta_1 - \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 0.\n    \"\"\"\n\n\nclass Pix2Sky_ConicOrthomorphic(Pix2SkyProjection, Conic):\n    r\"\"\"\n    Conic orthomorphic projection - pixel to sky.\n\n    Corresponds to the ``COO`` projection in FITS WCS.\n\n    See `Conic` for a description of the entire equation.\n\n    The projection formulae are:\n\n    .. math::\n\n        C &= \\frac{\\ln \\left( \\frac{\\cos\\theta_2}{\\cos\\theta_1} \\right)}\n                  {\\ln \\left[ \\frac{\\tan\\left(\\frac{90^\\circ-\\theta_2}{2}\\right)}\n                                   {\\tan\\left(\\frac{90^\\circ-\\theta_1}{2}\\right)} \\right] } \\\\\n        R_\\theta &= \\psi \\left[ \\tan \\left( \\frac{90^\\circ - \\theta}{2} \\right) \\right]^C \\\\\n        Y_0 &= \\psi \\left[ \\tan \\left( \\frac{90^\\circ - \\theta_a}{2} \\right) \\right]^C\n\n    where:\n\n    .. math::\n\n        \\psi = \\frac{180^\\circ}{\\pi} \\frac{\\cos \\theta}\n               {C\\left[\\tan\\left(\\frac{90^\\circ-\\theta}{2}\\right)\\right]^C}\n\n    Parameters\n    ----------\n    sigma : float\n        :math:`(\\theta_1 + \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 90.\n\n    delta : float\n        :math:`(\\theta_1 - \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 0.\n    \"\"\"\n\n\nclass Sky2Pix_ConicOrthomorphic(Sky2PixProjection, Conic):\n    r\"\"\"\n    Conic orthomorphic projection - sky to pixel.\n\n    Corresponds to the ``COO`` projection in FITS WCS.\n\n    See `Conic` for a description of the entire equation.\n\n    The projection formulae are:\n\n    .. math::\n\n        C &= \\frac{\\ln \\left( \\frac{\\cos\\theta_2}{\\cos\\theta_1} \\right)}\n                  {\\ln \\left[ \\frac{\\tan\\left(\\frac{90^\\circ-\\theta_2}{2}\\right)}\n                                   {\\tan\\left(\\frac{90^\\circ-\\theta_1}{2}\\right)} \\right] } \\\\\n        R_\\theta &= \\psi \\left[ \\tan \\left( \\frac{90^\\circ - \\theta}{2} \\right) \\right]^C \\\\\n        Y_0 &= \\psi \\left[ \\tan \\left( \\frac{90^\\circ - \\theta_a}{2} \\right) \\right]^C\n\n    where:\n\n    .. math::\n\n        \\psi = \\frac{180^\\circ}{\\pi} \\frac{\\cos \\theta}\n               {C\\left[\\tan\\left(\\frac{90^\\circ-\\theta}{2}\\right)\\right]^C}\n\n    Parameters\n    ----------\n    sigma : float\n        :math:`(\\theta_1 + \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 90.\n\n    delta : float\n        :math:`(\\theta_1 - \\theta_2) / 2`, where :math:`\\theta_1` and\n        :math:`\\theta_2` are the latitudes of the standard parallels,\n        in degrees.  Default is 0.\n    \"\"\"\n\n\nclass PseudoConic(Projection):\n    r\"\"\"Base class for pseudoconic projections.\n\n    Pseudoconics are a subclass of conics with concentric parallels.\n    \"\"\"\n\n\nclass Pix2Sky_BonneEqualArea(Pix2SkyProjection, PseudoConic):\n    r\"\"\"\n    Bonne's equal area pseudoconic projection - pixel to sky.\n\n    Corresponds to the ``BON`` projection in FITS WCS.\n\n    .. math::\n\n        \\phi &= \\frac{\\pi}{180^\\circ} A_\\phi R_\\theta / \\cos \\theta \\\\\n        \\theta &= Y_0 - R_\\theta\n\n    where:\n\n    .. math::\n\n        R_\\theta &= \\mathrm{sign} \\theta_1 \\sqrt{x^2 + (Y_0 - y)^2} \\\\\n        A_\\phi &= \\arg\\left(\\frac{Y_0 - y}{R_\\theta}, \\frac{x}{R_\\theta}\\right)\n\n    Parameters\n    ----------\n    theta1 : float\n        Bonne conformal latitude, in degrees.\n    \"\"\"\n    _separable = True\n\n    theta1 = _ParameterDS(default=0.0, getter=_to_orig_unit, setter=_to_radian)\n\n\nclass Sky2Pix_BonneEqualArea(Sky2PixProjection, PseudoConic):\n    r\"\"\"\n    Bonne's equal area pseudoconic projection - sky to pixel.\n\n    Corresponds to the ``BON`` projection in FITS WCS.\n\n    .. math::\n        x &= R_\\theta \\sin A_\\phi \\\\\n        y &= -R_\\theta \\cos A_\\phi + Y_0\n\n    where:\n\n    .. math::\n        A_\\phi &= \\frac{180^\\circ}{\\pi R_\\theta} \\phi \\cos \\theta \\\\\n        R_\\theta &= Y_0 - \\theta \\\\\n        Y_0 &= \\frac{180^\\circ}{\\pi} \\cot \\theta_1 + \\theta_1\n\n    Parameters\n    ----------\n    theta1 : float\n        Bonne conformal latitude, in degrees.\n    \"\"\"\n    _separable = True\n\n    theta1 = _ParameterDS(default=0.0, getter=_to_orig_unit, setter=_to_radian,\n                          description=\"Bonne conformal latitude, in degrees\")\n\n\nclass Pix2Sky_Polyconic(Pix2SkyProjection, PseudoConic):\n    r\"\"\"\n    Polyconic projection - pixel to sky.\n\n    Corresponds to the ``PCO`` projection in FITS WCS.\n    \"\"\"\n\n\nclass Sky2Pix_Polyconic(Sky2PixProjection, PseudoConic):\n    r\"\"\"\n    Polyconic projection - sky to pixel.\n\n    Corresponds to the ``PCO`` projection in FITS WCS.\n    \"\"\"\n\n\nclass QuadCube(Projection):\n    r\"\"\"Base class for quad cube projections.\n\n    Quadrilateralized spherical cube (quad-cube) projections belong to\n    the class of polyhedral projections in which the sphere is\n    projected onto the surface of an enclosing polyhedron.\n\n    The six faces of the quad-cube projections are numbered and laid\n    out as::\n\n              0\n        4 3 2 1 4 3 2\n              5\n\n    \"\"\"\n\n\nclass Pix2Sky_TangentialSphericalCube(Pix2SkyProjection, QuadCube):\n    r\"\"\"\n    Tangential spherical cube projection - pixel to sky.\n\n    Corresponds to the ``TSC`` projection in FITS WCS.\n    \"\"\"\n\n\nclass Sky2Pix_TangentialSphericalCube(Sky2PixProjection, QuadCube):\n    r\"\"\"\n    Tangential spherical cube projection - sky to pixel.\n\n    Corresponds to the ``TSC`` projection in FITS WCS.\n    \"\"\"\n\n\nclass Pix2Sky_COBEQuadSphericalCube(Pix2SkyProjection, QuadCube):\n    r\"\"\"\n    COBE quadrilateralized spherical cube projection - pixel to sky.\n\n    Corresponds to the ``CSC`` projection in FITS WCS.\n    \"\"\"\n\n\nclass Sky2Pix_COBEQuadSphericalCube(Sky2PixProjection, QuadCube):\n    r\"\"\"\n    COBE quadrilateralized spherical cube projection - sky to pixel.\n\n    Corresponds to the ``CSC`` projection in FITS WCS.\n    \"\"\"\n\n\nclass Pix2Sky_QuadSphericalCube(Pix2SkyProjection, QuadCube):\n    r\"\"\"\n    Quadrilateralized spherical cube projection - pixel to sky.\n\n    Corresponds to the ``QSC`` projection in FITS WCS.\n    \"\"\"\n\n\nclass Sky2Pix_QuadSphericalCube(Sky2PixProjection, QuadCube):\n    r\"\"\"\n    Quadrilateralized spherical cube projection - sky to pixel.\n\n    Corresponds to the ``QSC`` projection in FITS WCS.\n    \"\"\"\n\n\nclass HEALPix(Projection):\n    r\"\"\"Base class for HEALPix projections.\n    \"\"\"\n\n\nclass Pix2Sky_HEALPix(Pix2SkyProjection, HEALPix):\n    r\"\"\"\n    HEALPix - pixel to sky.\n\n    Corresponds to the ``HPX`` projection in FITS WCS.\n\n    Parameters\n    ----------\n    H : float\n        The number of facets in longitude direction.\n\n    X : float\n        The number of facets in latitude direction.\n\n    \"\"\"\n    _separable = True\n\n    H = _ParameterDS(default=4.0, description=\"The number of facets in longitude direction.\")\n    X = _ParameterDS(default=3.0, description=\"The number of facets in latitude direction.\")\n\n\nclass Sky2Pix_HEALPix(Sky2PixProjection, HEALPix):\n    r\"\"\"\n    HEALPix projection - sky to pixel.\n\n    Corresponds to the ``HPX`` projection in FITS WCS.\n\n    Parameters\n    ----------\n    H : float\n        The number of facets in longitude direction.\n\n    X : float\n        The number of facets in latitude direction.\n\n    \"\"\"\n    _separable = True\n\n    H = _ParameterDS(default=4.0, description=\"The number of facets in longitude direction.\")\n    X = _ParameterDS(default=3.0, description=\"The number of facets in latitude direction.\")\n\n\nclass Pix2Sky_HEALPixPolar(Pix2SkyProjection, HEALPix):\n    r\"\"\"\n    HEALPix polar, aka \"butterfly\" projection - pixel to sky.\n\n    Corresponds to the ``XPH`` projection in FITS WCS.\n    \"\"\"\n\n\nclass Sky2Pix_HEALPixPolar(Sky2PixProjection, HEALPix):\n    r\"\"\"\n    HEALPix polar, aka \"butterfly\" projection - pixel to sky.\n\n    Corresponds to the ``XPH`` projection in FITS WCS.\n    \"\"\"\n\n\nclass AffineTransformation2D(Model):\n    \"\"\"\n    Perform an affine transformation in 2 dimensions.\n\n    Parameters\n    ----------\n    matrix : array\n        A 2x2 matrix specifying the linear transformation to apply to the\n        inputs\n\n    translation : array\n        A 2D vector (given as either a 2x1 or 1x2 array) specifying a\n        translation to apply to the inputs\n\n    \"\"\"\n    n_inputs = 2\n    n_outputs = 2\n\n    standard_broadcasting = False\n\n    _separable = False\n\n    matrix = Parameter(default=[[1.0, 0.0], [0.0, 1.0]])\n    translation = Parameter(default=[0.0, 0.0])\n\n    @matrix.validator\n    def matrix(self, value):\n        \"\"\"Validates that the input matrix is a 2x2 2D array.\"\"\"\n\n        if np.shape(value) != (2, 2):\n            raise InputParameterError(\n                \"Expected transformation matrix to be a 2x2 array\")\n\n    @translation.validator\n    def translation(self, value):\n        \"\"\"\n        Validates that the translation vector is a 2D vector.  This allows\n        either a \"row\" vector or a \"column\" vector where in the latter case the\n        resultant Numpy array has ``ndim=2`` but the shape is ``(1, 2)``.\n        \"\"\"\n\n        if not ((np.ndim(value) == 1 and np.shape(value) == (2,)) or\n                (np.ndim(value) == 2 and np.shape(value) == (1, 2))):\n            raise InputParameterError(\n                \"Expected translation vector to be a 2 element row or column \"\n                \"vector array\")\n\n    def __init__(self, matrix=matrix, translation=translation, **kwargs):\n        super().__init__(matrix=matrix, translation=translation, **kwargs)\n        self.inputs = (\"x\", \"y\")\n        self.outputs = (\"x\", \"y\")\n\n    @property\n    def inverse(self):\n        \"\"\"\n        Inverse transformation.\n\n        Raises `~astropy.modeling.InputParameterError` if the transformation cannot be inverted.\n        \"\"\"\n\n        det = np.linalg.det(self.matrix.value)\n\n        if det == 0:\n            raise InputParameterError(\n                \"Transformation matrix is singular; {} model does not \"\n                \"have an inverse\".format(self.__class__.__name__))\n\n        matrix = np.linalg.inv(self.matrix.value)\n        if self.matrix.unit is not None:\n            matrix = matrix * self.matrix.unit\n        # If matrix has unit then translation has unit, so no need to assign it.\n        translation = -np.dot(matrix, self.translation.value)\n        return self.__class__(matrix=matrix, translation=translation)\n\n    @classmethod\n    def evaluate(cls, x, y, matrix, translation):\n        \"\"\"\n        Apply the transformation to a set of 2D Cartesian coordinates given as\n        two lists--one for the x coordinates and one for a y coordinates--or a\n        single coordinate pair.\n\n        Parameters\n        ----------\n        x, y : array, float\n              x and y coordinates\n        \"\"\"\n        if x.shape != y.shape:\n            raise ValueError(\"Expected input arrays to have the same shape\")\n\n        shape = x.shape or (1,)\n        # Use asarray to ensure loose the units.\n        inarr = np.vstack([np.asarray(x).ravel(),\n                           np.asarray(y).ravel(),\n                           np.ones(x.size, x.dtype)])\n\n        if inarr.shape[0] != 3 or inarr.ndim != 2:\n            raise ValueError(\"Incompatible input shapes\")\n\n        augmented_matrix = cls._create_augmented_matrix(matrix, translation)\n        result = np.dot(augmented_matrix, inarr)\n        x, y = result[0], result[1]\n        x.shape = y.shape = shape\n\n        return x, y\n\n    @staticmethod\n    def _create_augmented_matrix(matrix, translation):\n        unit = None\n        if any([hasattr(translation, 'unit'), hasattr(matrix, 'unit')]):\n            if not all([hasattr(translation, 'unit'), hasattr(matrix, 'unit')]):\n                raise ValueError(\"To use AffineTransformation with quantities, \"\n                                 \"both matrix and unit need to be quantities.\")\n            unit = translation.unit\n            # matrix should have the same units as translation\n            if not (matrix.unit / translation.unit) == u.dimensionless_unscaled:\n                raise ValueError(\"matrix and translation must have the same units.\")\n\n        augmented_matrix = np.empty((3, 3), dtype=float)\n        augmented_matrix[0:2, 0:2] = matrix\n        augmented_matrix[0:2, 2:].flat = translation\n        augmented_matrix[2] = [0, 0, 1]\n        if unit is not None:\n            return augmented_matrix * unit\n        return augmented_matrix\n\n    @property\n    def input_units(self):\n        if self.translation.unit is None and self.matrix.unit is None:\n            return None\n        elif self.translation.unit is not None:\n            return dict(zip(self.inputs, [self.translation.unit] * 2))\n        else:\n            return dict(zip(self.inputs, [self.matrix.unit] * 2))\n\n\nfor long_name, short_name in _PROJ_NAME_CODE:\n    # define short-name projection equivalent classes:\n    globals()['Pix2Sky_' + short_name] = globals()['Pix2Sky_' + long_name]\n    globals()['Sky2Pix_' + short_name] = globals()['Sky2Pix_' + long_name]\n    # set inverse classes:\n    globals()['Pix2Sky_' + long_name]._inv_cls = globals()['Sky2Pix_' + long_name]\n    globals()['Sky2Pix_' + long_name]._inv_cls = globals()['Pix2Sky_' + long_name]\n", 1581], "/astropy__astropy/reproducer_astropy__astropy-12907.py": ["\nfrom astropy.modeling import models as m\nfrom astropy.modeling.separable import separability_matrix\n\ncm = m.Linear1D(10) & m.Linear1D(5)\n\nprint(separability_matrix(cm))\nprint(separability_matrix(m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)))\nprint(separability_matrix(m.Pix2Sky_TAN() & cm))\n", 9]}, "functions": {"__setattr__ (/astropy__astropy/astropy/modeling/core.py:885)": ["/astropy__astropy/astropy/modeling/core.py", 885], "_default_inputs_outputs (/astropy__astropy/astropy/modeling/core.py:726)": ["/astropy__astropy/astropy/modeling/core.py", 726], "_create_value_wrapper (/astropy__astropy/astropy/modeling/parameters.py:634)": ["/astropy__astropy/astropy/modeling/parameters.py", 634], "model (/astropy__astropy/astropy/modeling/parameters.py:607)": ["/astropy__astropy/astropy/modeling/parameters.py", 607], "_initialize_constraints (/astropy__astropy/astropy/modeling/core.py:2365)": ["/astropy__astropy/astropy/modeling/core.py", 2365], "_initialize_setters (/astropy__astropy/astropy/modeling/core.py:744)": ["/astropy__astropy/astropy/modeling/core.py", 744], "quantity_asanyarray (/astropy__astropy/astropy/units/utils.py:290)": ["/astropy__astropy/astropy/units/utils.py", 290], "unit (/astropy__astropy/astropy/modeling/parameters.py:346)": ["/astropy__astropy/astropy/modeling/parameters.py", 346], "internal_unit (/astropy__astropy/astropy/modeling/parameters.py:380)": ["/astropy__astropy/astropy/modeling/parameters.py", 380], "_initialize_parameter_value (/astropy__astropy/astropy/modeling/core.py:2525)": ["/astropy__astropy/astropy/modeling/core.py", 2525], "value (/astropy__astropy/astropy/modeling/parameters.py:313)": ["/astropy__astropy/astropy/modeling/parameters.py", 313], "<genexpr> (/astropy__astropy/astropy/utils/shapes.py:332)": ["/astropy__astropy/astropy/utils/shapes.py", 332], "check_broadcast (/astropy__astropy/astropy/utils/shapes.py:308)": ["/astropy__astropy/astropy/utils/shapes.py", 308], "_check_param_broadcast (/astropy__astropy/astropy/modeling/core.py:2608)": ["/astropy__astropy/astropy/modeling/core.py", 2608], "_initialize_parameters (/astropy__astropy/astropy/modeling/core.py:2382)": ["/astropy__astropy/astropy/modeling/core.py", 2382], "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:2568)": ["/astropy__astropy/astropy/modeling/core.py", 2568], "inputs (/astropy__astropy/astropy/modeling/core.py:757)": ["/astropy__astropy/astropy/modeling/core.py", 757], "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:824)": ["/astropy__astropy/astropy/modeling/core.py", 824], "<dictcomp> (/astropy__astropy/astropy/modeling/core.py:828)": ["/astropy__astropy/astropy/modeling/core.py", 828], "_initialize_unit_support (/astropy__astropy/astropy/modeling/core.py:817)": ["/astropy__astropy/astropy/modeling/core.py", 817], "__init__ (/astropy__astropy/astropy/modeling/core.py:701)": ["/astropy__astropy/astropy/modeling/core.py", 701], "__init__ (/astropy__astropy/astropy/modeling/core.py:430)": ["/astropy__astropy/astropy/modeling/core.py", 430], "__init__ (/astropy__astropy/astropy/modeling/core.py:432)": ["/astropy__astropy/astropy/modeling/core.py", 432], "param_names (/astropy__astropy/astropy/modeling/core.py:3286)": ["/astropy__astropy/astropy/modeling/core.py", 3286], "__len__ (/astropy__astropy/astropy/modeling/core.py:878)": ["/astropy__astropy/astropy/modeling/core.py", 878], "model_set_axis (/astropy__astropy/astropy/modeling/core.py:1154)": ["/astropy__astropy/astropy/modeling/core.py", 1154], "n_inputs (/astropy__astropy/astropy/modeling/core.py:3376)": ["/astropy__astropy/astropy/modeling/core.py", 3376], "n_outputs (/astropy__astropy/astropy/modeling/core.py:3385)": ["/astropy__astropy/astropy/modeling/core.py", 3385], "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:256)": ["/astropy__astropy/astropy/modeling/utils.py", 256], "<genexpr> (/astropy__astropy/astropy/modeling/utils.py:257)": ["/astropy__astropy/astropy/modeling/utils.py", 257], "combine_labels (/astropy__astropy/astropy/modeling/utils.py:245)": ["/astropy__astropy/astropy/modeling/utils.py", 245], "n_inputs (/astropy__astropy/astropy/modeling/core.py:3371)": ["/astropy__astropy/astropy/modeling/core.py", 3371], "inputs (/astropy__astropy/astropy/modeling/core.py:761)": ["/astropy__astropy/astropy/modeling/core.py", 761], "outputs (/astropy__astropy/astropy/modeling/core.py:768)": ["/astropy__astropy/astropy/modeling/core.py", 768], "n_outputs (/astropy__astropy/astropy/modeling/core.py:3380)": ["/astropy__astropy/astropy/modeling/core.py", 3380], "outputs (/astropy__astropy/astropy/modeling/core.py:772)": ["/astropy__astropy/astropy/modeling/core.py", 772], "name (/astropy__astropy/astropy/modeling/core.py:1148)": ["/astropy__astropy/astropy/modeling/core.py", 1148], "eqcons (/astropy__astropy/astropy/modeling/core.py:3393)": ["/astropy__astropy/astropy/modeling/core.py", 3393], "ineqcons (/astropy__astropy/astropy/modeling/core.py:3401)": ["/astropy__astropy/astropy/modeling/core.py", 3401], "_parameters_to_array (/astropy__astropy/astropy/modeling/core.py:2585)": ["/astropy__astropy/astropy/modeling/core.py", 2585], "parameters (/astropy__astropy/astropy/modeling/core.py:1179)": ["/astropy__astropy/astropy/modeling/core.py", 1179], "isleaf (/astropy__astropy/astropy/modeling/core.py:3475)": ["/astropy__astropy/astropy/modeling/core.py", 3475], "make_subtree_dict (/astropy__astropy/astropy/modeling/core.py:4041)": ["/astropy__astropy/astropy/modeling/core.py", 4041], "_make_leaflist (/astropy__astropy/astropy/modeling/core.py:3291)": ["/astropy__astropy/astropy/modeling/core.py", 3291], "<genexpr> (/astropy__astropy/astropy/modeling/core.py:3546)": ["/astropy__astropy/astropy/modeling/core.py", 3546], "_initialize_slices (/astropy__astropy/astropy/modeling/core.py:3550)": ["/astropy__astropy/astropy/modeling/core.py", 3550], "_map_parameters (/astropy__astropy/astropy/modeling/core.py:3505)": ["/astropy__astropy/astropy/modeling/core.py", 3505], "__init__ (/astropy__astropy/astropy/modeling/core.py:2902)": ["/astropy__astropy/astropy/modeling/core.py", 2902], "<lambda> (/astropy__astropy/astropy/modeling/core.py:57)": ["/astropy__astropy/astropy/modeling/core.py", 57], "_calculate_separability_matrix (/astropy__astropy/astropy/modeling/core.py:808)": ["/astropy__astropy/astropy/modeling/core.py", 808], "separable (/astropy__astropy/astropy/modeling/core.py:1531)": ["/astropy__astropy/astropy/modeling/core.py", 1531], "_coord_matrix (/astropy__astropy/astropy/modeling/separable.py:171)": ["/astropy__astropy/astropy/modeling/separable.py", 171], "_separable (/astropy__astropy/astropy/modeling/separable.py:290)": ["/astropy__astropy/astropy/modeling/separable.py", 290], "_compute_n_outputs (/astropy__astropy/astropy/modeling/separable.py:105)": ["/astropy__astropy/astropy/modeling/separable.py", 105], "_cstack (/astropy__astropy/astropy/modeling/separable.py:219)": ["/astropy__astropy/astropy/modeling/separable.py", 219], "separability_matrix (/astropy__astropy/astropy/modeling/separable.py:66)": ["/astropy__astropy/astropy/modeling/separable.py", 66], "name (/astropy__astropy/astropy/modeling/core.py:179)": ["/astropy__astropy/astropy/modeling/core.py", 179], "__new__ (/astropy__astropy/astropy/modeling/projections.py:163)": ["/astropy__astropy/astropy/modeling/projections.py", 163], "<genexpr> (/astropy__astropy/astropy/modeling/core.py:735)": ["/astropy__astropy/astropy/modeling/core.py", 735], "<genexpr> (/astropy__astropy/astropy/modeling/core.py:736)": ["/astropy__astropy/astropy/modeling/core.py", 736], "__init__ (/astropy__astropy/astropy/modeling/projections.py:105)": ["/astropy__astropy/astropy/modeling/projections.py", 105], "_update_prj (/astropy__astropy/astropy/modeling/projections.py:122)": ["/astropy__astropy/astropy/modeling/projections.py", 122], "__init__ (/astropy__astropy/astropy/modeling/projections.py:168)": ["/astropy__astropy/astropy/modeling/projections.py", 168], "<module> (/astropy__astropy/reproducer_astropy__astropy-12907.py:2)": ["/astropy__astropy/reproducer_astropy__astropy-12907.py", 2]}}}